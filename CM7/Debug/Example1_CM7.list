
Example1_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e84  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005124  08005124  00015124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051ac  080051ac  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080051ac  080051ac  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051ac  080051ac  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051ac  080051ac  000151ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051b0  080051b0  000151b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  24000000  080051b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049c4  24000014  080051c8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240049d8  080051c8  000249d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018d3f  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003151  00000000  00000000  00038d81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  0003bed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001358  00000000  00000000  0003d378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a209  00000000  00000000  0003e6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000162a4  00000000  00000000  000788d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00186212  00000000  00000000  0008eb7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00214d8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005678  00000000  00000000  00214de0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000014 	.word	0x24000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800510c 	.word	0x0800510c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000018 	.word	0x24000018
 80002dc:	0800510c 	.word	0x0800510c

080002e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002e4:	4b3d      	ldr	r3, [pc, #244]	; (80003dc <SystemInit+0xfc>)
 80002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002ea:	4a3c      	ldr	r2, [pc, #240]	; (80003dc <SystemInit+0xfc>)
 80002ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002f4:	4b39      	ldr	r3, [pc, #228]	; (80003dc <SystemInit+0xfc>)
 80002f6:	691b      	ldr	r3, [r3, #16]
 80002f8:	4a38      	ldr	r2, [pc, #224]	; (80003dc <SystemInit+0xfc>)
 80002fa:	f043 0310 	orr.w	r3, r3, #16
 80002fe:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000300:	4b37      	ldr	r3, [pc, #220]	; (80003e0 <SystemInit+0x100>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	f003 030f 	and.w	r3, r3, #15
 8000308:	2b06      	cmp	r3, #6
 800030a:	d807      	bhi.n	800031c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800030c:	4b34      	ldr	r3, [pc, #208]	; (80003e0 <SystemInit+0x100>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f023 030f 	bic.w	r3, r3, #15
 8000314:	4a32      	ldr	r2, [pc, #200]	; (80003e0 <SystemInit+0x100>)
 8000316:	f043 0307 	orr.w	r3, r3, #7
 800031a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800031c:	4b31      	ldr	r3, [pc, #196]	; (80003e4 <SystemInit+0x104>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a30      	ldr	r2, [pc, #192]	; (80003e4 <SystemInit+0x104>)
 8000322:	f043 0301 	orr.w	r3, r3, #1
 8000326:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000328:	4b2e      	ldr	r3, [pc, #184]	; (80003e4 <SystemInit+0x104>)
 800032a:	2200      	movs	r2, #0
 800032c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800032e:	4b2d      	ldr	r3, [pc, #180]	; (80003e4 <SystemInit+0x104>)
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	492c      	ldr	r1, [pc, #176]	; (80003e4 <SystemInit+0x104>)
 8000334:	4b2c      	ldr	r3, [pc, #176]	; (80003e8 <SystemInit+0x108>)
 8000336:	4013      	ands	r3, r2
 8000338:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800033a:	4b29      	ldr	r3, [pc, #164]	; (80003e0 <SystemInit+0x100>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f003 0308 	and.w	r3, r3, #8
 8000342:	2b00      	cmp	r3, #0
 8000344:	d007      	beq.n	8000356 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000346:	4b26      	ldr	r3, [pc, #152]	; (80003e0 <SystemInit+0x100>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f023 030f 	bic.w	r3, r3, #15
 800034e:	4a24      	ldr	r2, [pc, #144]	; (80003e0 <SystemInit+0x100>)
 8000350:	f043 0307 	orr.w	r3, r3, #7
 8000354:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000356:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <SystemInit+0x104>)
 8000358:	2200      	movs	r2, #0
 800035a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800035c:	4b21      	ldr	r3, [pc, #132]	; (80003e4 <SystemInit+0x104>)
 800035e:	2200      	movs	r2, #0
 8000360:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000362:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <SystemInit+0x104>)
 8000364:	2200      	movs	r2, #0
 8000366:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000368:	4b1e      	ldr	r3, [pc, #120]	; (80003e4 <SystemInit+0x104>)
 800036a:	4a20      	ldr	r2, [pc, #128]	; (80003ec <SystemInit+0x10c>)
 800036c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800036e:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <SystemInit+0x104>)
 8000370:	4a1f      	ldr	r2, [pc, #124]	; (80003f0 <SystemInit+0x110>)
 8000372:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000374:	4b1b      	ldr	r3, [pc, #108]	; (80003e4 <SystemInit+0x104>)
 8000376:	4a1f      	ldr	r2, [pc, #124]	; (80003f4 <SystemInit+0x114>)
 8000378:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800037a:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <SystemInit+0x104>)
 800037c:	2200      	movs	r2, #0
 800037e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000380:	4b18      	ldr	r3, [pc, #96]	; (80003e4 <SystemInit+0x104>)
 8000382:	4a1c      	ldr	r2, [pc, #112]	; (80003f4 <SystemInit+0x114>)
 8000384:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000386:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <SystemInit+0x104>)
 8000388:	2200      	movs	r2, #0
 800038a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800038c:	4b15      	ldr	r3, [pc, #84]	; (80003e4 <SystemInit+0x104>)
 800038e:	4a19      	ldr	r2, [pc, #100]	; (80003f4 <SystemInit+0x114>)
 8000390:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000392:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <SystemInit+0x104>)
 8000394:	2200      	movs	r2, #0
 8000396:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000398:	4b12      	ldr	r3, [pc, #72]	; (80003e4 <SystemInit+0x104>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a11      	ldr	r2, [pc, #68]	; (80003e4 <SystemInit+0x104>)
 800039e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80003a4:	4b0f      	ldr	r3, [pc, #60]	; (80003e4 <SystemInit+0x104>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003aa:	4b13      	ldr	r3, [pc, #76]	; (80003f8 <SystemInit+0x118>)
 80003ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003ae:	4a12      	ldr	r2, [pc, #72]	; (80003f8 <SystemInit+0x118>)
 80003b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003b4:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003b6:	4b11      	ldr	r3, [pc, #68]	; (80003fc <SystemInit+0x11c>)
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	4b11      	ldr	r3, [pc, #68]	; (8000400 <SystemInit+0x120>)
 80003bc:	4013      	ands	r3, r2
 80003be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003c2:	d202      	bcs.n	80003ca <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003c4:	4b0f      	ldr	r3, [pc, #60]	; (8000404 <SystemInit+0x124>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003ca:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <SystemInit+0x128>)
 80003cc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003d0:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	52002000 	.word	0x52002000
 80003e4:	58024400 	.word	0x58024400
 80003e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80003ec:	02020200 	.word	0x02020200
 80003f0:	01ff0000 	.word	0x01ff0000
 80003f4:	01010280 	.word	0x01010280
 80003f8:	580000c0 	.word	0x580000c0
 80003fc:	5c001000 	.word	0x5c001000
 8000400:	ffff0000 	.word	0xffff0000
 8000404:	51008108 	.word	0x51008108
 8000408:	52004000 	.word	0x52004000

0800040c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000412:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000416:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000418:	bf00      	nop
 800041a:	4b2a      	ldr	r3, [pc, #168]	; (80004c4 <main+0xb8>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000422:	2b00      	cmp	r3, #0
 8000424:	d004      	beq.n	8000430 <main+0x24>
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	1e5a      	subs	r2, r3, #1
 800042a:	607a      	str	r2, [r7, #4]
 800042c:	2b00      	cmp	r3, #0
 800042e:	dcf4      	bgt.n	800041a <main+0xe>
  if ( timeout < 0 )
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	2b00      	cmp	r3, #0
 8000434:	da01      	bge.n	800043a <main+0x2e>
  {
  Error_Handler();
 8000436:	f000 f965 	bl	8000704 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800043a:	f000 fa3d 	bl	80008b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800043e:	f000 f84f 	bl	80004e0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000442:	4b20      	ldr	r3, [pc, #128]	; (80004c4 <main+0xb8>)
 8000444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000448:	4a1e      	ldr	r2, [pc, #120]	; (80004c4 <main+0xb8>)
 800044a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800044e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000452:	4b1c      	ldr	r3, [pc, #112]	; (80004c4 <main+0xb8>)
 8000454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800045c:	603b      	str	r3, [r7, #0]
 800045e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000460:	2000      	movs	r0, #0
 8000462:	f000 fd55 	bl	8000f10 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000466:	2100      	movs	r1, #0
 8000468:	2000      	movs	r0, #0
 800046a:	f000 fd6b 	bl	8000f44 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800046e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000472:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000474:	bf00      	nop
 8000476:	4b13      	ldr	r3, [pc, #76]	; (80004c4 <main+0xb8>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800047e:	2b00      	cmp	r3, #0
 8000480:	d104      	bne.n	800048c <main+0x80>
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	1e5a      	subs	r2, r3, #1
 8000486:	607a      	str	r2, [r7, #4]
 8000488:	2b00      	cmp	r3, #0
 800048a:	dcf4      	bgt.n	8000476 <main+0x6a>
if ( timeout < 0 )
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	2b00      	cmp	r3, #0
 8000490:	da01      	bge.n	8000496 <main+0x8a>
{
Error_Handler();
 8000492:	f000 f937 	bl	8000704 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000496:	f000 f8a1 	bl	80005dc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800049a:	f002 f8c5 	bl	8002628 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of myTask01 */
  myTask01Handle = osThreadNew(StartDefaultTask, NULL, &myTask01_attributes);
 800049e:	4a0a      	ldr	r2, [pc, #40]	; (80004c8 <main+0xbc>)
 80004a0:	2100      	movs	r1, #0
 80004a2:	480a      	ldr	r0, [pc, #40]	; (80004cc <main+0xc0>)
 80004a4:	f002 f90a 	bl	80026bc <osThreadNew>
 80004a8:	4603      	mov	r3, r0
 80004aa:	4a09      	ldr	r2, [pc, #36]	; (80004d0 <main+0xc4>)
 80004ac:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80004ae:	4a09      	ldr	r2, [pc, #36]	; (80004d4 <main+0xc8>)
 80004b0:	2100      	movs	r1, #0
 80004b2:	4809      	ldr	r0, [pc, #36]	; (80004d8 <main+0xcc>)
 80004b4:	f002 f902 	bl	80026bc <osThreadNew>
 80004b8:	4603      	mov	r3, r0
 80004ba:	4a08      	ldr	r2, [pc, #32]	; (80004dc <main+0xd0>)
 80004bc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004be:	f002 f8d7 	bl	8002670 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004c2:	e7fe      	b.n	80004c2 <main+0xb6>
 80004c4:	58024400 	.word	0x58024400
 80004c8:	08005164 	.word	0x08005164
 80004cc:	08000695 	.word	0x08000695
 80004d0:	24000030 	.word	0x24000030
 80004d4:	08005188 	.word	0x08005188
 80004d8:	080006c1 	.word	0x080006c1
 80004dc:	24000034 	.word	0x24000034

080004e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b09c      	sub	sp, #112	; 0x70
 80004e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004ea:	224c      	movs	r2, #76	; 0x4c
 80004ec:	2100      	movs	r1, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f004 fe04 	bl	80050fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	2220      	movs	r2, #32
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f004 fdfe 	bl	80050fc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000500:	2004      	movs	r0, #4
 8000502:	f000 fd33 	bl	8000f6c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000506:	2300      	movs	r3, #0
 8000508:	603b      	str	r3, [r7, #0]
 800050a:	4b32      	ldr	r3, [pc, #200]	; (80005d4 <SystemClock_Config+0xf4>)
 800050c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800050e:	4a31      	ldr	r2, [pc, #196]	; (80005d4 <SystemClock_Config+0xf4>)
 8000510:	f023 0301 	bic.w	r3, r3, #1
 8000514:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000516:	4b2f      	ldr	r3, [pc, #188]	; (80005d4 <SystemClock_Config+0xf4>)
 8000518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	603b      	str	r3, [r7, #0]
 8000520:	4b2d      	ldr	r3, [pc, #180]	; (80005d8 <SystemClock_Config+0xf8>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000528:	4a2b      	ldr	r2, [pc, #172]	; (80005d8 <SystemClock_Config+0xf8>)
 800052a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800052e:	6193      	str	r3, [r2, #24]
 8000530:	4b29      	ldr	r3, [pc, #164]	; (80005d8 <SystemClock_Config+0xf8>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000538:	603b      	str	r3, [r7, #0]
 800053a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800053c:	bf00      	nop
 800053e:	4b26      	ldr	r3, [pc, #152]	; (80005d8 <SystemClock_Config+0xf8>)
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800054a:	d1f8      	bne.n	800053e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800054c:	2302      	movs	r3, #2
 800054e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000550:	2301      	movs	r3, #1
 8000552:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000554:	2340      	movs	r3, #64	; 0x40
 8000556:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000558:	2302      	movs	r3, #2
 800055a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800055c:	2300      	movs	r3, #0
 800055e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000560:	2304      	movs	r3, #4
 8000562:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000564:	230a      	movs	r3, #10
 8000566:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000568:	2302      	movs	r3, #2
 800056a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800056c:	2302      	movs	r3, #2
 800056e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000570:	2302      	movs	r3, #2
 8000572:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000574:	230c      	movs	r3, #12
 8000576:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000578:	2302      	movs	r3, #2
 800057a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000584:	4618      	mov	r0, r3
 8000586:	f000 fd4b 	bl	8001020 <HAL_RCC_OscConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000590:	f000 f8b8 	bl	8000704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000594:	233f      	movs	r3, #63	; 0x3f
 8000596:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000598:	2303      	movs	r3, #3
 800059a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80005a4:	2340      	movs	r3, #64	; 0x40
 80005a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80005a8:	2340      	movs	r3, #64	; 0x40
 80005aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80005ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005b0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80005b2:	2340      	movs	r3, #64	; 0x40
 80005b4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	2101      	movs	r1, #1
 80005ba:	4618      	mov	r0, r3
 80005bc:	f001 f95e 	bl	800187c <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0xea>
  {
    Error_Handler();
 80005c6:	f000 f89d 	bl	8000704 <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	3770      	adds	r7, #112	; 0x70
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	58000400 	.word	0x58000400
 80005d8:	58024800 	.word	0x58024800

080005dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f2:	4b25      	ldr	r3, [pc, #148]	; (8000688 <MX_GPIO_Init+0xac>)
 80005f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005f8:	4a23      	ldr	r2, [pc, #140]	; (8000688 <MX_GPIO_Init+0xac>)
 80005fa:	f043 0302 	orr.w	r3, r3, #2
 80005fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000602:	4b21      	ldr	r3, [pc, #132]	; (8000688 <MX_GPIO_Init+0xac>)
 8000604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000608:	f003 0302 	and.w	r3, r3, #2
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000610:	4b1d      	ldr	r3, [pc, #116]	; (8000688 <MX_GPIO_Init+0xac>)
 8000612:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000616:	4a1c      	ldr	r2, [pc, #112]	; (8000688 <MX_GPIO_Init+0xac>)
 8000618:	f043 0310 	orr.w	r3, r3, #16
 800061c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000620:	4b19      	ldr	r3, [pc, #100]	; (8000688 <MX_GPIO_Init+0xac>)
 8000622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000626:	f003 0310 	and.w	r3, r3, #16
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	f244 0101 	movw	r1, #16385	; 0x4001
 8000634:	4815      	ldr	r0, [pc, #84]	; (800068c <MX_GPIO_Init+0xb0>)
 8000636:	f000 fc37 	bl	8000ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	2102      	movs	r1, #2
 800063e:	4814      	ldr	r0, [pc, #80]	; (8000690 <MX_GPIO_Init+0xb4>)
 8000640:	f000 fc32 	bl	8000ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14;
 8000644:	f244 0301 	movw	r3, #16385	; 0x4001
 8000648:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064a:	2301      	movs	r3, #1
 800064c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	2300      	movs	r3, #0
 8000650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000652:	2300      	movs	r3, #0
 8000654:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000656:	f107 030c 	add.w	r3, r7, #12
 800065a:	4619      	mov	r1, r3
 800065c:	480b      	ldr	r0, [pc, #44]	; (800068c <MX_GPIO_Init+0xb0>)
 800065e:	f000 fa73 	bl	8000b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000662:	2302      	movs	r3, #2
 8000664:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000666:	2301      	movs	r3, #1
 8000668:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066e:	2300      	movs	r3, #0
 8000670:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000672:	f107 030c 	add.w	r3, r7, #12
 8000676:	4619      	mov	r1, r3
 8000678:	4805      	ldr	r0, [pc, #20]	; (8000690 <MX_GPIO_Init+0xb4>)
 800067a:	f000 fa65 	bl	8000b48 <HAL_GPIO_Init>

}
 800067e:	bf00      	nop
 8000680:	3720      	adds	r7, #32
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	58024400 	.word	0x58024400
 800068c:	58020400 	.word	0x58020400
 8000690:	58021000 	.word	0x58021000

08000694 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 800069c:	2102      	movs	r1, #2
 800069e:	4806      	ldr	r0, [pc, #24]	; (80006b8 <StartDefaultTask+0x24>)
 80006a0:	f000 fc1b 	bl	8000eda <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80006a4:	2101      	movs	r1, #1
 80006a6:	4805      	ldr	r0, [pc, #20]	; (80006bc <StartDefaultTask+0x28>)
 80006a8:	f000 fc17 	bl	8000eda <HAL_GPIO_TogglePin>
	  vTaskDelay(500 / portTICK_PERIOD_MS);
 80006ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006b0:	f003 fc48 	bl	8003f44 <vTaskDelay>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 80006b4:	e7f2      	b.n	800069c <StartDefaultTask+0x8>
 80006b6:	bf00      	nop
 80006b8:	58021000 	.word	0x58021000
 80006bc:	58020400 	.word	0x58020400

080006c0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80006c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006cc:	4803      	ldr	r0, [pc, #12]	; (80006dc <StartTask02+0x1c>)
 80006ce:	f000 fc04 	bl	8000eda <HAL_GPIO_TogglePin>
	  vTaskDelay(750 / portTICK_PERIOD_MS);
 80006d2:	f240 20ee 	movw	r0, #750	; 0x2ee
 80006d6:	f003 fc35 	bl	8003f44 <vTaskDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80006da:	e7f5      	b.n	80006c8 <StartTask02+0x8>
 80006dc:	58020400 	.word	0x58020400

080006e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a04      	ldr	r2, [pc, #16]	; (8000700 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d101      	bne.n	80006f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006f2:	f000 f91d 	bl	8000930 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40001000 	.word	0x40001000

08000704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000708:	b672      	cpsid	i
}
 800070a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800070c:	e7fe      	b.n	800070c <Error_Handler+0x8>
	...

08000710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <HAL_MspInit+0x38>)
 8000718:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800071c:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <HAL_MspInit+0x38>)
 800071e:	f043 0302 	orr.w	r3, r3, #2
 8000722:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <HAL_MspInit+0x38>)
 8000728:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800072c:	f003 0302 	and.w	r3, r3, #2
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000734:	2200      	movs	r2, #0
 8000736:	210f      	movs	r1, #15
 8000738:	f06f 0001 	mvn.w	r0, #1
 800073c:	f000 f9dc 	bl	8000af8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	58024400 	.word	0x58024400

0800074c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b090      	sub	sp, #64	; 0x40
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2b0f      	cmp	r3, #15
 8000758:	d827      	bhi.n	80007aa <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800075a:	2200      	movs	r2, #0
 800075c:	6879      	ldr	r1, [r7, #4]
 800075e:	2036      	movs	r0, #54	; 0x36
 8000760:	f000 f9ca 	bl	8000af8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000764:	2036      	movs	r0, #54	; 0x36
 8000766:	f000 f9e1 	bl	8000b2c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800076a:	4a29      	ldr	r2, [pc, #164]	; (8000810 <HAL_InitTick+0xc4>)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000770:	4b28      	ldr	r3, [pc, #160]	; (8000814 <HAL_InitTick+0xc8>)
 8000772:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000776:	4a27      	ldr	r2, [pc, #156]	; (8000814 <HAL_InitTick+0xc8>)
 8000778:	f043 0310 	orr.w	r3, r3, #16
 800077c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000780:	4b24      	ldr	r3, [pc, #144]	; (8000814 <HAL_InitTick+0xc8>)
 8000782:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000786:	f003 0310 	and.w	r3, r3, #16
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800078e:	f107 0210 	add.w	r2, r7, #16
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	4611      	mov	r1, r2
 8000798:	4618      	mov	r0, r3
 800079a:	f001 fbe5 	bl	8001f68 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800079e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007a0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80007a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d106      	bne.n	80007b6 <HAL_InitTick+0x6a>
 80007a8:	e001      	b.n	80007ae <HAL_InitTick+0x62>
    return HAL_ERROR;
 80007aa:	2301      	movs	r3, #1
 80007ac:	e02b      	b.n	8000806 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007ae:	f001 fbc5 	bl	8001f3c <HAL_RCC_GetPCLK1Freq>
 80007b2:	63f8      	str	r0, [r7, #60]	; 0x3c
 80007b4:	e004      	b.n	80007c0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80007b6:	f001 fbc1 	bl	8001f3c <HAL_RCC_GetPCLK1Freq>
 80007ba:	4603      	mov	r3, r0
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007c2:	4a15      	ldr	r2, [pc, #84]	; (8000818 <HAL_InitTick+0xcc>)
 80007c4:	fba2 2303 	umull	r2, r3, r2, r3
 80007c8:	0c9b      	lsrs	r3, r3, #18
 80007ca:	3b01      	subs	r3, #1
 80007cc:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80007ce:	4b13      	ldr	r3, [pc, #76]	; (800081c <HAL_InitTick+0xd0>)
 80007d0:	4a13      	ldr	r2, [pc, #76]	; (8000820 <HAL_InitTick+0xd4>)
 80007d2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80007d4:	4b11      	ldr	r3, [pc, #68]	; (800081c <HAL_InitTick+0xd0>)
 80007d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007da:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80007dc:	4a0f      	ldr	r2, [pc, #60]	; (800081c <HAL_InitTick+0xd0>)
 80007de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007e0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <HAL_InitTick+0xd0>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <HAL_InitTick+0xd0>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80007ee:	480b      	ldr	r0, [pc, #44]	; (800081c <HAL_InitTick+0xd0>)
 80007f0:	f001 fbfc 	bl	8001fec <HAL_TIM_Base_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d104      	bne.n	8000804 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80007fa:	4808      	ldr	r0, [pc, #32]	; (800081c <HAL_InitTick+0xd0>)
 80007fc:	f001 fc58 	bl	80020b0 <HAL_TIM_Base_Start_IT>
 8000800:	4603      	mov	r3, r0
 8000802:	e000      	b.n	8000806 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000804:	2301      	movs	r3, #1
}
 8000806:	4618      	mov	r0, r3
 8000808:	3740      	adds	r7, #64	; 0x40
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	24000008 	.word	0x24000008
 8000814:	58024400 	.word	0x58024400
 8000818:	431bde83 	.word	0x431bde83
 800081c:	24000038 	.word	0x24000038
 8000820:	40001000 	.word	0x40001000

08000824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <NMI_Handler+0x4>

0800082a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082e:	e7fe      	b.n	800082e <HardFault_Handler+0x4>

08000830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <MemManage_Handler+0x4>

08000836 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800083a:	e7fe      	b.n	800083a <BusFault_Handler+0x4>

0800083c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <UsageFault_Handler+0x4>

08000842 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000854:	4802      	ldr	r0, [pc, #8]	; (8000860 <TIM6_DAC_IRQHandler+0x10>)
 8000856:	f001 fca3 	bl	80021a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	24000038 	.word	0x24000038

08000864 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000864:	f8df d034 	ldr.w	sp, [pc, #52]	; 800089c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000868:	f7ff fd3a 	bl	80002e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800086c:	480c      	ldr	r0, [pc, #48]	; (80008a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800086e:	490d      	ldr	r1, [pc, #52]	; (80008a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000870:	4a0d      	ldr	r2, [pc, #52]	; (80008a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000872:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000874:	e002      	b.n	800087c <LoopCopyDataInit>

08000876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800087a:	3304      	adds	r3, #4

0800087c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800087c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800087e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000880:	d3f9      	bcc.n	8000876 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000882:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000884:	4c0a      	ldr	r4, [pc, #40]	; (80008b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000888:	e001      	b.n	800088e <LoopFillZerobss>

0800088a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800088a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800088c:	3204      	adds	r2, #4

0800088e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800088e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000890:	d3fb      	bcc.n	800088a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000892:	f004 fc01 	bl	8005098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000896:	f7ff fdb9 	bl	800040c <main>
  bx  lr
 800089a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800089c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80008a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80008a4:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 80008a8:	080051b4 	.word	0x080051b4
  ldr r2, =_sbss
 80008ac:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 80008b0:	240049d8 	.word	0x240049d8

080008b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008b4:	e7fe      	b.n	80008b4 <ADC3_IRQHandler>
	...

080008b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008be:	2003      	movs	r0, #3
 80008c0:	f000 f90f 	bl	8000ae2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80008c4:	f001 f990 	bl	8001be8 <HAL_RCC_GetSysClockFreq>
 80008c8:	4602      	mov	r2, r0
 80008ca:	4b15      	ldr	r3, [pc, #84]	; (8000920 <HAL_Init+0x68>)
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	0a1b      	lsrs	r3, r3, #8
 80008d0:	f003 030f 	and.w	r3, r3, #15
 80008d4:	4913      	ldr	r1, [pc, #76]	; (8000924 <HAL_Init+0x6c>)
 80008d6:	5ccb      	ldrb	r3, [r1, r3]
 80008d8:	f003 031f 	and.w	r3, r3, #31
 80008dc:	fa22 f303 	lsr.w	r3, r2, r3
 80008e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80008e2:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <HAL_Init+0x68>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	f003 030f 	and.w	r3, r3, #15
 80008ea:	4a0e      	ldr	r2, [pc, #56]	; (8000924 <HAL_Init+0x6c>)
 80008ec:	5cd3      	ldrb	r3, [r2, r3]
 80008ee:	f003 031f 	and.w	r3, r3, #31
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	fa22 f303 	lsr.w	r3, r2, r3
 80008f8:	4a0b      	ldr	r2, [pc, #44]	; (8000928 <HAL_Init+0x70>)
 80008fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80008fc:	4a0b      	ldr	r2, [pc, #44]	; (800092c <HAL_Init+0x74>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000902:	200f      	movs	r0, #15
 8000904:	f7ff ff22 	bl	800074c <HAL_InitTick>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800090e:	2301      	movs	r3, #1
 8000910:	e002      	b.n	8000918 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000912:	f7ff fefd 	bl	8000710 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000916:	2300      	movs	r3, #0
}
 8000918:	4618      	mov	r0, r3
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	58024400 	.word	0x58024400
 8000924:	08005154 	.word	0x08005154
 8000928:	24000004 	.word	0x24000004
 800092c:	24000000 	.word	0x24000000

08000930 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <HAL_IncTick+0x20>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_IncTick+0x24>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4413      	add	r3, r2
 8000940:	4a04      	ldr	r2, [pc, #16]	; (8000954 <HAL_IncTick+0x24>)
 8000942:	6013      	str	r3, [r2, #0]
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	2400000c 	.word	0x2400000c
 8000954:	24000084 	.word	0x24000084

08000958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return uwTick;
 800095c:	4b03      	ldr	r3, [pc, #12]	; (800096c <HAL_GetTick+0x14>)
 800095e:	681b      	ldr	r3, [r3, #0]
}
 8000960:	4618      	mov	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	24000084 	.word	0x24000084

08000970 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000974:	4b03      	ldr	r3, [pc, #12]	; (8000984 <HAL_GetREVID+0x14>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	0c1b      	lsrs	r3, r3, #16
}
 800097a:	4618      	mov	r0, r3
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	5c001000 	.word	0x5c001000

08000988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f003 0307 	and.w	r3, r3, #7
 8000996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000998:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <__NVIC_SetPriorityGrouping+0x40>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800099e:	68ba      	ldr	r2, [r7, #8]
 80009a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009a4:	4013      	ands	r3, r2
 80009a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <__NVIC_SetPriorityGrouping+0x44>)
 80009b2:	4313      	orrs	r3, r2
 80009b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009b6:	4a04      	ldr	r2, [pc, #16]	; (80009c8 <__NVIC_SetPriorityGrouping+0x40>)
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	60d3      	str	r3, [r2, #12]
}
 80009bc:	bf00      	nop
 80009be:	3714      	adds	r7, #20
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	e000ed00 	.word	0xe000ed00
 80009cc:	05fa0000 	.word	0x05fa0000

080009d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d4:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <__NVIC_GetPriorityGrouping+0x18>)
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	0a1b      	lsrs	r3, r3, #8
 80009da:	f003 0307 	and.w	r3, r3, #7
}
 80009de:	4618      	mov	r0, r3
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80009f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	db0b      	blt.n	8000a16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009fe:	88fb      	ldrh	r3, [r7, #6]
 8000a00:	f003 021f 	and.w	r2, r3, #31
 8000a04:	4907      	ldr	r1, [pc, #28]	; (8000a24 <__NVIC_EnableIRQ+0x38>)
 8000a06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a0a:	095b      	lsrs	r3, r3, #5
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000e100 	.word	0xe000e100

08000a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	6039      	str	r1, [r7, #0]
 8000a32:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	db0a      	blt.n	8000a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	490c      	ldr	r1, [pc, #48]	; (8000a74 <__NVIC_SetPriority+0x4c>)
 8000a42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a46:	0112      	lsls	r2, r2, #4
 8000a48:	b2d2      	uxtb	r2, r2
 8000a4a:	440b      	add	r3, r1
 8000a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a50:	e00a      	b.n	8000a68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	4908      	ldr	r1, [pc, #32]	; (8000a78 <__NVIC_SetPriority+0x50>)
 8000a58:	88fb      	ldrh	r3, [r7, #6]
 8000a5a:	f003 030f 	and.w	r3, r3, #15
 8000a5e:	3b04      	subs	r3, #4
 8000a60:	0112      	lsls	r2, r2, #4
 8000a62:	b2d2      	uxtb	r2, r2
 8000a64:	440b      	add	r3, r1
 8000a66:	761a      	strb	r2, [r3, #24]
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	e000e100 	.word	0xe000e100
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b089      	sub	sp, #36	; 0x24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	f1c3 0307 	rsb	r3, r3, #7
 8000a96:	2b04      	cmp	r3, #4
 8000a98:	bf28      	it	cs
 8000a9a:	2304      	movcs	r3, #4
 8000a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	2b06      	cmp	r3, #6
 8000aa4:	d902      	bls.n	8000aac <NVIC_EncodePriority+0x30>
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	3b03      	subs	r3, #3
 8000aaa:	e000      	b.n	8000aae <NVIC_EncodePriority+0x32>
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	43da      	mvns	r2, r3
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	401a      	ands	r2, r3
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ace:	43d9      	mvns	r1, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad4:	4313      	orrs	r3, r2
         );
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3724      	adds	r7, #36	; 0x24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b082      	sub	sp, #8
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f7ff ff4c 	bl	8000988 <__NVIC_SetPriorityGrouping>
}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
 8000b04:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b06:	f7ff ff63 	bl	80009d0 <__NVIC_GetPriorityGrouping>
 8000b0a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	68b9      	ldr	r1, [r7, #8]
 8000b10:	6978      	ldr	r0, [r7, #20]
 8000b12:	f7ff ffb3 	bl	8000a7c <NVIC_EncodePriority>
 8000b16:	4602      	mov	r2, r0
 8000b18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b1c:	4611      	mov	r1, r2
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff ff82 	bl	8000a28 <__NVIC_SetPriority>
}
 8000b24:	bf00      	nop
 8000b26:	3718      	adds	r7, #24
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff ff56 	bl	80009ec <__NVIC_EnableIRQ>
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b089      	sub	sp, #36	; 0x24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000b56:	4b89      	ldr	r3, [pc, #548]	; (8000d7c <HAL_GPIO_Init+0x234>)
 8000b58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000b5a:	e194      	b.n	8000e86 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	2101      	movs	r1, #1
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	fa01 f303 	lsl.w	r3, r1, r3
 8000b68:	4013      	ands	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f000 8186 	beq.w	8000e80 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f003 0303 	and.w	r3, r3, #3
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d005      	beq.n	8000b8c <HAL_GPIO_Init+0x44>
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f003 0303 	and.w	r3, r3, #3
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	d130      	bne.n	8000bee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	2203      	movs	r2, #3
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	43db      	mvns	r3, r3
 8000b9e:	69ba      	ldr	r2, [r7, #24]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	68da      	ldr	r2, [r3, #12]
 8000ba8:	69fb      	ldr	r3, [r7, #28]
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	69ba      	ldr	r2, [r7, #24]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	69ba      	ldr	r2, [r7, #24]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	091b      	lsrs	r3, r3, #4
 8000bd8:	f003 0201 	and.w	r2, r3, #1
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	69ba      	ldr	r2, [r7, #24]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	69ba      	ldr	r2, [r7, #24]
 8000bec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f003 0303 	and.w	r3, r3, #3
 8000bf6:	2b03      	cmp	r3, #3
 8000bf8:	d017      	beq.n	8000c2a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	2203      	movs	r2, #3
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43db      	mvns	r3, r3
 8000c0c:	69ba      	ldr	r2, [r7, #24]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	689a      	ldr	r2, [r3, #8]
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	69ba      	ldr	r2, [r7, #24]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	69ba      	ldr	r2, [r7, #24]
 8000c28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f003 0303 	and.w	r3, r3, #3
 8000c32:	2b02      	cmp	r3, #2
 8000c34:	d123      	bne.n	8000c7e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	08da      	lsrs	r2, r3, #3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	3208      	adds	r2, #8
 8000c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	220f      	movs	r2, #15
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	43db      	mvns	r3, r3
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	4013      	ands	r3, r2
 8000c58:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	691a      	ldr	r2, [r3, #16]
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	f003 0307 	and.w	r3, r3, #7
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	69ba      	ldr	r2, [r7, #24]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	08da      	lsrs	r2, r3, #3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3208      	adds	r2, #8
 8000c78:	69b9      	ldr	r1, [r7, #24]
 8000c7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	2203      	movs	r2, #3
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	4013      	ands	r3, r2
 8000c94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f003 0203 	and.w	r2, r3, #3
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	69ba      	ldr	r2, [r7, #24]
 8000cb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f000 80e0 	beq.w	8000e80 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc0:	4b2f      	ldr	r3, [pc, #188]	; (8000d80 <HAL_GPIO_Init+0x238>)
 8000cc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cc6:	4a2e      	ldr	r2, [pc, #184]	; (8000d80 <HAL_GPIO_Init+0x238>)
 8000cc8:	f043 0302 	orr.w	r3, r3, #2
 8000ccc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000cd0:	4b2b      	ldr	r3, [pc, #172]	; (8000d80 <HAL_GPIO_Init+0x238>)
 8000cd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cd6:	f003 0302 	and.w	r3, r3, #2
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cde:	4a29      	ldr	r2, [pc, #164]	; (8000d84 <HAL_GPIO_Init+0x23c>)
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	089b      	lsrs	r3, r3, #2
 8000ce4:	3302      	adds	r3, #2
 8000ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	f003 0303 	and.w	r3, r3, #3
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	220f      	movs	r2, #15
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a20      	ldr	r2, [pc, #128]	; (8000d88 <HAL_GPIO_Init+0x240>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d052      	beq.n	8000db0 <HAL_GPIO_Init+0x268>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a1f      	ldr	r2, [pc, #124]	; (8000d8c <HAL_GPIO_Init+0x244>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d031      	beq.n	8000d76 <HAL_GPIO_Init+0x22e>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a1e      	ldr	r2, [pc, #120]	; (8000d90 <HAL_GPIO_Init+0x248>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d02b      	beq.n	8000d72 <HAL_GPIO_Init+0x22a>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a1d      	ldr	r2, [pc, #116]	; (8000d94 <HAL_GPIO_Init+0x24c>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d025      	beq.n	8000d6e <HAL_GPIO_Init+0x226>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a1c      	ldr	r2, [pc, #112]	; (8000d98 <HAL_GPIO_Init+0x250>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d01f      	beq.n	8000d6a <HAL_GPIO_Init+0x222>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a1b      	ldr	r2, [pc, #108]	; (8000d9c <HAL_GPIO_Init+0x254>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d019      	beq.n	8000d66 <HAL_GPIO_Init+0x21e>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a1a      	ldr	r2, [pc, #104]	; (8000da0 <HAL_GPIO_Init+0x258>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d013      	beq.n	8000d62 <HAL_GPIO_Init+0x21a>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a19      	ldr	r2, [pc, #100]	; (8000da4 <HAL_GPIO_Init+0x25c>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d00d      	beq.n	8000d5e <HAL_GPIO_Init+0x216>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a18      	ldr	r2, [pc, #96]	; (8000da8 <HAL_GPIO_Init+0x260>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d007      	beq.n	8000d5a <HAL_GPIO_Init+0x212>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a17      	ldr	r2, [pc, #92]	; (8000dac <HAL_GPIO_Init+0x264>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d101      	bne.n	8000d56 <HAL_GPIO_Init+0x20e>
 8000d52:	2309      	movs	r3, #9
 8000d54:	e02d      	b.n	8000db2 <HAL_GPIO_Init+0x26a>
 8000d56:	230a      	movs	r3, #10
 8000d58:	e02b      	b.n	8000db2 <HAL_GPIO_Init+0x26a>
 8000d5a:	2308      	movs	r3, #8
 8000d5c:	e029      	b.n	8000db2 <HAL_GPIO_Init+0x26a>
 8000d5e:	2307      	movs	r3, #7
 8000d60:	e027      	b.n	8000db2 <HAL_GPIO_Init+0x26a>
 8000d62:	2306      	movs	r3, #6
 8000d64:	e025      	b.n	8000db2 <HAL_GPIO_Init+0x26a>
 8000d66:	2305      	movs	r3, #5
 8000d68:	e023      	b.n	8000db2 <HAL_GPIO_Init+0x26a>
 8000d6a:	2304      	movs	r3, #4
 8000d6c:	e021      	b.n	8000db2 <HAL_GPIO_Init+0x26a>
 8000d6e:	2303      	movs	r3, #3
 8000d70:	e01f      	b.n	8000db2 <HAL_GPIO_Init+0x26a>
 8000d72:	2302      	movs	r3, #2
 8000d74:	e01d      	b.n	8000db2 <HAL_GPIO_Init+0x26a>
 8000d76:	2301      	movs	r3, #1
 8000d78:	e01b      	b.n	8000db2 <HAL_GPIO_Init+0x26a>
 8000d7a:	bf00      	nop
 8000d7c:	58000080 	.word	0x58000080
 8000d80:	58024400 	.word	0x58024400
 8000d84:	58000400 	.word	0x58000400
 8000d88:	58020000 	.word	0x58020000
 8000d8c:	58020400 	.word	0x58020400
 8000d90:	58020800 	.word	0x58020800
 8000d94:	58020c00 	.word	0x58020c00
 8000d98:	58021000 	.word	0x58021000
 8000d9c:	58021400 	.word	0x58021400
 8000da0:	58021800 	.word	0x58021800
 8000da4:	58021c00 	.word	0x58021c00
 8000da8:	58022000 	.word	0x58022000
 8000dac:	58022400 	.word	0x58022400
 8000db0:	2300      	movs	r3, #0
 8000db2:	69fa      	ldr	r2, [r7, #28]
 8000db4:	f002 0203 	and.w	r2, r2, #3
 8000db8:	0092      	lsls	r2, r2, #2
 8000dba:	4093      	lsls	r3, r2
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dc2:	4938      	ldr	r1, [pc, #224]	; (8000ea4 <HAL_GPIO_Init+0x35c>)
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	089b      	lsrs	r3, r3, #2
 8000dc8:	3302      	adds	r3, #2
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4013      	ands	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d003      	beq.n	8000df6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000df6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d003      	beq.n	8000e24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000e24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d003      	beq.n	8000e50 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4013      	ands	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	3301      	adds	r3, #1
 8000e84:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	f47f ae63 	bne.w	8000b5c <HAL_GPIO_Init+0x14>
  }
}
 8000e96:	bf00      	nop
 8000e98:	bf00      	nop
 8000e9a:	3724      	adds	r7, #36	; 0x24
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	58000400 	.word	0x58000400

08000ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	807b      	strh	r3, [r7, #2]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000eb8:	787b      	ldrb	r3, [r7, #1]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d003      	beq.n	8000ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ebe:	887a      	ldrh	r2, [r7, #2]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000ec4:	e003      	b.n	8000ece <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000ec6:	887b      	ldrh	r3, [r7, #2]
 8000ec8:	041a      	lsls	r2, r3, #16
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	619a      	str	r2, [r3, #24]
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000eda:	b480      	push	{r7}
 8000edc:	b085      	sub	sp, #20
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000eec:	887a      	ldrh	r2, [r7, #2]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	041a      	lsls	r2, r3, #16
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	43d9      	mvns	r1, r3
 8000ef8:	887b      	ldrh	r3, [r7, #2]
 8000efa:	400b      	ands	r3, r1
 8000efc:	431a      	orrs	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	619a      	str	r2, [r3, #24]
}
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
	...

08000f10 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8000f18:	4a08      	ldr	r2, [pc, #32]	; (8000f3c <HAL_HSEM_FastTake+0x2c>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	3320      	adds	r3, #32
 8000f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f22:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <HAL_HSEM_FastTake+0x30>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d101      	bne.n	8000f2c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	e000      	b.n	8000f2e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8000f2c:	2301      	movs	r3, #1
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	58026400 	.word	0x58026400
 8000f40:	80000300 	.word	0x80000300

08000f44 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8000f4e:	4906      	ldr	r1, [pc, #24]	; (8000f68 <HAL_HSEM_Release+0x24>)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	58026400 	.word	0x58026400

08000f6c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8000f74:	4b29      	ldr	r3, [pc, #164]	; (800101c <HAL_PWREx_ConfigSupply+0xb0>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	f003 0307 	and.w	r3, r3, #7
 8000f7c:	2b06      	cmp	r3, #6
 8000f7e:	d00a      	beq.n	8000f96 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000f80:	4b26      	ldr	r3, [pc, #152]	; (800101c <HAL_PWREx_ConfigSupply+0xb0>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d001      	beq.n	8000f92 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e040      	b.n	8001014 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000f92:	2300      	movs	r3, #0
 8000f94:	e03e      	b.n	8001014 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000f96:	4b21      	ldr	r3, [pc, #132]	; (800101c <HAL_PWREx_ConfigSupply+0xb0>)
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000f9e:	491f      	ldr	r1, [pc, #124]	; (800101c <HAL_PWREx_ConfigSupply+0xb0>)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000fa6:	f7ff fcd7 	bl	8000958 <HAL_GetTick>
 8000faa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000fac:	e009      	b.n	8000fc2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000fae:	f7ff fcd3 	bl	8000958 <HAL_GetTick>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fbc:	d901      	bls.n	8000fc2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e028      	b.n	8001014 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000fc2:	4b16      	ldr	r3, [pc, #88]	; (800101c <HAL_PWREx_ConfigSupply+0xb0>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fce:	d1ee      	bne.n	8000fae <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b1e      	cmp	r3, #30
 8000fd4:	d008      	beq.n	8000fe8 <HAL_PWREx_ConfigSupply+0x7c>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b2e      	cmp	r3, #46	; 0x2e
 8000fda:	d005      	beq.n	8000fe8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b1d      	cmp	r3, #29
 8000fe0:	d002      	beq.n	8000fe8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2b2d      	cmp	r3, #45	; 0x2d
 8000fe6:	d114      	bne.n	8001012 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8000fe8:	f7ff fcb6 	bl	8000958 <HAL_GetTick>
 8000fec:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8000fee:	e009      	b.n	8001004 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000ff0:	f7ff fcb2 	bl	8000958 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ffe:	d901      	bls.n	8001004 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	e007      	b.n	8001014 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <HAL_PWREx_ConfigSupply+0xb0>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800100c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001010:	d1ee      	bne.n	8000ff0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001012:	2300      	movs	r3, #0
}
 8001014:	4618      	mov	r0, r3
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	58024800 	.word	0x58024800

08001020 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08c      	sub	sp, #48	; 0x30
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d102      	bne.n	8001034 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	f000 bc1d 	b.w	800186e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	2b00      	cmp	r3, #0
 800103e:	f000 8087 	beq.w	8001150 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001042:	4b99      	ldr	r3, [pc, #612]	; (80012a8 <HAL_RCC_OscConfig+0x288>)
 8001044:	691b      	ldr	r3, [r3, #16]
 8001046:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800104a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800104c:	4b96      	ldr	r3, [pc, #600]	; (80012a8 <HAL_RCC_OscConfig+0x288>)
 800104e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001054:	2b10      	cmp	r3, #16
 8001056:	d007      	beq.n	8001068 <HAL_RCC_OscConfig+0x48>
 8001058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800105a:	2b18      	cmp	r3, #24
 800105c:	d110      	bne.n	8001080 <HAL_RCC_OscConfig+0x60>
 800105e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d10b      	bne.n	8001080 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001068:	4b8f      	ldr	r3, [pc, #572]	; (80012a8 <HAL_RCC_OscConfig+0x288>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d06c      	beq.n	800114e <HAL_RCC_OscConfig+0x12e>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d168      	bne.n	800114e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e3f6      	b.n	800186e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001088:	d106      	bne.n	8001098 <HAL_RCC_OscConfig+0x78>
 800108a:	4b87      	ldr	r3, [pc, #540]	; (80012a8 <HAL_RCC_OscConfig+0x288>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a86      	ldr	r2, [pc, #536]	; (80012a8 <HAL_RCC_OscConfig+0x288>)
 8001090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001094:	6013      	str	r3, [r2, #0]
 8001096:	e02e      	b.n	80010f6 <HAL_RCC_OscConfig+0xd6>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d10c      	bne.n	80010ba <HAL_RCC_OscConfig+0x9a>
 80010a0:	4b81      	ldr	r3, [pc, #516]	; (80012a8 <HAL_RCC_OscConfig+0x288>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a80      	ldr	r2, [pc, #512]	; (80012a8 <HAL_RCC_OscConfig+0x288>)
 80010a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010aa:	6013      	str	r3, [r2, #0]
 80010ac:	4b7e      	ldr	r3, [pc, #504]	; (80012a8 <HAL_RCC_OscConfig+0x288>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a7d      	ldr	r2, [pc, #500]	; (80012a8 <HAL_RCC_OscConfig+0x288>)
 80010b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	e01d      	b.n	80010f6 <HAL_RCC_OscConfig+0xd6>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010c2:	d10c      	bne.n	80010de <HAL_RCC_OscConfig+0xbe>
 80010c4:	4b78      	ldr	r3, [pc, #480]	; (80012a8 <HAL_RCC_OscConfig+0x288>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a77      	ldr	r2, [pc, #476]	; (80012a8 <HAL_RCC_OscConfig+0x288>)
 80010ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	4b75      	ldr	r3, [pc, #468]	; (80012a8 <HAL_RCC_OscConfig+0x288>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a74      	ldr	r2, [pc, #464]	; (80012a8 <HAL_RCC_OscConfig+0x288>)
 80010d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	e00b      	b.n	80010f6 <HAL_RCC_OscConfig+0xd6>
 80010de:	4b72      	ldr	r3, [pc, #456]	; (80012a8 <HAL_RCC_OscConfig+0x288>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a71      	ldr	r2, [pc, #452]	; (80012a8 <HAL_RCC_OscConfig+0x288>)
 80010e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	4b6f      	ldr	r3, [pc, #444]	; (80012a8 <HAL_RCC_OscConfig+0x288>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a6e      	ldr	r2, [pc, #440]	; (80012a8 <HAL_RCC_OscConfig+0x288>)
 80010f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d013      	beq.n	8001126 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010fe:	f7ff fc2b 	bl	8000958 <HAL_GetTick>
 8001102:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001104:	e008      	b.n	8001118 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001106:	f7ff fc27 	bl	8000958 <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	2b64      	cmp	r3, #100	; 0x64
 8001112:	d901      	bls.n	8001118 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e3aa      	b.n	800186e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001118:	4b63      	ldr	r3, [pc, #396]	; (80012a8 <HAL_RCC_OscConfig+0x288>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d0f0      	beq.n	8001106 <HAL_RCC_OscConfig+0xe6>
 8001124:	e014      	b.n	8001150 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001126:	f7ff fc17 	bl	8000958 <HAL_GetTick>
 800112a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800112c:	e008      	b.n	8001140 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800112e:	f7ff fc13 	bl	8000958 <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b64      	cmp	r3, #100	; 0x64
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e396      	b.n	800186e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001140:	4b59      	ldr	r3, [pc, #356]	; (80012a8 <HAL_RCC_OscConfig+0x288>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1f0      	bne.n	800112e <HAL_RCC_OscConfig+0x10e>
 800114c:	e000      	b.n	8001150 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800114e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	2b00      	cmp	r3, #0
 800115a:	f000 80cb 	beq.w	80012f4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800115e:	4b52      	ldr	r3, [pc, #328]	; (80012a8 <HAL_RCC_OscConfig+0x288>)
 8001160:	691b      	ldr	r3, [r3, #16]
 8001162:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001166:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001168:	4b4f      	ldr	r3, [pc, #316]	; (80012a8 <HAL_RCC_OscConfig+0x288>)
 800116a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800116e:	6a3b      	ldr	r3, [r7, #32]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d007      	beq.n	8001184 <HAL_RCC_OscConfig+0x164>
 8001174:	6a3b      	ldr	r3, [r7, #32]
 8001176:	2b18      	cmp	r3, #24
 8001178:	d156      	bne.n	8001228 <HAL_RCC_OscConfig+0x208>
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	2b00      	cmp	r3, #0
 8001182:	d151      	bne.n	8001228 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001184:	4b48      	ldr	r3, [pc, #288]	; (80012a8 <HAL_RCC_OscConfig+0x288>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	2b00      	cmp	r3, #0
 800118e:	d005      	beq.n	800119c <HAL_RCC_OscConfig+0x17c>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d101      	bne.n	800119c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e368      	b.n	800186e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800119c:	4b42      	ldr	r3, [pc, #264]	; (80012a8 <HAL_RCC_OscConfig+0x288>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f023 0219 	bic.w	r2, r3, #25
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	493f      	ldr	r1, [pc, #252]	; (80012a8 <HAL_RCC_OscConfig+0x288>)
 80011aa:	4313      	orrs	r3, r2
 80011ac:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80011ae:	f7ff fbd3 	bl	8000958 <HAL_GetTick>
 80011b2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011b4:	e008      	b.n	80011c8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011b6:	f7ff fbcf 	bl	8000958 <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e352      	b.n	800186e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011c8:	4b37      	ldr	r3, [pc, #220]	; (80012a8 <HAL_RCC_OscConfig+0x288>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0f0      	beq.n	80011b6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d4:	f7ff fbcc 	bl	8000970 <HAL_GetREVID>
 80011d8:	4603      	mov	r3, r0
 80011da:	f241 0203 	movw	r2, #4099	; 0x1003
 80011de:	4293      	cmp	r3, r2
 80011e0:	d817      	bhi.n	8001212 <HAL_RCC_OscConfig+0x1f2>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	2b40      	cmp	r3, #64	; 0x40
 80011e8:	d108      	bne.n	80011fc <HAL_RCC_OscConfig+0x1dc>
 80011ea:	4b2f      	ldr	r3, [pc, #188]	; (80012a8 <HAL_RCC_OscConfig+0x288>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80011f2:	4a2d      	ldr	r2, [pc, #180]	; (80012a8 <HAL_RCC_OscConfig+0x288>)
 80011f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011fa:	e07b      	b.n	80012f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011fc:	4b2a      	ldr	r3, [pc, #168]	; (80012a8 <HAL_RCC_OscConfig+0x288>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	691b      	ldr	r3, [r3, #16]
 8001208:	031b      	lsls	r3, r3, #12
 800120a:	4927      	ldr	r1, [pc, #156]	; (80012a8 <HAL_RCC_OscConfig+0x288>)
 800120c:	4313      	orrs	r3, r2
 800120e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001210:	e070      	b.n	80012f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001212:	4b25      	ldr	r3, [pc, #148]	; (80012a8 <HAL_RCC_OscConfig+0x288>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	061b      	lsls	r3, r3, #24
 8001220:	4921      	ldr	r1, [pc, #132]	; (80012a8 <HAL_RCC_OscConfig+0x288>)
 8001222:	4313      	orrs	r3, r2
 8001224:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001226:	e065      	b.n	80012f4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d048      	beq.n	80012c2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001230:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <HAL_RCC_OscConfig+0x288>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f023 0219 	bic.w	r2, r3, #25
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	491a      	ldr	r1, [pc, #104]	; (80012a8 <HAL_RCC_OscConfig+0x288>)
 800123e:	4313      	orrs	r3, r2
 8001240:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001242:	f7ff fb89 	bl	8000958 <HAL_GetTick>
 8001246:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001248:	e008      	b.n	800125c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800124a:	f7ff fb85 	bl	8000958 <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e308      	b.n	800186e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <HAL_RCC_OscConfig+0x288>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0304 	and.w	r3, r3, #4
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0f0      	beq.n	800124a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001268:	f7ff fb82 	bl	8000970 <HAL_GetREVID>
 800126c:	4603      	mov	r3, r0
 800126e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001272:	4293      	cmp	r3, r2
 8001274:	d81a      	bhi.n	80012ac <HAL_RCC_OscConfig+0x28c>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	691b      	ldr	r3, [r3, #16]
 800127a:	2b40      	cmp	r3, #64	; 0x40
 800127c:	d108      	bne.n	8001290 <HAL_RCC_OscConfig+0x270>
 800127e:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <HAL_RCC_OscConfig+0x288>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001286:	4a08      	ldr	r2, [pc, #32]	; (80012a8 <HAL_RCC_OscConfig+0x288>)
 8001288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800128c:	6053      	str	r3, [r2, #4]
 800128e:	e031      	b.n	80012f4 <HAL_RCC_OscConfig+0x2d4>
 8001290:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <HAL_RCC_OscConfig+0x288>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	691b      	ldr	r3, [r3, #16]
 800129c:	031b      	lsls	r3, r3, #12
 800129e:	4902      	ldr	r1, [pc, #8]	; (80012a8 <HAL_RCC_OscConfig+0x288>)
 80012a0:	4313      	orrs	r3, r2
 80012a2:	604b      	str	r3, [r1, #4]
 80012a4:	e026      	b.n	80012f4 <HAL_RCC_OscConfig+0x2d4>
 80012a6:	bf00      	nop
 80012a8:	58024400 	.word	0x58024400
 80012ac:	4b9a      	ldr	r3, [pc, #616]	; (8001518 <HAL_RCC_OscConfig+0x4f8>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	061b      	lsls	r3, r3, #24
 80012ba:	4997      	ldr	r1, [pc, #604]	; (8001518 <HAL_RCC_OscConfig+0x4f8>)
 80012bc:	4313      	orrs	r3, r2
 80012be:	604b      	str	r3, [r1, #4]
 80012c0:	e018      	b.n	80012f4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012c2:	4b95      	ldr	r3, [pc, #596]	; (8001518 <HAL_RCC_OscConfig+0x4f8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a94      	ldr	r2, [pc, #592]	; (8001518 <HAL_RCC_OscConfig+0x4f8>)
 80012c8:	f023 0301 	bic.w	r3, r3, #1
 80012cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ce:	f7ff fb43 	bl	8000958 <HAL_GetTick>
 80012d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012d4:	e008      	b.n	80012e8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012d6:	f7ff fb3f 	bl	8000958 <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d901      	bls.n	80012e8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e2c2      	b.n	800186e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012e8:	4b8b      	ldr	r3, [pc, #556]	; (8001518 <HAL_RCC_OscConfig+0x4f8>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1f0      	bne.n	80012d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0310 	and.w	r3, r3, #16
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 80a9 	beq.w	8001454 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001302:	4b85      	ldr	r3, [pc, #532]	; (8001518 <HAL_RCC_OscConfig+0x4f8>)
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800130a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800130c:	4b82      	ldr	r3, [pc, #520]	; (8001518 <HAL_RCC_OscConfig+0x4f8>)
 800130e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001310:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	2b08      	cmp	r3, #8
 8001316:	d007      	beq.n	8001328 <HAL_RCC_OscConfig+0x308>
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	2b18      	cmp	r3, #24
 800131c:	d13a      	bne.n	8001394 <HAL_RCC_OscConfig+0x374>
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	f003 0303 	and.w	r3, r3, #3
 8001324:	2b01      	cmp	r3, #1
 8001326:	d135      	bne.n	8001394 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001328:	4b7b      	ldr	r3, [pc, #492]	; (8001518 <HAL_RCC_OscConfig+0x4f8>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001330:	2b00      	cmp	r3, #0
 8001332:	d005      	beq.n	8001340 <HAL_RCC_OscConfig+0x320>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	69db      	ldr	r3, [r3, #28]
 8001338:	2b80      	cmp	r3, #128	; 0x80
 800133a:	d001      	beq.n	8001340 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e296      	b.n	800186e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001340:	f7ff fb16 	bl	8000970 <HAL_GetREVID>
 8001344:	4603      	mov	r3, r0
 8001346:	f241 0203 	movw	r2, #4099	; 0x1003
 800134a:	4293      	cmp	r3, r2
 800134c:	d817      	bhi.n	800137e <HAL_RCC_OscConfig+0x35e>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a1b      	ldr	r3, [r3, #32]
 8001352:	2b20      	cmp	r3, #32
 8001354:	d108      	bne.n	8001368 <HAL_RCC_OscConfig+0x348>
 8001356:	4b70      	ldr	r3, [pc, #448]	; (8001518 <HAL_RCC_OscConfig+0x4f8>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800135e:	4a6e      	ldr	r2, [pc, #440]	; (8001518 <HAL_RCC_OscConfig+0x4f8>)
 8001360:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001364:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001366:	e075      	b.n	8001454 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001368:	4b6b      	ldr	r3, [pc, #428]	; (8001518 <HAL_RCC_OscConfig+0x4f8>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a1b      	ldr	r3, [r3, #32]
 8001374:	069b      	lsls	r3, r3, #26
 8001376:	4968      	ldr	r1, [pc, #416]	; (8001518 <HAL_RCC_OscConfig+0x4f8>)
 8001378:	4313      	orrs	r3, r2
 800137a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800137c:	e06a      	b.n	8001454 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800137e:	4b66      	ldr	r3, [pc, #408]	; (8001518 <HAL_RCC_OscConfig+0x4f8>)
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a1b      	ldr	r3, [r3, #32]
 800138a:	061b      	lsls	r3, r3, #24
 800138c:	4962      	ldr	r1, [pc, #392]	; (8001518 <HAL_RCC_OscConfig+0x4f8>)
 800138e:	4313      	orrs	r3, r2
 8001390:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001392:	e05f      	b.n	8001454 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	69db      	ldr	r3, [r3, #28]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d042      	beq.n	8001422 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800139c:	4b5e      	ldr	r3, [pc, #376]	; (8001518 <HAL_RCC_OscConfig+0x4f8>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a5d      	ldr	r2, [pc, #372]	; (8001518 <HAL_RCC_OscConfig+0x4f8>)
 80013a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a8:	f7ff fad6 	bl	8000958 <HAL_GetTick>
 80013ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80013b0:	f7ff fad2 	bl	8000958 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e255      	b.n	800186e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80013c2:	4b55      	ldr	r3, [pc, #340]	; (8001518 <HAL_RCC_OscConfig+0x4f8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0f0      	beq.n	80013b0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013ce:	f7ff facf 	bl	8000970 <HAL_GetREVID>
 80013d2:	4603      	mov	r3, r0
 80013d4:	f241 0203 	movw	r2, #4099	; 0x1003
 80013d8:	4293      	cmp	r3, r2
 80013da:	d817      	bhi.n	800140c <HAL_RCC_OscConfig+0x3ec>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	2b20      	cmp	r3, #32
 80013e2:	d108      	bne.n	80013f6 <HAL_RCC_OscConfig+0x3d6>
 80013e4:	4b4c      	ldr	r3, [pc, #304]	; (8001518 <HAL_RCC_OscConfig+0x4f8>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80013ec:	4a4a      	ldr	r2, [pc, #296]	; (8001518 <HAL_RCC_OscConfig+0x4f8>)
 80013ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80013f2:	6053      	str	r3, [r2, #4]
 80013f4:	e02e      	b.n	8001454 <HAL_RCC_OscConfig+0x434>
 80013f6:	4b48      	ldr	r3, [pc, #288]	; (8001518 <HAL_RCC_OscConfig+0x4f8>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	069b      	lsls	r3, r3, #26
 8001404:	4944      	ldr	r1, [pc, #272]	; (8001518 <HAL_RCC_OscConfig+0x4f8>)
 8001406:	4313      	orrs	r3, r2
 8001408:	604b      	str	r3, [r1, #4]
 800140a:	e023      	b.n	8001454 <HAL_RCC_OscConfig+0x434>
 800140c:	4b42      	ldr	r3, [pc, #264]	; (8001518 <HAL_RCC_OscConfig+0x4f8>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	061b      	lsls	r3, r3, #24
 800141a:	493f      	ldr	r1, [pc, #252]	; (8001518 <HAL_RCC_OscConfig+0x4f8>)
 800141c:	4313      	orrs	r3, r2
 800141e:	60cb      	str	r3, [r1, #12]
 8001420:	e018      	b.n	8001454 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001422:	4b3d      	ldr	r3, [pc, #244]	; (8001518 <HAL_RCC_OscConfig+0x4f8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a3c      	ldr	r2, [pc, #240]	; (8001518 <HAL_RCC_OscConfig+0x4f8>)
 8001428:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800142c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142e:	f7ff fa93 	bl	8000958 <HAL_GetTick>
 8001432:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001436:	f7ff fa8f 	bl	8000958 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e212      	b.n	800186e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001448:	4b33      	ldr	r3, [pc, #204]	; (8001518 <HAL_RCC_OscConfig+0x4f8>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1f0      	bne.n	8001436 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0308 	and.w	r3, r3, #8
 800145c:	2b00      	cmp	r3, #0
 800145e:	d036      	beq.n	80014ce <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d019      	beq.n	800149c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001468:	4b2b      	ldr	r3, [pc, #172]	; (8001518 <HAL_RCC_OscConfig+0x4f8>)
 800146a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800146c:	4a2a      	ldr	r2, [pc, #168]	; (8001518 <HAL_RCC_OscConfig+0x4f8>)
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001474:	f7ff fa70 	bl	8000958 <HAL_GetTick>
 8001478:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800147c:	f7ff fa6c 	bl	8000958 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e1ef      	b.n	800186e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800148e:	4b22      	ldr	r3, [pc, #136]	; (8001518 <HAL_RCC_OscConfig+0x4f8>)
 8001490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0f0      	beq.n	800147c <HAL_RCC_OscConfig+0x45c>
 800149a:	e018      	b.n	80014ce <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800149c:	4b1e      	ldr	r3, [pc, #120]	; (8001518 <HAL_RCC_OscConfig+0x4f8>)
 800149e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014a0:	4a1d      	ldr	r2, [pc, #116]	; (8001518 <HAL_RCC_OscConfig+0x4f8>)
 80014a2:	f023 0301 	bic.w	r3, r3, #1
 80014a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a8:	f7ff fa56 	bl	8000958 <HAL_GetTick>
 80014ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b0:	f7ff fa52 	bl	8000958 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e1d5      	b.n	800186e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <HAL_RCC_OscConfig+0x4f8>)
 80014c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1f0      	bne.n	80014b0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0320 	and.w	r3, r3, #32
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d039      	beq.n	800154e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d01c      	beq.n	800151c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80014e2:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <HAL_RCC_OscConfig+0x4f8>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a0c      	ldr	r2, [pc, #48]	; (8001518 <HAL_RCC_OscConfig+0x4f8>)
 80014e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80014ee:	f7ff fa33 	bl	8000958 <HAL_GetTick>
 80014f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80014f6:	f7ff fa2f 	bl	8000958 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e1b2      	b.n	800186e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001508:	4b03      	ldr	r3, [pc, #12]	; (8001518 <HAL_RCC_OscConfig+0x4f8>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0f0      	beq.n	80014f6 <HAL_RCC_OscConfig+0x4d6>
 8001514:	e01b      	b.n	800154e <HAL_RCC_OscConfig+0x52e>
 8001516:	bf00      	nop
 8001518:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800151c:	4b9b      	ldr	r3, [pc, #620]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a9a      	ldr	r2, [pc, #616]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 8001522:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001526:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001528:	f7ff fa16 	bl	8000958 <HAL_GetTick>
 800152c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001530:	f7ff fa12 	bl	8000958 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e195      	b.n	800186e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001542:	4b92      	ldr	r3, [pc, #584]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f0      	bne.n	8001530 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0304 	and.w	r3, r3, #4
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 8081 	beq.w	800165e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800155c:	4b8c      	ldr	r3, [pc, #560]	; (8001790 <HAL_RCC_OscConfig+0x770>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a8b      	ldr	r2, [pc, #556]	; (8001790 <HAL_RCC_OscConfig+0x770>)
 8001562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001566:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001568:	f7ff f9f6 	bl	8000958 <HAL_GetTick>
 800156c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001570:	f7ff f9f2 	bl	8000958 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b64      	cmp	r3, #100	; 0x64
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e175      	b.n	800186e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001582:	4b83      	ldr	r3, [pc, #524]	; (8001790 <HAL_RCC_OscConfig+0x770>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0f0      	beq.n	8001570 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d106      	bne.n	80015a4 <HAL_RCC_OscConfig+0x584>
 8001596:	4b7d      	ldr	r3, [pc, #500]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 8001598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159a:	4a7c      	ldr	r2, [pc, #496]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6713      	str	r3, [r2, #112]	; 0x70
 80015a2:	e02d      	b.n	8001600 <HAL_RCC_OscConfig+0x5e0>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d10c      	bne.n	80015c6 <HAL_RCC_OscConfig+0x5a6>
 80015ac:	4b77      	ldr	r3, [pc, #476]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 80015ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b0:	4a76      	ldr	r2, [pc, #472]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 80015b2:	f023 0301 	bic.w	r3, r3, #1
 80015b6:	6713      	str	r3, [r2, #112]	; 0x70
 80015b8:	4b74      	ldr	r3, [pc, #464]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 80015ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015bc:	4a73      	ldr	r2, [pc, #460]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 80015be:	f023 0304 	bic.w	r3, r3, #4
 80015c2:	6713      	str	r3, [r2, #112]	; 0x70
 80015c4:	e01c      	b.n	8001600 <HAL_RCC_OscConfig+0x5e0>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	2b05      	cmp	r3, #5
 80015cc:	d10c      	bne.n	80015e8 <HAL_RCC_OscConfig+0x5c8>
 80015ce:	4b6f      	ldr	r3, [pc, #444]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 80015d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d2:	4a6e      	ldr	r2, [pc, #440]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 80015d4:	f043 0304 	orr.w	r3, r3, #4
 80015d8:	6713      	str	r3, [r2, #112]	; 0x70
 80015da:	4b6c      	ldr	r3, [pc, #432]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 80015dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015de:	4a6b      	ldr	r2, [pc, #428]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6713      	str	r3, [r2, #112]	; 0x70
 80015e6:	e00b      	b.n	8001600 <HAL_RCC_OscConfig+0x5e0>
 80015e8:	4b68      	ldr	r3, [pc, #416]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 80015ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ec:	4a67      	ldr	r2, [pc, #412]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 80015ee:	f023 0301 	bic.w	r3, r3, #1
 80015f2:	6713      	str	r3, [r2, #112]	; 0x70
 80015f4:	4b65      	ldr	r3, [pc, #404]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 80015f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f8:	4a64      	ldr	r2, [pc, #400]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 80015fa:	f023 0304 	bic.w	r3, r3, #4
 80015fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d015      	beq.n	8001634 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001608:	f7ff f9a6 	bl	8000958 <HAL_GetTick>
 800160c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800160e:	e00a      	b.n	8001626 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001610:	f7ff f9a2 	bl	8000958 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	f241 3288 	movw	r2, #5000	; 0x1388
 800161e:	4293      	cmp	r3, r2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e123      	b.n	800186e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001626:	4b59      	ldr	r3, [pc, #356]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 8001628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0ee      	beq.n	8001610 <HAL_RCC_OscConfig+0x5f0>
 8001632:	e014      	b.n	800165e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001634:	f7ff f990 	bl	8000958 <HAL_GetTick>
 8001638:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800163a:	e00a      	b.n	8001652 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800163c:	f7ff f98c 	bl	8000958 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	f241 3288 	movw	r2, #5000	; 0x1388
 800164a:	4293      	cmp	r3, r2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e10d      	b.n	800186e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001652:	4b4e      	ldr	r3, [pc, #312]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 8001654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1ee      	bne.n	800163c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001662:	2b00      	cmp	r3, #0
 8001664:	f000 8102 	beq.w	800186c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001668:	4b48      	ldr	r3, [pc, #288]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001670:	2b18      	cmp	r3, #24
 8001672:	f000 80bd 	beq.w	80017f0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167a:	2b02      	cmp	r3, #2
 800167c:	f040 809e 	bne.w	80017bc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001680:	4b42      	ldr	r3, [pc, #264]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a41      	ldr	r2, [pc, #260]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 8001686:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800168a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168c:	f7ff f964 	bl	8000958 <HAL_GetTick>
 8001690:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001694:	f7ff f960 	bl	8000958 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e0e3      	b.n	800186e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016a6:	4b39      	ldr	r3, [pc, #228]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f0      	bne.n	8001694 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016b2:	4b36      	ldr	r3, [pc, #216]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 80016b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016b6:	4b37      	ldr	r3, [pc, #220]	; (8001794 <HAL_RCC_OscConfig+0x774>)
 80016b8:	4013      	ands	r3, r2
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80016c2:	0112      	lsls	r2, r2, #4
 80016c4:	430a      	orrs	r2, r1
 80016c6:	4931      	ldr	r1, [pc, #196]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	628b      	str	r3, [r1, #40]	; 0x28
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d0:	3b01      	subs	r3, #1
 80016d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016da:	3b01      	subs	r3, #1
 80016dc:	025b      	lsls	r3, r3, #9
 80016de:	b29b      	uxth	r3, r3
 80016e0:	431a      	orrs	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e6:	3b01      	subs	r3, #1
 80016e8:	041b      	lsls	r3, r3, #16
 80016ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80016ee:	431a      	orrs	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016f4:	3b01      	subs	r3, #1
 80016f6:	061b      	lsls	r3, r3, #24
 80016f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80016fc:	4923      	ldr	r1, [pc, #140]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001702:	4b22      	ldr	r3, [pc, #136]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 8001704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001706:	4a21      	ldr	r2, [pc, #132]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 8001708:	f023 0301 	bic.w	r3, r3, #1
 800170c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800170e:	4b1f      	ldr	r3, [pc, #124]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 8001710:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001712:	4b21      	ldr	r3, [pc, #132]	; (8001798 <HAL_RCC_OscConfig+0x778>)
 8001714:	4013      	ands	r3, r2
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800171a:	00d2      	lsls	r2, r2, #3
 800171c:	491b      	ldr	r1, [pc, #108]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 800171e:	4313      	orrs	r3, r2
 8001720:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001722:	4b1a      	ldr	r3, [pc, #104]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 8001724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001726:	f023 020c 	bic.w	r2, r3, #12
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	4917      	ldr	r1, [pc, #92]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 8001730:	4313      	orrs	r3, r2
 8001732:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001734:	4b15      	ldr	r3, [pc, #84]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 8001736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001738:	f023 0202 	bic.w	r2, r3, #2
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001740:	4912      	ldr	r1, [pc, #72]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 8001742:	4313      	orrs	r3, r2
 8001744:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001746:	4b11      	ldr	r3, [pc, #68]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 8001748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174a:	4a10      	ldr	r2, [pc, #64]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 800174c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001750:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 8001754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001756:	4a0d      	ldr	r2, [pc, #52]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 8001758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800175c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 8001760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001762:	4a0a      	ldr	r2, [pc, #40]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 8001764:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001768:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800176a:	4b08      	ldr	r3, [pc, #32]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 800176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176e:	4a07      	ldr	r2, [pc, #28]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001776:	4b05      	ldr	r3, [pc, #20]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a04      	ldr	r2, [pc, #16]	; (800178c <HAL_RCC_OscConfig+0x76c>)
 800177c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001780:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001782:	f7ff f8e9 	bl	8000958 <HAL_GetTick>
 8001786:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001788:	e011      	b.n	80017ae <HAL_RCC_OscConfig+0x78e>
 800178a:	bf00      	nop
 800178c:	58024400 	.word	0x58024400
 8001790:	58024800 	.word	0x58024800
 8001794:	fffffc0c 	.word	0xfffffc0c
 8001798:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800179c:	f7ff f8dc 	bl	8000958 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e05f      	b.n	800186e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017ae:	4b32      	ldr	r3, [pc, #200]	; (8001878 <HAL_RCC_OscConfig+0x858>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0f0      	beq.n	800179c <HAL_RCC_OscConfig+0x77c>
 80017ba:	e057      	b.n	800186c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017bc:	4b2e      	ldr	r3, [pc, #184]	; (8001878 <HAL_RCC_OscConfig+0x858>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a2d      	ldr	r2, [pc, #180]	; (8001878 <HAL_RCC_OscConfig+0x858>)
 80017c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c8:	f7ff f8c6 	bl	8000958 <HAL_GetTick>
 80017cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017d0:	f7ff f8c2 	bl	8000958 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e045      	b.n	800186e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017e2:	4b25      	ldr	r3, [pc, #148]	; (8001878 <HAL_RCC_OscConfig+0x858>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1f0      	bne.n	80017d0 <HAL_RCC_OscConfig+0x7b0>
 80017ee:	e03d      	b.n	800186c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80017f0:	4b21      	ldr	r3, [pc, #132]	; (8001878 <HAL_RCC_OscConfig+0x858>)
 80017f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80017f6:	4b20      	ldr	r3, [pc, #128]	; (8001878 <HAL_RCC_OscConfig+0x858>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001800:	2b01      	cmp	r3, #1
 8001802:	d031      	beq.n	8001868 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	f003 0203 	and.w	r2, r3, #3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800180e:	429a      	cmp	r2, r3
 8001810:	d12a      	bne.n	8001868 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	091b      	lsrs	r3, r3, #4
 8001816:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800181e:	429a      	cmp	r2, r3
 8001820:	d122      	bne.n	8001868 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800182e:	429a      	cmp	r2, r3
 8001830:	d11a      	bne.n	8001868 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	0a5b      	lsrs	r3, r3, #9
 8001836:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800183e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001840:	429a      	cmp	r2, r3
 8001842:	d111      	bne.n	8001868 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	0c1b      	lsrs	r3, r3, #16
 8001848:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001850:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001852:	429a      	cmp	r2, r3
 8001854:	d108      	bne.n	8001868 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	0e1b      	lsrs	r3, r3, #24
 800185a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001862:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001864:	429a      	cmp	r2, r3
 8001866:	d001      	beq.n	800186c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e000      	b.n	800186e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3730      	adds	r7, #48	; 0x30
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	58024400 	.word	0x58024400

0800187c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e19c      	b.n	8001bca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001890:	4b8a      	ldr	r3, [pc, #552]	; (8001abc <HAL_RCC_ClockConfig+0x240>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 030f 	and.w	r3, r3, #15
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	429a      	cmp	r2, r3
 800189c:	d910      	bls.n	80018c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189e:	4b87      	ldr	r3, [pc, #540]	; (8001abc <HAL_RCC_ClockConfig+0x240>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f023 020f 	bic.w	r2, r3, #15
 80018a6:	4985      	ldr	r1, [pc, #532]	; (8001abc <HAL_RCC_ClockConfig+0x240>)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ae:	4b83      	ldr	r3, [pc, #524]	; (8001abc <HAL_RCC_ClockConfig+0x240>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d001      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e184      	b.n	8001bca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d010      	beq.n	80018ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	691a      	ldr	r2, [r3, #16]
 80018d0:	4b7b      	ldr	r3, [pc, #492]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018d8:	429a      	cmp	r2, r3
 80018da:	d908      	bls.n	80018ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80018dc:	4b78      	ldr	r3, [pc, #480]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	4975      	ldr	r1, [pc, #468]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0308 	and.w	r3, r3, #8
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d010      	beq.n	800191c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	695a      	ldr	r2, [r3, #20]
 80018fe:	4b70      	ldr	r3, [pc, #448]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001906:	429a      	cmp	r2, r3
 8001908:	d908      	bls.n	800191c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800190a:	4b6d      	ldr	r3, [pc, #436]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	496a      	ldr	r1, [pc, #424]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 8001918:	4313      	orrs	r3, r2
 800191a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0310 	and.w	r3, r3, #16
 8001924:	2b00      	cmp	r3, #0
 8001926:	d010      	beq.n	800194a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	699a      	ldr	r2, [r3, #24]
 800192c:	4b64      	ldr	r3, [pc, #400]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 800192e:	69db      	ldr	r3, [r3, #28]
 8001930:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001934:	429a      	cmp	r2, r3
 8001936:	d908      	bls.n	800194a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001938:	4b61      	ldr	r3, [pc, #388]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 800193a:	69db      	ldr	r3, [r3, #28]
 800193c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	495e      	ldr	r1, [pc, #376]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 8001946:	4313      	orrs	r3, r2
 8001948:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0320 	and.w	r3, r3, #32
 8001952:	2b00      	cmp	r3, #0
 8001954:	d010      	beq.n	8001978 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69da      	ldr	r2, [r3, #28]
 800195a:	4b59      	ldr	r3, [pc, #356]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 800195c:	6a1b      	ldr	r3, [r3, #32]
 800195e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001962:	429a      	cmp	r2, r3
 8001964:	d908      	bls.n	8001978 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001966:	4b56      	ldr	r3, [pc, #344]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	4953      	ldr	r1, [pc, #332]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 8001974:	4313      	orrs	r3, r2
 8001976:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d010      	beq.n	80019a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	4b4d      	ldr	r3, [pc, #308]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	f003 030f 	and.w	r3, r3, #15
 8001990:	429a      	cmp	r2, r3
 8001992:	d908      	bls.n	80019a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001994:	4b4a      	ldr	r3, [pc, #296]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	f023 020f 	bic.w	r2, r3, #15
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	4947      	ldr	r1, [pc, #284]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d055      	beq.n	8001a5e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80019b2:	4b43      	ldr	r3, [pc, #268]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	4940      	ldr	r1, [pc, #256]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d107      	bne.n	80019dc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019cc:	4b3c      	ldr	r3, [pc, #240]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d121      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0f6      	b.n	8001bca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b03      	cmp	r3, #3
 80019e2:	d107      	bne.n	80019f4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019e4:	4b36      	ldr	r3, [pc, #216]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d115      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0ea      	b.n	8001bca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d107      	bne.n	8001a0c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019fc:	4b30      	ldr	r3, [pc, #192]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d109      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e0de      	b.n	8001bca <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a0c:	4b2c      	ldr	r3, [pc, #176]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0304 	and.w	r3, r3, #4
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e0d6      	b.n	8001bca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a1c:	4b28      	ldr	r3, [pc, #160]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	f023 0207 	bic.w	r2, r3, #7
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	4925      	ldr	r1, [pc, #148]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2e:	f7fe ff93 	bl	8000958 <HAL_GetTick>
 8001a32:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a34:	e00a      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a36:	f7fe ff8f 	bl	8000958 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e0be      	b.n	8001bca <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4c:	4b1c      	ldr	r3, [pc, #112]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d1eb      	bne.n	8001a36 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d010      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68da      	ldr	r2, [r3, #12]
 8001a6e:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d208      	bcs.n	8001a8c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a7a:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	f023 020f 	bic.w	r2, r3, #15
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	490e      	ldr	r1, [pc, #56]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <HAL_RCC_ClockConfig+0x240>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 030f 	and.w	r3, r3, #15
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d214      	bcs.n	8001ac4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9a:	4b08      	ldr	r3, [pc, #32]	; (8001abc <HAL_RCC_ClockConfig+0x240>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f023 020f 	bic.w	r2, r3, #15
 8001aa2:	4906      	ldr	r1, [pc, #24]	; (8001abc <HAL_RCC_ClockConfig+0x240>)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aaa:	4b04      	ldr	r3, [pc, #16]	; (8001abc <HAL_RCC_ClockConfig+0x240>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d005      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e086      	b.n	8001bca <HAL_RCC_ClockConfig+0x34e>
 8001abc:	52002000 	.word	0x52002000
 8001ac0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d010      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	691a      	ldr	r2, [r3, #16]
 8001ad4:	4b3f      	ldr	r3, [pc, #252]	; (8001bd4 <HAL_RCC_ClockConfig+0x358>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d208      	bcs.n	8001af2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ae0:	4b3c      	ldr	r3, [pc, #240]	; (8001bd4 <HAL_RCC_ClockConfig+0x358>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	4939      	ldr	r1, [pc, #228]	; (8001bd4 <HAL_RCC_ClockConfig+0x358>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0308 	and.w	r3, r3, #8
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d010      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	695a      	ldr	r2, [r3, #20]
 8001b02:	4b34      	ldr	r3, [pc, #208]	; (8001bd4 <HAL_RCC_ClockConfig+0x358>)
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d208      	bcs.n	8001b20 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001b0e:	4b31      	ldr	r3, [pc, #196]	; (8001bd4 <HAL_RCC_ClockConfig+0x358>)
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	492e      	ldr	r1, [pc, #184]	; (8001bd4 <HAL_RCC_ClockConfig+0x358>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0310 	and.w	r3, r3, #16
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d010      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	699a      	ldr	r2, [r3, #24]
 8001b30:	4b28      	ldr	r3, [pc, #160]	; (8001bd4 <HAL_RCC_ClockConfig+0x358>)
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d208      	bcs.n	8001b4e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001b3c:	4b25      	ldr	r3, [pc, #148]	; (8001bd4 <HAL_RCC_ClockConfig+0x358>)
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	4922      	ldr	r1, [pc, #136]	; (8001bd4 <HAL_RCC_ClockConfig+0x358>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0320 	and.w	r3, r3, #32
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d010      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69da      	ldr	r2, [r3, #28]
 8001b5e:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <HAL_RCC_ClockConfig+0x358>)
 8001b60:	6a1b      	ldr	r3, [r3, #32]
 8001b62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d208      	bcs.n	8001b7c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001b6a:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <HAL_RCC_ClockConfig+0x358>)
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	4917      	ldr	r1, [pc, #92]	; (8001bd4 <HAL_RCC_ClockConfig+0x358>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b7c:	f000 f834 	bl	8001be8 <HAL_RCC_GetSysClockFreq>
 8001b80:	4602      	mov	r2, r0
 8001b82:	4b14      	ldr	r3, [pc, #80]	; (8001bd4 <HAL_RCC_ClockConfig+0x358>)
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	0a1b      	lsrs	r3, r3, #8
 8001b88:	f003 030f 	and.w	r3, r3, #15
 8001b8c:	4912      	ldr	r1, [pc, #72]	; (8001bd8 <HAL_RCC_ClockConfig+0x35c>)
 8001b8e:	5ccb      	ldrb	r3, [r1, r3]
 8001b90:	f003 031f 	and.w	r3, r3, #31
 8001b94:	fa22 f303 	lsr.w	r3, r2, r3
 8001b98:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b9a:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <HAL_RCC_ClockConfig+0x358>)
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	4a0d      	ldr	r2, [pc, #52]	; (8001bd8 <HAL_RCC_ClockConfig+0x35c>)
 8001ba4:	5cd3      	ldrb	r3, [r2, r3]
 8001ba6:	f003 031f 	and.w	r3, r3, #31
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb0:	4a0a      	ldr	r2, [pc, #40]	; (8001bdc <HAL_RCC_ClockConfig+0x360>)
 8001bb2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001bb4:	4a0a      	ldr	r2, [pc, #40]	; (8001be0 <HAL_RCC_ClockConfig+0x364>)
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001bba:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <HAL_RCC_ClockConfig+0x368>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe fdc4 	bl	800074c <HAL_InitTick>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	58024400 	.word	0x58024400
 8001bd8:	08005154 	.word	0x08005154
 8001bdc:	24000004 	.word	0x24000004
 8001be0:	24000000 	.word	0x24000000
 8001be4:	24000008 	.word	0x24000008

08001be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b089      	sub	sp, #36	; 0x24
 8001bec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bee:	4bb3      	ldr	r3, [pc, #716]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bf6:	2b18      	cmp	r3, #24
 8001bf8:	f200 8155 	bhi.w	8001ea6 <HAL_RCC_GetSysClockFreq+0x2be>
 8001bfc:	a201      	add	r2, pc, #4	; (adr r2, 8001c04 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c02:	bf00      	nop
 8001c04:	08001c69 	.word	0x08001c69
 8001c08:	08001ea7 	.word	0x08001ea7
 8001c0c:	08001ea7 	.word	0x08001ea7
 8001c10:	08001ea7 	.word	0x08001ea7
 8001c14:	08001ea7 	.word	0x08001ea7
 8001c18:	08001ea7 	.word	0x08001ea7
 8001c1c:	08001ea7 	.word	0x08001ea7
 8001c20:	08001ea7 	.word	0x08001ea7
 8001c24:	08001c8f 	.word	0x08001c8f
 8001c28:	08001ea7 	.word	0x08001ea7
 8001c2c:	08001ea7 	.word	0x08001ea7
 8001c30:	08001ea7 	.word	0x08001ea7
 8001c34:	08001ea7 	.word	0x08001ea7
 8001c38:	08001ea7 	.word	0x08001ea7
 8001c3c:	08001ea7 	.word	0x08001ea7
 8001c40:	08001ea7 	.word	0x08001ea7
 8001c44:	08001c95 	.word	0x08001c95
 8001c48:	08001ea7 	.word	0x08001ea7
 8001c4c:	08001ea7 	.word	0x08001ea7
 8001c50:	08001ea7 	.word	0x08001ea7
 8001c54:	08001ea7 	.word	0x08001ea7
 8001c58:	08001ea7 	.word	0x08001ea7
 8001c5c:	08001ea7 	.word	0x08001ea7
 8001c60:	08001ea7 	.word	0x08001ea7
 8001c64:	08001c9b 	.word	0x08001c9b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001c68:	4b94      	ldr	r3, [pc, #592]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0320 	and.w	r3, r3, #32
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d009      	beq.n	8001c88 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001c74:	4b91      	ldr	r3, [pc, #580]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	08db      	lsrs	r3, r3, #3
 8001c7a:	f003 0303 	and.w	r3, r3, #3
 8001c7e:	4a90      	ldr	r2, [pc, #576]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001c80:	fa22 f303 	lsr.w	r3, r2, r3
 8001c84:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001c86:	e111      	b.n	8001eac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001c88:	4b8d      	ldr	r3, [pc, #564]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001c8a:	61bb      	str	r3, [r7, #24]
    break;
 8001c8c:	e10e      	b.n	8001eac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001c8e:	4b8d      	ldr	r3, [pc, #564]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001c90:	61bb      	str	r3, [r7, #24]
    break;
 8001c92:	e10b      	b.n	8001eac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001c94:	4b8c      	ldr	r3, [pc, #560]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001c96:	61bb      	str	r3, [r7, #24]
    break;
 8001c98:	e108      	b.n	8001eac <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001c9a:	4b88      	ldr	r3, [pc, #544]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001ca4:	4b85      	ldr	r3, [pc, #532]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca8:	091b      	lsrs	r3, r3, #4
 8001caa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cae:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001cb0:	4b82      	ldr	r3, [pc, #520]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001cba:	4b80      	ldr	r3, [pc, #512]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cbe:	08db      	lsrs	r3, r3, #3
 8001cc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	fb02 f303 	mul.w	r3, r2, r3
 8001cca:	ee07 3a90 	vmov	s15, r3
 8001cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cd2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f000 80e1 	beq.w	8001ea0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	f000 8083 	beq.w	8001dec <HAL_RCC_GetSysClockFreq+0x204>
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	f200 80a1 	bhi.w	8001e30 <HAL_RCC_GetSysClockFreq+0x248>
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <HAL_RCC_GetSysClockFreq+0x114>
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d056      	beq.n	8001da8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001cfa:	e099      	b.n	8001e30 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001cfc:	4b6f      	ldr	r3, [pc, #444]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0320 	and.w	r3, r3, #32
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d02d      	beq.n	8001d64 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001d08:	4b6c      	ldr	r3, [pc, #432]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	08db      	lsrs	r3, r3, #3
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	4a6b      	ldr	r2, [pc, #428]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d14:	fa22 f303 	lsr.w	r3, r2, r3
 8001d18:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	ee07 3a90 	vmov	s15, r3
 8001d20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	ee07 3a90 	vmov	s15, r3
 8001d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d32:	4b62      	ldr	r3, [pc, #392]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d3a:	ee07 3a90 	vmov	s15, r3
 8001d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d42:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d46:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001ecc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d5e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001d62:	e087      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	ee07 3a90 	vmov	s15, r3
 8001d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d6e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001ed0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d76:	4b51      	ldr	r3, [pc, #324]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d7e:	ee07 3a90 	vmov	s15, r3
 8001d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d86:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d8a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001ecc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001da2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001da6:	e065      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	ee07 3a90 	vmov	s15, r3
 8001dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001db2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001ed4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dba:	4b40      	ldr	r3, [pc, #256]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dc2:	ee07 3a90 	vmov	s15, r3
 8001dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001dca:	ed97 6a02 	vldr	s12, [r7, #8]
 8001dce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001ecc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001dda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001de6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001dea:	e043      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	ee07 3a90 	vmov	s15, r3
 8001df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001df6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001ed8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dfe:	4b2f      	ldr	r3, [pc, #188]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e06:	ee07 3a90 	vmov	s15, r3
 8001e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e12:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001ecc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001e2e:	e021      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	ee07 3a90 	vmov	s15, r3
 8001e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e3a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001ed4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e42:	4b1e      	ldr	r3, [pc, #120]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e4a:	ee07 3a90 	vmov	s15, r3
 8001e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e52:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e56:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001ecc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001e72:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001e74:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e78:	0a5b      	lsrs	r3, r3, #9
 8001e7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e7e:	3301      	adds	r3, #1
 8001e80:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	ee07 3a90 	vmov	s15, r3
 8001e88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8001e90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e98:	ee17 3a90 	vmov	r3, s15
 8001e9c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001e9e:	e005      	b.n	8001eac <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61bb      	str	r3, [r7, #24]
    break;
 8001ea4:	e002      	b.n	8001eac <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8001ea6:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001ea8:	61bb      	str	r3, [r7, #24]
    break;
 8001eaa:	bf00      	nop
  }

  return sysclockfreq;
 8001eac:	69bb      	ldr	r3, [r7, #24]
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3724      	adds	r7, #36	; 0x24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	58024400 	.word	0x58024400
 8001ec0:	03d09000 	.word	0x03d09000
 8001ec4:	003d0900 	.word	0x003d0900
 8001ec8:	007a1200 	.word	0x007a1200
 8001ecc:	46000000 	.word	0x46000000
 8001ed0:	4c742400 	.word	0x4c742400
 8001ed4:	4a742400 	.word	0x4a742400
 8001ed8:	4af42400 	.word	0x4af42400

08001edc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001ee2:	f7ff fe81 	bl	8001be8 <HAL_RCC_GetSysClockFreq>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <HAL_RCC_GetHCLKFreq+0x50>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	0a1b      	lsrs	r3, r3, #8
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	490f      	ldr	r1, [pc, #60]	; (8001f30 <HAL_RCC_GetHCLKFreq+0x54>)
 8001ef4:	5ccb      	ldrb	r3, [r1, r3]
 8001ef6:	f003 031f 	and.w	r3, r3, #31
 8001efa:	fa22 f303 	lsr.w	r3, r2, r3
 8001efe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f00:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <HAL_RCC_GetHCLKFreq+0x50>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	f003 030f 	and.w	r3, r3, #15
 8001f08:	4a09      	ldr	r2, [pc, #36]	; (8001f30 <HAL_RCC_GetHCLKFreq+0x54>)
 8001f0a:	5cd3      	ldrb	r3, [r2, r3]
 8001f0c:	f003 031f 	and.w	r3, r3, #31
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	fa22 f303 	lsr.w	r3, r2, r3
 8001f16:	4a07      	ldr	r2, [pc, #28]	; (8001f34 <HAL_RCC_GetHCLKFreq+0x58>)
 8001f18:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f1a:	4a07      	ldr	r2, [pc, #28]	; (8001f38 <HAL_RCC_GetHCLKFreq+0x5c>)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8001f20:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <HAL_RCC_GetHCLKFreq+0x58>)
 8001f22:	681b      	ldr	r3, [r3, #0]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	58024400 	.word	0x58024400
 8001f30:	08005154 	.word	0x08005154
 8001f34:	24000004 	.word	0x24000004
 8001f38:	24000000 	.word	0x24000000

08001f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8001f40:	f7ff ffcc 	bl	8001edc <HAL_RCC_GetHCLKFreq>
 8001f44:	4602      	mov	r2, r0
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	091b      	lsrs	r3, r3, #4
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	4904      	ldr	r1, [pc, #16]	; (8001f64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f52:	5ccb      	ldrb	r3, [r1, r3]
 8001f54:	f003 031f 	and.w	r3, r3, #31
 8001f58:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	58024400 	.word	0x58024400
 8001f64:	08005154 	.word	0x08005154

08001f68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	223f      	movs	r2, #63	; 0x3f
 8001f76:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f78:	4b1a      	ldr	r3, [pc, #104]	; (8001fe4 <HAL_RCC_GetClockConfig+0x7c>)
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	f003 0207 	and.w	r2, r3, #7
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8001f84:	4b17      	ldr	r3, [pc, #92]	; (8001fe4 <HAL_RCC_GetClockConfig+0x7c>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8001f90:	4b14      	ldr	r3, [pc, #80]	; (8001fe4 <HAL_RCC_GetClockConfig+0x7c>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	f003 020f 	and.w	r2, r3, #15
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8001f9c:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <HAL_RCC_GetClockConfig+0x7c>)
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8001fa8:	4b0e      	ldr	r3, [pc, #56]	; (8001fe4 <HAL_RCC_GetClockConfig+0x7c>)
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <HAL_RCC_GetClockConfig+0x7c>)
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8001fc0:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <HAL_RCC_GetClockConfig+0x7c>)
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001fcc:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <HAL_RCC_GetClockConfig+0x80>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 020f 	and.w	r2, r3, #15
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	601a      	str	r2, [r3, #0]
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	58024400 	.word	0x58024400
 8001fe8:	52002000 	.word	0x52002000

08001fec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e049      	b.n	8002092 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d106      	bne.n	8002018 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f841 	bl	800209a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2202      	movs	r2, #2
 800201c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3304      	adds	r3, #4
 8002028:	4619      	mov	r1, r3
 800202a:	4610      	mov	r0, r2
 800202c:	f000 fa00 	bl	8002430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
	...

080020b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d001      	beq.n	80020c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e054      	b.n	8002172 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2202      	movs	r2, #2
 80020cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68da      	ldr	r2, [r3, #12]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 0201 	orr.w	r2, r2, #1
 80020de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a26      	ldr	r2, [pc, #152]	; (8002180 <HAL_TIM_Base_Start_IT+0xd0>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d022      	beq.n	8002130 <HAL_TIM_Base_Start_IT+0x80>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f2:	d01d      	beq.n	8002130 <HAL_TIM_Base_Start_IT+0x80>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a22      	ldr	r2, [pc, #136]	; (8002184 <HAL_TIM_Base_Start_IT+0xd4>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d018      	beq.n	8002130 <HAL_TIM_Base_Start_IT+0x80>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a21      	ldr	r2, [pc, #132]	; (8002188 <HAL_TIM_Base_Start_IT+0xd8>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d013      	beq.n	8002130 <HAL_TIM_Base_Start_IT+0x80>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a1f      	ldr	r2, [pc, #124]	; (800218c <HAL_TIM_Base_Start_IT+0xdc>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d00e      	beq.n	8002130 <HAL_TIM_Base_Start_IT+0x80>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a1e      	ldr	r2, [pc, #120]	; (8002190 <HAL_TIM_Base_Start_IT+0xe0>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d009      	beq.n	8002130 <HAL_TIM_Base_Start_IT+0x80>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a1c      	ldr	r2, [pc, #112]	; (8002194 <HAL_TIM_Base_Start_IT+0xe4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d004      	beq.n	8002130 <HAL_TIM_Base_Start_IT+0x80>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a1b      	ldr	r2, [pc, #108]	; (8002198 <HAL_TIM_Base_Start_IT+0xe8>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d115      	bne.n	800215c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	4b19      	ldr	r3, [pc, #100]	; (800219c <HAL_TIM_Base_Start_IT+0xec>)
 8002138:	4013      	ands	r3, r2
 800213a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2b06      	cmp	r3, #6
 8002140:	d015      	beq.n	800216e <HAL_TIM_Base_Start_IT+0xbe>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002148:	d011      	beq.n	800216e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f042 0201 	orr.w	r2, r2, #1
 8002158:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800215a:	e008      	b.n	800216e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f042 0201 	orr.w	r2, r2, #1
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	e000      	b.n	8002170 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800216e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40010000 	.word	0x40010000
 8002184:	40000400 	.word	0x40000400
 8002188:	40000800 	.word	0x40000800
 800218c:	40000c00 	.word	0x40000c00
 8002190:	40010400 	.word	0x40010400
 8002194:	40001800 	.word	0x40001800
 8002198:	40014000 	.word	0x40014000
 800219c:	00010007 	.word	0x00010007

080021a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d122      	bne.n	80021fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d11b      	bne.n	80021fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f06f 0202 	mvn.w	r2, #2
 80021cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f905 	bl	80023f2 <HAL_TIM_IC_CaptureCallback>
 80021e8:	e005      	b.n	80021f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f8f7 	bl	80023de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 f908 	bl	8002406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	f003 0304 	and.w	r3, r3, #4
 8002206:	2b04      	cmp	r3, #4
 8002208:	d122      	bne.n	8002250 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b04      	cmp	r3, #4
 8002216:	d11b      	bne.n	8002250 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f06f 0204 	mvn.w	r2, #4
 8002220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2202      	movs	r2, #2
 8002226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f8db 	bl	80023f2 <HAL_TIM_IC_CaptureCallback>
 800223c:	e005      	b.n	800224a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f8cd 	bl	80023de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 f8de 	bl	8002406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	2b08      	cmp	r3, #8
 800225c:	d122      	bne.n	80022a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f003 0308 	and.w	r3, r3, #8
 8002268:	2b08      	cmp	r3, #8
 800226a:	d11b      	bne.n	80022a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f06f 0208 	mvn.w	r2, #8
 8002274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2204      	movs	r2, #4
 800227a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f8b1 	bl	80023f2 <HAL_TIM_IC_CaptureCallback>
 8002290:	e005      	b.n	800229e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f8a3 	bl	80023de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 f8b4 	bl	8002406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	f003 0310 	and.w	r3, r3, #16
 80022ae:	2b10      	cmp	r3, #16
 80022b0:	d122      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f003 0310 	and.w	r3, r3, #16
 80022bc:	2b10      	cmp	r3, #16
 80022be:	d11b      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f06f 0210 	mvn.w	r2, #16
 80022c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2208      	movs	r2, #8
 80022ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f887 	bl	80023f2 <HAL_TIM_IC_CaptureCallback>
 80022e4:	e005      	b.n	80022f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f879 	bl	80023de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f88a 	bl	8002406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b01      	cmp	r3, #1
 8002304:	d10e      	bne.n	8002324 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b01      	cmp	r3, #1
 8002312:	d107      	bne.n	8002324 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f06f 0201 	mvn.w	r2, #1
 800231c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7fe f9de 	bl	80006e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800232e:	2b80      	cmp	r3, #128	; 0x80
 8002330:	d10e      	bne.n	8002350 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800233c:	2b80      	cmp	r3, #128	; 0x80
 800233e:	d107      	bne.n	8002350 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f914 	bl	8002578 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800235e:	d10e      	bne.n	800237e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800236a:	2b80      	cmp	r3, #128	; 0x80
 800236c:	d107      	bne.n	800237e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 f907 	bl	800258c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002388:	2b40      	cmp	r3, #64	; 0x40
 800238a:	d10e      	bne.n	80023aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002396:	2b40      	cmp	r3, #64	; 0x40
 8002398:	d107      	bne.n	80023aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 f838 	bl	800241a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	f003 0320 	and.w	r3, r3, #32
 80023b4:	2b20      	cmp	r3, #32
 80023b6:	d10e      	bne.n	80023d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	f003 0320 	and.w	r3, r3, #32
 80023c2:	2b20      	cmp	r3, #32
 80023c4:	d107      	bne.n	80023d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f06f 0220 	mvn.w	r2, #32
 80023ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f8c7 	bl	8002564 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023d6:	bf00      	nop
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
	...

08002430 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a40      	ldr	r2, [pc, #256]	; (8002544 <TIM_Base_SetConfig+0x114>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d013      	beq.n	8002470 <TIM_Base_SetConfig+0x40>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800244e:	d00f      	beq.n	8002470 <TIM_Base_SetConfig+0x40>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a3d      	ldr	r2, [pc, #244]	; (8002548 <TIM_Base_SetConfig+0x118>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d00b      	beq.n	8002470 <TIM_Base_SetConfig+0x40>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a3c      	ldr	r2, [pc, #240]	; (800254c <TIM_Base_SetConfig+0x11c>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d007      	beq.n	8002470 <TIM_Base_SetConfig+0x40>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a3b      	ldr	r2, [pc, #236]	; (8002550 <TIM_Base_SetConfig+0x120>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d003      	beq.n	8002470 <TIM_Base_SetConfig+0x40>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a3a      	ldr	r2, [pc, #232]	; (8002554 <TIM_Base_SetConfig+0x124>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d108      	bne.n	8002482 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002476:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	4313      	orrs	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a2f      	ldr	r2, [pc, #188]	; (8002544 <TIM_Base_SetConfig+0x114>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d01f      	beq.n	80024ca <TIM_Base_SetConfig+0x9a>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002490:	d01b      	beq.n	80024ca <TIM_Base_SetConfig+0x9a>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a2c      	ldr	r2, [pc, #176]	; (8002548 <TIM_Base_SetConfig+0x118>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d017      	beq.n	80024ca <TIM_Base_SetConfig+0x9a>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a2b      	ldr	r2, [pc, #172]	; (800254c <TIM_Base_SetConfig+0x11c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d013      	beq.n	80024ca <TIM_Base_SetConfig+0x9a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a2a      	ldr	r2, [pc, #168]	; (8002550 <TIM_Base_SetConfig+0x120>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d00f      	beq.n	80024ca <TIM_Base_SetConfig+0x9a>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a29      	ldr	r2, [pc, #164]	; (8002554 <TIM_Base_SetConfig+0x124>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d00b      	beq.n	80024ca <TIM_Base_SetConfig+0x9a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a28      	ldr	r2, [pc, #160]	; (8002558 <TIM_Base_SetConfig+0x128>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d007      	beq.n	80024ca <TIM_Base_SetConfig+0x9a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a27      	ldr	r2, [pc, #156]	; (800255c <TIM_Base_SetConfig+0x12c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d003      	beq.n	80024ca <TIM_Base_SetConfig+0x9a>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a26      	ldr	r2, [pc, #152]	; (8002560 <TIM_Base_SetConfig+0x130>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d108      	bne.n	80024dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	4313      	orrs	r3, r2
 80024da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a10      	ldr	r2, [pc, #64]	; (8002544 <TIM_Base_SetConfig+0x114>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d00f      	beq.n	8002528 <TIM_Base_SetConfig+0xf8>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a12      	ldr	r2, [pc, #72]	; (8002554 <TIM_Base_SetConfig+0x124>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d00b      	beq.n	8002528 <TIM_Base_SetConfig+0xf8>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a11      	ldr	r2, [pc, #68]	; (8002558 <TIM_Base_SetConfig+0x128>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d007      	beq.n	8002528 <TIM_Base_SetConfig+0xf8>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a10      	ldr	r2, [pc, #64]	; (800255c <TIM_Base_SetConfig+0x12c>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d003      	beq.n	8002528 <TIM_Base_SetConfig+0xf8>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a0f      	ldr	r2, [pc, #60]	; (8002560 <TIM_Base_SetConfig+0x130>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d103      	bne.n	8002530 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	691a      	ldr	r2, [r3, #16]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	615a      	str	r2, [r3, #20]
}
 8002536:	bf00      	nop
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	40010000 	.word	0x40010000
 8002548:	40000400 	.word	0x40000400
 800254c:	40000800 	.word	0x40000800
 8002550:	40000c00 	.word	0x40000c00
 8002554:	40010400 	.word	0x40010400
 8002558:	40014000 	.word	0x40014000
 800255c:	40014400 	.word	0x40014400
 8002560:	40014800 	.word	0x40014800

08002564 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <__NVIC_SetPriority>:
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	6039      	str	r1, [r7, #0]
 80025aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	db0a      	blt.n	80025ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	490c      	ldr	r1, [pc, #48]	; (80025ec <__NVIC_SetPriority+0x4c>)
 80025ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025be:	0112      	lsls	r2, r2, #4
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	440b      	add	r3, r1
 80025c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80025c8:	e00a      	b.n	80025e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	4908      	ldr	r1, [pc, #32]	; (80025f0 <__NVIC_SetPriority+0x50>)
 80025d0:	88fb      	ldrh	r3, [r7, #6]
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	3b04      	subs	r3, #4
 80025d8:	0112      	lsls	r2, r2, #4
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	440b      	add	r3, r1
 80025de:	761a      	strb	r2, [r3, #24]
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	e000e100 	.word	0xe000e100
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80025f8:	4b05      	ldr	r3, [pc, #20]	; (8002610 <SysTick_Handler+0x1c>)
 80025fa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80025fc:	f002 f91e 	bl	800483c <xTaskGetSchedulerState>
 8002600:	4603      	mov	r3, r0
 8002602:	2b01      	cmp	r3, #1
 8002604:	d001      	beq.n	800260a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002606:	f000 fd7f 	bl	8003108 <xPortSysTickHandler>
  }
}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	e000e010 	.word	0xe000e010

08002614 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002618:	2100      	movs	r1, #0
 800261a:	f06f 0004 	mvn.w	r0, #4
 800261e:	f7ff ffbf 	bl	80025a0 <__NVIC_SetPriority>
#endif
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800262e:	f3ef 8305 	mrs	r3, IPSR
 8002632:	603b      	str	r3, [r7, #0]
  return(result);
 8002634:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800263a:	f06f 0305 	mvn.w	r3, #5
 800263e:	607b      	str	r3, [r7, #4]
 8002640:	e00c      	b.n	800265c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002642:	4b0a      	ldr	r3, [pc, #40]	; (800266c <osKernelInitialize+0x44>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d105      	bne.n	8002656 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800264a:	4b08      	ldr	r3, [pc, #32]	; (800266c <osKernelInitialize+0x44>)
 800264c:	2201      	movs	r2, #1
 800264e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002650:	2300      	movs	r3, #0
 8002652:	607b      	str	r3, [r7, #4]
 8002654:	e002      	b.n	800265c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002656:	f04f 33ff 	mov.w	r3, #4294967295
 800265a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800265c:	687b      	ldr	r3, [r7, #4]
}
 800265e:	4618      	mov	r0, r3
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	24000088 	.word	0x24000088

08002670 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002676:	f3ef 8305 	mrs	r3, IPSR
 800267a:	603b      	str	r3, [r7, #0]
  return(result);
 800267c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002682:	f06f 0305 	mvn.w	r3, #5
 8002686:	607b      	str	r3, [r7, #4]
 8002688:	e010      	b.n	80026ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800268a:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <osKernelStart+0x48>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d109      	bne.n	80026a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002692:	f7ff ffbf 	bl	8002614 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002696:	4b08      	ldr	r3, [pc, #32]	; (80026b8 <osKernelStart+0x48>)
 8002698:	2202      	movs	r2, #2
 800269a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800269c:	f001 fc86 	bl	8003fac <vTaskStartScheduler>
      stat = osOK;
 80026a0:	2300      	movs	r3, #0
 80026a2:	607b      	str	r3, [r7, #4]
 80026a4:	e002      	b.n	80026ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 80026a6:	f04f 33ff 	mov.w	r3, #4294967295
 80026aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80026ac:	687b      	ldr	r3, [r7, #4]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	24000088 	.word	0x24000088

080026bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08e      	sub	sp, #56	; 0x38
 80026c0:	af04      	add	r7, sp, #16
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026cc:	f3ef 8305 	mrs	r3, IPSR
 80026d0:	617b      	str	r3, [r7, #20]
  return(result);
 80026d2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d17e      	bne.n	80027d6 <osThreadNew+0x11a>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d07b      	beq.n	80027d6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80026de:	2380      	movs	r3, #128	; 0x80
 80026e0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80026e2:	2318      	movs	r3, #24
 80026e4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80026ea:	f04f 33ff 	mov.w	r3, #4294967295
 80026ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d045      	beq.n	8002782 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d002      	beq.n	8002704 <osThreadNew+0x48>
        name = attr->name;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d002      	beq.n	8002712 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <osThreadNew+0x6e>
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	2b38      	cmp	r3, #56	; 0x38
 800271c:	d805      	bhi.n	800272a <osThreadNew+0x6e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <osThreadNew+0x72>
        return (NULL);
 800272a:	2300      	movs	r3, #0
 800272c:	e054      	b.n	80027d8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	089b      	lsrs	r3, r3, #2
 800273c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00e      	beq.n	8002764 <osThreadNew+0xa8>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	2b5b      	cmp	r3, #91	; 0x5b
 800274c:	d90a      	bls.n	8002764 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002752:	2b00      	cmp	r3, #0
 8002754:	d006      	beq.n	8002764 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d002      	beq.n	8002764 <osThreadNew+0xa8>
        mem = 1;
 800275e:	2301      	movs	r3, #1
 8002760:	61bb      	str	r3, [r7, #24]
 8002762:	e010      	b.n	8002786 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10c      	bne.n	8002786 <osThreadNew+0xca>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d108      	bne.n	8002786 <osThreadNew+0xca>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d104      	bne.n	8002786 <osThreadNew+0xca>
          mem = 0;
 800277c:	2300      	movs	r3, #0
 800277e:	61bb      	str	r3, [r7, #24]
 8002780:	e001      	b.n	8002786 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002782:	2300      	movs	r3, #0
 8002784:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d110      	bne.n	80027ae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002794:	9202      	str	r2, [sp, #8]
 8002796:	9301      	str	r3, [sp, #4]
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	6a3a      	ldr	r2, [r7, #32]
 80027a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f001 fa2c 	bl	8003c00 <xTaskCreateStatic>
 80027a8:	4603      	mov	r3, r0
 80027aa:	613b      	str	r3, [r7, #16]
 80027ac:	e013      	b.n	80027d6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d110      	bne.n	80027d6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	f107 0310 	add.w	r3, r7, #16
 80027bc:	9301      	str	r3, [sp, #4]
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f001 fa77 	bl	8003cba <xTaskCreate>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d001      	beq.n	80027d6 <osThreadNew+0x11a>
            hTask = NULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80027d6:	693b      	ldr	r3, [r7, #16]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3728      	adds	r7, #40	; 0x28
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4a07      	ldr	r2, [pc, #28]	; (800280c <vApplicationGetIdleTaskMemory+0x2c>)
 80027f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	4a06      	ldr	r2, [pc, #24]	; (8002810 <vApplicationGetIdleTaskMemory+0x30>)
 80027f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2280      	movs	r2, #128	; 0x80
 80027fc:	601a      	str	r2, [r3, #0]
}
 80027fe:	bf00      	nop
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	2400008c 	.word	0x2400008c
 8002810:	240000e8 	.word	0x240000e8

08002814 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4a07      	ldr	r2, [pc, #28]	; (8002840 <vApplicationGetTimerTaskMemory+0x2c>)
 8002824:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	4a06      	ldr	r2, [pc, #24]	; (8002844 <vApplicationGetTimerTaskMemory+0x30>)
 800282a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002832:	601a      	str	r2, [r3, #0]
}
 8002834:	bf00      	nop
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	240002e8 	.word	0x240002e8
 8002844:	24000344 	.word	0x24000344

08002848 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b08a      	sub	sp, #40	; 0x28
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002850:	2300      	movs	r3, #0
 8002852:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002854:	f001 fc10 	bl	8004078 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002858:	4b5b      	ldr	r3, [pc, #364]	; (80029c8 <pvPortMalloc+0x180>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002860:	f000 f920 	bl	8002aa4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002864:	4b59      	ldr	r3, [pc, #356]	; (80029cc <pvPortMalloc+0x184>)
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4013      	ands	r3, r2
 800286c:	2b00      	cmp	r3, #0
 800286e:	f040 8093 	bne.w	8002998 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d01d      	beq.n	80028b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002878:	2208      	movs	r2, #8
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4413      	add	r3, r2
 800287e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	2b00      	cmp	r3, #0
 8002888:	d014      	beq.n	80028b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f023 0307 	bic.w	r3, r3, #7
 8002890:	3308      	adds	r3, #8
 8002892:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00a      	beq.n	80028b4 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800289e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a2:	f383 8811 	msr	BASEPRI, r3
 80028a6:	f3bf 8f6f 	isb	sy
 80028aa:	f3bf 8f4f 	dsb	sy
 80028ae:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80028b0:	bf00      	nop
 80028b2:	e7fe      	b.n	80028b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d06e      	beq.n	8002998 <pvPortMalloc+0x150>
 80028ba:	4b45      	ldr	r3, [pc, #276]	; (80029d0 <pvPortMalloc+0x188>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d869      	bhi.n	8002998 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80028c4:	4b43      	ldr	r3, [pc, #268]	; (80029d4 <pvPortMalloc+0x18c>)
 80028c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80028c8:	4b42      	ldr	r3, [pc, #264]	; (80029d4 <pvPortMalloc+0x18c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80028ce:	e004      	b.n	80028da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d903      	bls.n	80028ec <pvPortMalloc+0xa4>
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1f1      	bne.n	80028d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80028ec:	4b36      	ldr	r3, [pc, #216]	; (80029c8 <pvPortMalloc+0x180>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d050      	beq.n	8002998 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80028f6:	6a3b      	ldr	r3, [r7, #32]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2208      	movs	r2, #8
 80028fc:	4413      	add	r3, r2
 80028fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	6a3b      	ldr	r3, [r7, #32]
 8002906:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	1ad2      	subs	r2, r2, r3
 8002910:	2308      	movs	r3, #8
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	429a      	cmp	r2, r3
 8002916:	d91f      	bls.n	8002958 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4413      	add	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00a      	beq.n	8002940 <pvPortMalloc+0xf8>
	__asm volatile
 800292a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800292e:	f383 8811 	msr	BASEPRI, r3
 8002932:	f3bf 8f6f 	isb	sy
 8002936:	f3bf 8f4f 	dsb	sy
 800293a:	613b      	str	r3, [r7, #16]
}
 800293c:	bf00      	nop
 800293e:	e7fe      	b.n	800293e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	1ad2      	subs	r2, r2, r3
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002952:	69b8      	ldr	r0, [r7, #24]
 8002954:	f000 f908 	bl	8002b68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002958:	4b1d      	ldr	r3, [pc, #116]	; (80029d0 <pvPortMalloc+0x188>)
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	4a1b      	ldr	r2, [pc, #108]	; (80029d0 <pvPortMalloc+0x188>)
 8002964:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002966:	4b1a      	ldr	r3, [pc, #104]	; (80029d0 <pvPortMalloc+0x188>)
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <pvPortMalloc+0x190>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d203      	bcs.n	800297a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002972:	4b17      	ldr	r3, [pc, #92]	; (80029d0 <pvPortMalloc+0x188>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a18      	ldr	r2, [pc, #96]	; (80029d8 <pvPortMalloc+0x190>)
 8002978:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	4b13      	ldr	r3, [pc, #76]	; (80029cc <pvPortMalloc+0x184>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	431a      	orrs	r2, r3
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800298e:	4b13      	ldr	r3, [pc, #76]	; (80029dc <pvPortMalloc+0x194>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	3301      	adds	r3, #1
 8002994:	4a11      	ldr	r2, [pc, #68]	; (80029dc <pvPortMalloc+0x194>)
 8002996:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002998:	f001 fb7c 	bl	8004094 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00a      	beq.n	80029bc <pvPortMalloc+0x174>
	__asm volatile
 80029a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029aa:	f383 8811 	msr	BASEPRI, r3
 80029ae:	f3bf 8f6f 	isb	sy
 80029b2:	f3bf 8f4f 	dsb	sy
 80029b6:	60fb      	str	r3, [r7, #12]
}
 80029b8:	bf00      	nop
 80029ba:	e7fe      	b.n	80029ba <pvPortMalloc+0x172>
	return pvReturn;
 80029bc:	69fb      	ldr	r3, [r7, #28]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3728      	adds	r7, #40	; 0x28
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	2400434c 	.word	0x2400434c
 80029cc:	24004360 	.word	0x24004360
 80029d0:	24004350 	.word	0x24004350
 80029d4:	24004344 	.word	0x24004344
 80029d8:	24004354 	.word	0x24004354
 80029dc:	24004358 	.word	0x24004358

080029e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d04d      	beq.n	8002a8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80029f2:	2308      	movs	r3, #8
 80029f4:	425b      	negs	r3, r3
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	4413      	add	r3, r2
 80029fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	4b24      	ldr	r3, [pc, #144]	; (8002a98 <vPortFree+0xb8>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10a      	bne.n	8002a24 <vPortFree+0x44>
	__asm volatile
 8002a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a12:	f383 8811 	msr	BASEPRI, r3
 8002a16:	f3bf 8f6f 	isb	sy
 8002a1a:	f3bf 8f4f 	dsb	sy
 8002a1e:	60fb      	str	r3, [r7, #12]
}
 8002a20:	bf00      	nop
 8002a22:	e7fe      	b.n	8002a22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00a      	beq.n	8002a42 <vPortFree+0x62>
	__asm volatile
 8002a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a30:	f383 8811 	msr	BASEPRI, r3
 8002a34:	f3bf 8f6f 	isb	sy
 8002a38:	f3bf 8f4f 	dsb	sy
 8002a3c:	60bb      	str	r3, [r7, #8]
}
 8002a3e:	bf00      	nop
 8002a40:	e7fe      	b.n	8002a40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	4b14      	ldr	r3, [pc, #80]	; (8002a98 <vPortFree+0xb8>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d01e      	beq.n	8002a8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d11a      	bne.n	8002a8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <vPortFree+0xb8>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	401a      	ands	r2, r3
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002a68:	f001 fb06 	bl	8004078 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <vPortFree+0xbc>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4413      	add	r3, r2
 8002a76:	4a09      	ldr	r2, [pc, #36]	; (8002a9c <vPortFree+0xbc>)
 8002a78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002a7a:	6938      	ldr	r0, [r7, #16]
 8002a7c:	f000 f874 	bl	8002b68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002a80:	4b07      	ldr	r3, [pc, #28]	; (8002aa0 <vPortFree+0xc0>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	3301      	adds	r3, #1
 8002a86:	4a06      	ldr	r2, [pc, #24]	; (8002aa0 <vPortFree+0xc0>)
 8002a88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8002a8a:	f001 fb03 	bl	8004094 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002a8e:	bf00      	nop
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	24004360 	.word	0x24004360
 8002a9c:	24004350 	.word	0x24004350
 8002aa0:	2400435c 	.word	0x2400435c

08002aa4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002aaa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002aae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002ab0:	4b27      	ldr	r3, [pc, #156]	; (8002b50 <prvHeapInit+0xac>)
 8002ab2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00c      	beq.n	8002ad8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	3307      	adds	r3, #7
 8002ac2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f023 0307 	bic.w	r3, r3, #7
 8002aca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	4a1f      	ldr	r2, [pc, #124]	; (8002b50 <prvHeapInit+0xac>)
 8002ad4:	4413      	add	r3, r2
 8002ad6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002adc:	4a1d      	ldr	r2, [pc, #116]	; (8002b54 <prvHeapInit+0xb0>)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002ae2:	4b1c      	ldr	r3, [pc, #112]	; (8002b54 <prvHeapInit+0xb0>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	4413      	add	r3, r2
 8002aee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002af0:	2208      	movs	r2, #8
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	1a9b      	subs	r3, r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f023 0307 	bic.w	r3, r3, #7
 8002afe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4a15      	ldr	r2, [pc, #84]	; (8002b58 <prvHeapInit+0xb4>)
 8002b04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002b06:	4b14      	ldr	r3, [pc, #80]	; (8002b58 <prvHeapInit+0xb4>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002b0e:	4b12      	ldr	r3, [pc, #72]	; (8002b58 <prvHeapInit+0xb4>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	1ad2      	subs	r2, r2, r3
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002b24:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <prvHeapInit+0xb4>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	4a0a      	ldr	r2, [pc, #40]	; (8002b5c <prvHeapInit+0xb8>)
 8002b32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	4a09      	ldr	r2, [pc, #36]	; (8002b60 <prvHeapInit+0xbc>)
 8002b3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002b3c:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <prvHeapInit+0xc0>)
 8002b3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002b42:	601a      	str	r2, [r3, #0]
}
 8002b44:	bf00      	nop
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	24000744 	.word	0x24000744
 8002b54:	24004344 	.word	0x24004344
 8002b58:	2400434c 	.word	0x2400434c
 8002b5c:	24004354 	.word	0x24004354
 8002b60:	24004350 	.word	0x24004350
 8002b64:	24004360 	.word	0x24004360

08002b68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002b70:	4b28      	ldr	r3, [pc, #160]	; (8002c14 <prvInsertBlockIntoFreeList+0xac>)
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	e002      	b.n	8002b7c <prvInsertBlockIntoFreeList+0x14>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d8f7      	bhi.n	8002b76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	4413      	add	r3, r2
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d108      	bne.n	8002baa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	441a      	add	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	441a      	add	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d118      	bne.n	8002bf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	4b15      	ldr	r3, [pc, #84]	; (8002c18 <prvInsertBlockIntoFreeList+0xb0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d00d      	beq.n	8002be6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	441a      	add	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	e008      	b.n	8002bf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002be6:	4b0c      	ldr	r3, [pc, #48]	; (8002c18 <prvInsertBlockIntoFreeList+0xb0>)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	e003      	b.n	8002bf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d002      	beq.n	8002c06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c06:	bf00      	nop
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	24004344 	.word	0x24004344
 8002c18:	2400434c 	.word	0x2400434c

08002c1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f103 0208 	add.w	r2, r3, #8
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f04f 32ff 	mov.w	r2, #4294967295
 8002c34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f103 0208 	add.w	r2, r3, #8
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f103 0208 	add.w	r2, r3, #8
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c76:	b480      	push	{r7}
 8002c78:	b085      	sub	sp, #20
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
 8002c7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	1c5a      	adds	r2, r3, #1
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	601a      	str	r2, [r3, #0]
}
 8002cb2:	bf00      	nop
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b085      	sub	sp, #20
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
 8002cc6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd4:	d103      	bne.n	8002cde <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	e00c      	b.n	8002cf8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	3308      	adds	r3, #8
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	e002      	b.n	8002cec <vListInsert+0x2e>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d2f6      	bcs.n	8002ce6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	1c5a      	adds	r2, r3, #1
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	601a      	str	r2, [r3, #0]
}
 8002d24:	bf00      	nop
 8002d26:	3714      	adds	r7, #20
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6892      	ldr	r2, [r2, #8]
 8002d46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	6852      	ldr	r2, [r2, #4]
 8002d50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d103      	bne.n	8002d64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	1e5a      	subs	r2, r3, #1
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	3b04      	subs	r3, #4
 8002d94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	3b04      	subs	r3, #4
 8002da2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	f023 0201 	bic.w	r2, r3, #1
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	3b04      	subs	r3, #4
 8002db2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002db4:	4a0c      	ldr	r2, [pc, #48]	; (8002de8 <pxPortInitialiseStack+0x64>)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	3b14      	subs	r3, #20
 8002dbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	3b04      	subs	r3, #4
 8002dca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f06f 0202 	mvn.w	r2, #2
 8002dd2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	3b20      	subs	r3, #32
 8002dd8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002dda:	68fb      	ldr	r3, [r7, #12]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	08002ded 	.word	0x08002ded

08002dec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002df2:	2300      	movs	r3, #0
 8002df4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002df6:	4b12      	ldr	r3, [pc, #72]	; (8002e40 <prvTaskExitError+0x54>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfe:	d00a      	beq.n	8002e16 <prvTaskExitError+0x2a>
	__asm volatile
 8002e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e04:	f383 8811 	msr	BASEPRI, r3
 8002e08:	f3bf 8f6f 	isb	sy
 8002e0c:	f3bf 8f4f 	dsb	sy
 8002e10:	60fb      	str	r3, [r7, #12]
}
 8002e12:	bf00      	nop
 8002e14:	e7fe      	b.n	8002e14 <prvTaskExitError+0x28>
	__asm volatile
 8002e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1a:	f383 8811 	msr	BASEPRI, r3
 8002e1e:	f3bf 8f6f 	isb	sy
 8002e22:	f3bf 8f4f 	dsb	sy
 8002e26:	60bb      	str	r3, [r7, #8]
}
 8002e28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002e2a:	bf00      	nop
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0fc      	beq.n	8002e2c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002e32:	bf00      	nop
 8002e34:	bf00      	nop
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	24000010 	.word	0x24000010
	...

08002e50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002e50:	4b07      	ldr	r3, [pc, #28]	; (8002e70 <pxCurrentTCBConst2>)
 8002e52:	6819      	ldr	r1, [r3, #0]
 8002e54:	6808      	ldr	r0, [r1, #0]
 8002e56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e5a:	f380 8809 	msr	PSP, r0
 8002e5e:	f3bf 8f6f 	isb	sy
 8002e62:	f04f 0000 	mov.w	r0, #0
 8002e66:	f380 8811 	msr	BASEPRI, r0
 8002e6a:	4770      	bx	lr
 8002e6c:	f3af 8000 	nop.w

08002e70 <pxCurrentTCBConst2>:
 8002e70:	240043ac 	.word	0x240043ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002e74:	bf00      	nop
 8002e76:	bf00      	nop

08002e78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002e78:	4808      	ldr	r0, [pc, #32]	; (8002e9c <prvPortStartFirstTask+0x24>)
 8002e7a:	6800      	ldr	r0, [r0, #0]
 8002e7c:	6800      	ldr	r0, [r0, #0]
 8002e7e:	f380 8808 	msr	MSP, r0
 8002e82:	f04f 0000 	mov.w	r0, #0
 8002e86:	f380 8814 	msr	CONTROL, r0
 8002e8a:	b662      	cpsie	i
 8002e8c:	b661      	cpsie	f
 8002e8e:	f3bf 8f4f 	dsb	sy
 8002e92:	f3bf 8f6f 	isb	sy
 8002e96:	df00      	svc	0
 8002e98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002e9a:	bf00      	nop
 8002e9c:	e000ed08 	.word	0xe000ed08

08002ea0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002ea6:	4b46      	ldr	r3, [pc, #280]	; (8002fc0 <xPortStartScheduler+0x120>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a46      	ldr	r2, [pc, #280]	; (8002fc4 <xPortStartScheduler+0x124>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d10a      	bne.n	8002ec6 <xPortStartScheduler+0x26>
	__asm volatile
 8002eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb4:	f383 8811 	msr	BASEPRI, r3
 8002eb8:	f3bf 8f6f 	isb	sy
 8002ebc:	f3bf 8f4f 	dsb	sy
 8002ec0:	613b      	str	r3, [r7, #16]
}
 8002ec2:	bf00      	nop
 8002ec4:	e7fe      	b.n	8002ec4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002ec6:	4b3e      	ldr	r3, [pc, #248]	; (8002fc0 <xPortStartScheduler+0x120>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a3f      	ldr	r2, [pc, #252]	; (8002fc8 <xPortStartScheduler+0x128>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d10a      	bne.n	8002ee6 <xPortStartScheduler+0x46>
	__asm volatile
 8002ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed4:	f383 8811 	msr	BASEPRI, r3
 8002ed8:	f3bf 8f6f 	isb	sy
 8002edc:	f3bf 8f4f 	dsb	sy
 8002ee0:	60fb      	str	r3, [r7, #12]
}
 8002ee2:	bf00      	nop
 8002ee4:	e7fe      	b.n	8002ee4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002ee6:	4b39      	ldr	r3, [pc, #228]	; (8002fcc <xPortStartScheduler+0x12c>)
 8002ee8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	22ff      	movs	r2, #255	; 0xff
 8002ef6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002f00:	78fb      	ldrb	r3, [r7, #3]
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	4b31      	ldr	r3, [pc, #196]	; (8002fd0 <xPortStartScheduler+0x130>)
 8002f0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002f0e:	4b31      	ldr	r3, [pc, #196]	; (8002fd4 <xPortStartScheduler+0x134>)
 8002f10:	2207      	movs	r2, #7
 8002f12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f14:	e009      	b.n	8002f2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002f16:	4b2f      	ldr	r3, [pc, #188]	; (8002fd4 <xPortStartScheduler+0x134>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	4a2d      	ldr	r2, [pc, #180]	; (8002fd4 <xPortStartScheduler+0x134>)
 8002f1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002f20:	78fb      	ldrb	r3, [r7, #3]
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f2a:	78fb      	ldrb	r3, [r7, #3]
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f32:	2b80      	cmp	r3, #128	; 0x80
 8002f34:	d0ef      	beq.n	8002f16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002f36:	4b27      	ldr	r3, [pc, #156]	; (8002fd4 <xPortStartScheduler+0x134>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f1c3 0307 	rsb	r3, r3, #7
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d00a      	beq.n	8002f58 <xPortStartScheduler+0xb8>
	__asm volatile
 8002f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f46:	f383 8811 	msr	BASEPRI, r3
 8002f4a:	f3bf 8f6f 	isb	sy
 8002f4e:	f3bf 8f4f 	dsb	sy
 8002f52:	60bb      	str	r3, [r7, #8]
}
 8002f54:	bf00      	nop
 8002f56:	e7fe      	b.n	8002f56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002f58:	4b1e      	ldr	r3, [pc, #120]	; (8002fd4 <xPortStartScheduler+0x134>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	021b      	lsls	r3, r3, #8
 8002f5e:	4a1d      	ldr	r2, [pc, #116]	; (8002fd4 <xPortStartScheduler+0x134>)
 8002f60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002f62:	4b1c      	ldr	r3, [pc, #112]	; (8002fd4 <xPortStartScheduler+0x134>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f6a:	4a1a      	ldr	r2, [pc, #104]	; (8002fd4 <xPortStartScheduler+0x134>)
 8002f6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002f76:	4b18      	ldr	r3, [pc, #96]	; (8002fd8 <xPortStartScheduler+0x138>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a17      	ldr	r2, [pc, #92]	; (8002fd8 <xPortStartScheduler+0x138>)
 8002f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002f82:	4b15      	ldr	r3, [pc, #84]	; (8002fd8 <xPortStartScheduler+0x138>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a14      	ldr	r2, [pc, #80]	; (8002fd8 <xPortStartScheduler+0x138>)
 8002f88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002f8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002f8e:	f000 f8dd 	bl	800314c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002f92:	4b12      	ldr	r3, [pc, #72]	; (8002fdc <xPortStartScheduler+0x13c>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002f98:	f000 f8fc 	bl	8003194 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002f9c:	4b10      	ldr	r3, [pc, #64]	; (8002fe0 <xPortStartScheduler+0x140>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a0f      	ldr	r2, [pc, #60]	; (8002fe0 <xPortStartScheduler+0x140>)
 8002fa2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002fa6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002fa8:	f7ff ff66 	bl	8002e78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002fac:	f001 f9da 	bl	8004364 <vTaskSwitchContext>
	prvTaskExitError();
 8002fb0:	f7ff ff1c 	bl	8002dec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3718      	adds	r7, #24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	e000ed00 	.word	0xe000ed00
 8002fc4:	410fc271 	.word	0x410fc271
 8002fc8:	410fc270 	.word	0x410fc270
 8002fcc:	e000e400 	.word	0xe000e400
 8002fd0:	24004364 	.word	0x24004364
 8002fd4:	24004368 	.word	0x24004368
 8002fd8:	e000ed20 	.word	0xe000ed20
 8002fdc:	24000010 	.word	0x24000010
 8002fe0:	e000ef34 	.word	0xe000ef34

08002fe4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
	__asm volatile
 8002fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fee:	f383 8811 	msr	BASEPRI, r3
 8002ff2:	f3bf 8f6f 	isb	sy
 8002ff6:	f3bf 8f4f 	dsb	sy
 8002ffa:	607b      	str	r3, [r7, #4]
}
 8002ffc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002ffe:	4b0f      	ldr	r3, [pc, #60]	; (800303c <vPortEnterCritical+0x58>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	3301      	adds	r3, #1
 8003004:	4a0d      	ldr	r2, [pc, #52]	; (800303c <vPortEnterCritical+0x58>)
 8003006:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003008:	4b0c      	ldr	r3, [pc, #48]	; (800303c <vPortEnterCritical+0x58>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d10f      	bne.n	8003030 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003010:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <vPortEnterCritical+0x5c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00a      	beq.n	8003030 <vPortEnterCritical+0x4c>
	__asm volatile
 800301a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800301e:	f383 8811 	msr	BASEPRI, r3
 8003022:	f3bf 8f6f 	isb	sy
 8003026:	f3bf 8f4f 	dsb	sy
 800302a:	603b      	str	r3, [r7, #0]
}
 800302c:	bf00      	nop
 800302e:	e7fe      	b.n	800302e <vPortEnterCritical+0x4a>
	}
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	24000010 	.word	0x24000010
 8003040:	e000ed04 	.word	0xe000ed04

08003044 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800304a:	4b12      	ldr	r3, [pc, #72]	; (8003094 <vPortExitCritical+0x50>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10a      	bne.n	8003068 <vPortExitCritical+0x24>
	__asm volatile
 8003052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003056:	f383 8811 	msr	BASEPRI, r3
 800305a:	f3bf 8f6f 	isb	sy
 800305e:	f3bf 8f4f 	dsb	sy
 8003062:	607b      	str	r3, [r7, #4]
}
 8003064:	bf00      	nop
 8003066:	e7fe      	b.n	8003066 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003068:	4b0a      	ldr	r3, [pc, #40]	; (8003094 <vPortExitCritical+0x50>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	3b01      	subs	r3, #1
 800306e:	4a09      	ldr	r2, [pc, #36]	; (8003094 <vPortExitCritical+0x50>)
 8003070:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003072:	4b08      	ldr	r3, [pc, #32]	; (8003094 <vPortExitCritical+0x50>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d105      	bne.n	8003086 <vPortExitCritical+0x42>
 800307a:	2300      	movs	r3, #0
 800307c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003084:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	24000010 	.word	0x24000010
	...

080030a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80030a0:	f3ef 8009 	mrs	r0, PSP
 80030a4:	f3bf 8f6f 	isb	sy
 80030a8:	4b15      	ldr	r3, [pc, #84]	; (8003100 <pxCurrentTCBConst>)
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	f01e 0f10 	tst.w	lr, #16
 80030b0:	bf08      	it	eq
 80030b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80030b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030ba:	6010      	str	r0, [r2, #0]
 80030bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80030c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80030c4:	f380 8811 	msr	BASEPRI, r0
 80030c8:	f3bf 8f4f 	dsb	sy
 80030cc:	f3bf 8f6f 	isb	sy
 80030d0:	f001 f948 	bl	8004364 <vTaskSwitchContext>
 80030d4:	f04f 0000 	mov.w	r0, #0
 80030d8:	f380 8811 	msr	BASEPRI, r0
 80030dc:	bc09      	pop	{r0, r3}
 80030de:	6819      	ldr	r1, [r3, #0]
 80030e0:	6808      	ldr	r0, [r1, #0]
 80030e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030e6:	f01e 0f10 	tst.w	lr, #16
 80030ea:	bf08      	it	eq
 80030ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80030f0:	f380 8809 	msr	PSP, r0
 80030f4:	f3bf 8f6f 	isb	sy
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	f3af 8000 	nop.w

08003100 <pxCurrentTCBConst>:
 8003100:	240043ac 	.word	0x240043ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003104:	bf00      	nop
 8003106:	bf00      	nop

08003108 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
	__asm volatile
 800310e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003112:	f383 8811 	msr	BASEPRI, r3
 8003116:	f3bf 8f6f 	isb	sy
 800311a:	f3bf 8f4f 	dsb	sy
 800311e:	607b      	str	r3, [r7, #4]
}
 8003120:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003122:	f001 f865 	bl	80041f0 <xTaskIncrementTick>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800312c:	4b06      	ldr	r3, [pc, #24]	; (8003148 <xPortSysTickHandler+0x40>)
 800312e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	2300      	movs	r3, #0
 8003136:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	f383 8811 	msr	BASEPRI, r3
}
 800313e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003140:	bf00      	nop
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	e000ed04 	.word	0xe000ed04

0800314c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003150:	4b0b      	ldr	r3, [pc, #44]	; (8003180 <vPortSetupTimerInterrupt+0x34>)
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003156:	4b0b      	ldr	r3, [pc, #44]	; (8003184 <vPortSetupTimerInterrupt+0x38>)
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800315c:	4b0a      	ldr	r3, [pc, #40]	; (8003188 <vPortSetupTimerInterrupt+0x3c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a0a      	ldr	r2, [pc, #40]	; (800318c <vPortSetupTimerInterrupt+0x40>)
 8003162:	fba2 2303 	umull	r2, r3, r2, r3
 8003166:	099b      	lsrs	r3, r3, #6
 8003168:	4a09      	ldr	r2, [pc, #36]	; (8003190 <vPortSetupTimerInterrupt+0x44>)
 800316a:	3b01      	subs	r3, #1
 800316c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800316e:	4b04      	ldr	r3, [pc, #16]	; (8003180 <vPortSetupTimerInterrupt+0x34>)
 8003170:	2207      	movs	r2, #7
 8003172:	601a      	str	r2, [r3, #0]
}
 8003174:	bf00      	nop
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	e000e010 	.word	0xe000e010
 8003184:	e000e018 	.word	0xe000e018
 8003188:	24000000 	.word	0x24000000
 800318c:	10624dd3 	.word	0x10624dd3
 8003190:	e000e014 	.word	0xe000e014

08003194 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003194:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80031a4 <vPortEnableVFP+0x10>
 8003198:	6801      	ldr	r1, [r0, #0]
 800319a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800319e:	6001      	str	r1, [r0, #0]
 80031a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80031a2:	bf00      	nop
 80031a4:	e000ed88 	.word	0xe000ed88

080031a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80031ae:	f3ef 8305 	mrs	r3, IPSR
 80031b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2b0f      	cmp	r3, #15
 80031b8:	d914      	bls.n	80031e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80031ba:	4a17      	ldr	r2, [pc, #92]	; (8003218 <vPortValidateInterruptPriority+0x70>)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4413      	add	r3, r2
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80031c4:	4b15      	ldr	r3, [pc, #84]	; (800321c <vPortValidateInterruptPriority+0x74>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	7afa      	ldrb	r2, [r7, #11]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d20a      	bcs.n	80031e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80031ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d2:	f383 8811 	msr	BASEPRI, r3
 80031d6:	f3bf 8f6f 	isb	sy
 80031da:	f3bf 8f4f 	dsb	sy
 80031de:	607b      	str	r3, [r7, #4]
}
 80031e0:	bf00      	nop
 80031e2:	e7fe      	b.n	80031e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80031e4:	4b0e      	ldr	r3, [pc, #56]	; (8003220 <vPortValidateInterruptPriority+0x78>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80031ec:	4b0d      	ldr	r3, [pc, #52]	; (8003224 <vPortValidateInterruptPriority+0x7c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d90a      	bls.n	800320a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80031f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f8:	f383 8811 	msr	BASEPRI, r3
 80031fc:	f3bf 8f6f 	isb	sy
 8003200:	f3bf 8f4f 	dsb	sy
 8003204:	603b      	str	r3, [r7, #0]
}
 8003206:	bf00      	nop
 8003208:	e7fe      	b.n	8003208 <vPortValidateInterruptPriority+0x60>
	}
 800320a:	bf00      	nop
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	e000e3f0 	.word	0xe000e3f0
 800321c:	24004364 	.word	0x24004364
 8003220:	e000ed0c 	.word	0xe000ed0c
 8003224:	24004368 	.word	0x24004368

08003228 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10a      	bne.n	8003252 <xQueueGenericReset+0x2a>
	__asm volatile
 800323c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003240:	f383 8811 	msr	BASEPRI, r3
 8003244:	f3bf 8f6f 	isb	sy
 8003248:	f3bf 8f4f 	dsb	sy
 800324c:	60bb      	str	r3, [r7, #8]
}
 800324e:	bf00      	nop
 8003250:	e7fe      	b.n	8003250 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003252:	f7ff fec7 	bl	8002fe4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325e:	68f9      	ldr	r1, [r7, #12]
 8003260:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003262:	fb01 f303 	mul.w	r3, r1, r3
 8003266:	441a      	add	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003282:	3b01      	subs	r3, #1
 8003284:	68f9      	ldr	r1, [r7, #12]
 8003286:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003288:	fb01 f303 	mul.w	r3, r1, r3
 800328c:	441a      	add	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	22ff      	movs	r2, #255	; 0xff
 8003296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	22ff      	movs	r2, #255	; 0xff
 800329e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d114      	bne.n	80032d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d01a      	beq.n	80032e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	3310      	adds	r3, #16
 80032b4:	4618      	mov	r0, r3
 80032b6:	f001 f903 	bl	80044c0 <xTaskRemoveFromEventList>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d012      	beq.n	80032e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80032c0:	4b0c      	ldr	r3, [pc, #48]	; (80032f4 <xQueueGenericReset+0xcc>)
 80032c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	f3bf 8f4f 	dsb	sy
 80032cc:	f3bf 8f6f 	isb	sy
 80032d0:	e009      	b.n	80032e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	3310      	adds	r3, #16
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff fca0 	bl	8002c1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	3324      	adds	r3, #36	; 0x24
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff fc9b 	bl	8002c1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80032e6:	f7ff fead 	bl	8003044 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80032ea:	2301      	movs	r3, #1
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	e000ed04 	.word	0xe000ed04

080032f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08e      	sub	sp, #56	; 0x38
 80032fc:	af02      	add	r7, sp, #8
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
 8003304:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10a      	bne.n	8003322 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800330c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003310:	f383 8811 	msr	BASEPRI, r3
 8003314:	f3bf 8f6f 	isb	sy
 8003318:	f3bf 8f4f 	dsb	sy
 800331c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800331e:	bf00      	nop
 8003320:	e7fe      	b.n	8003320 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10a      	bne.n	800333e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332c:	f383 8811 	msr	BASEPRI, r3
 8003330:	f3bf 8f6f 	isb	sy
 8003334:	f3bf 8f4f 	dsb	sy
 8003338:	627b      	str	r3, [r7, #36]	; 0x24
}
 800333a:	bf00      	nop
 800333c:	e7fe      	b.n	800333c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d002      	beq.n	800334a <xQueueGenericCreateStatic+0x52>
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <xQueueGenericCreateStatic+0x56>
 800334a:	2301      	movs	r3, #1
 800334c:	e000      	b.n	8003350 <xQueueGenericCreateStatic+0x58>
 800334e:	2300      	movs	r3, #0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10a      	bne.n	800336a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003358:	f383 8811 	msr	BASEPRI, r3
 800335c:	f3bf 8f6f 	isb	sy
 8003360:	f3bf 8f4f 	dsb	sy
 8003364:	623b      	str	r3, [r7, #32]
}
 8003366:	bf00      	nop
 8003368:	e7fe      	b.n	8003368 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d102      	bne.n	8003376 <xQueueGenericCreateStatic+0x7e>
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <xQueueGenericCreateStatic+0x82>
 8003376:	2301      	movs	r3, #1
 8003378:	e000      	b.n	800337c <xQueueGenericCreateStatic+0x84>
 800337a:	2300      	movs	r3, #0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10a      	bne.n	8003396 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003384:	f383 8811 	msr	BASEPRI, r3
 8003388:	f3bf 8f6f 	isb	sy
 800338c:	f3bf 8f4f 	dsb	sy
 8003390:	61fb      	str	r3, [r7, #28]
}
 8003392:	bf00      	nop
 8003394:	e7fe      	b.n	8003394 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003396:	2350      	movs	r3, #80	; 0x50
 8003398:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2b50      	cmp	r3, #80	; 0x50
 800339e:	d00a      	beq.n	80033b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80033a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a4:	f383 8811 	msr	BASEPRI, r3
 80033a8:	f3bf 8f6f 	isb	sy
 80033ac:	f3bf 8f4f 	dsb	sy
 80033b0:	61bb      	str	r3, [r7, #24]
}
 80033b2:	bf00      	nop
 80033b4:	e7fe      	b.n	80033b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80033b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80033bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00d      	beq.n	80033de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80033c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80033ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80033ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d0:	9300      	str	r3, [sp, #0]
 80033d2:	4613      	mov	r3, r2
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	68b9      	ldr	r1, [r7, #8]
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f000 f805 	bl	80033e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80033de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3730      	adds	r7, #48	; 0x30
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
 80033f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d103      	bne.n	8003404 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	e002      	b.n	800340a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003416:	2101      	movs	r1, #1
 8003418:	69b8      	ldr	r0, [r7, #24]
 800341a:	f7ff ff05 	bl	8003228 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	78fa      	ldrb	r2, [r7, #3]
 8003422:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003426:	bf00      	nop
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
	...

08003430 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b08e      	sub	sp, #56	; 0x38
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
 800343c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800343e:	2300      	movs	r3, #0
 8003440:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10a      	bne.n	8003462 <xQueueGenericSend+0x32>
	__asm volatile
 800344c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003450:	f383 8811 	msr	BASEPRI, r3
 8003454:	f3bf 8f6f 	isb	sy
 8003458:	f3bf 8f4f 	dsb	sy
 800345c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800345e:	bf00      	nop
 8003460:	e7fe      	b.n	8003460 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d103      	bne.n	8003470 <xQueueGenericSend+0x40>
 8003468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	2b00      	cmp	r3, #0
 800346e:	d101      	bne.n	8003474 <xQueueGenericSend+0x44>
 8003470:	2301      	movs	r3, #1
 8003472:	e000      	b.n	8003476 <xQueueGenericSend+0x46>
 8003474:	2300      	movs	r3, #0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10a      	bne.n	8003490 <xQueueGenericSend+0x60>
	__asm volatile
 800347a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800347e:	f383 8811 	msr	BASEPRI, r3
 8003482:	f3bf 8f6f 	isb	sy
 8003486:	f3bf 8f4f 	dsb	sy
 800348a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800348c:	bf00      	nop
 800348e:	e7fe      	b.n	800348e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	2b02      	cmp	r3, #2
 8003494:	d103      	bne.n	800349e <xQueueGenericSend+0x6e>
 8003496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349a:	2b01      	cmp	r3, #1
 800349c:	d101      	bne.n	80034a2 <xQueueGenericSend+0x72>
 800349e:	2301      	movs	r3, #1
 80034a0:	e000      	b.n	80034a4 <xQueueGenericSend+0x74>
 80034a2:	2300      	movs	r3, #0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10a      	bne.n	80034be <xQueueGenericSend+0x8e>
	__asm volatile
 80034a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ac:	f383 8811 	msr	BASEPRI, r3
 80034b0:	f3bf 8f6f 	isb	sy
 80034b4:	f3bf 8f4f 	dsb	sy
 80034b8:	623b      	str	r3, [r7, #32]
}
 80034ba:	bf00      	nop
 80034bc:	e7fe      	b.n	80034bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034be:	f001 f9bd 	bl	800483c <xTaskGetSchedulerState>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d102      	bne.n	80034ce <xQueueGenericSend+0x9e>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <xQueueGenericSend+0xa2>
 80034ce:	2301      	movs	r3, #1
 80034d0:	e000      	b.n	80034d4 <xQueueGenericSend+0xa4>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10a      	bne.n	80034ee <xQueueGenericSend+0xbe>
	__asm volatile
 80034d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034dc:	f383 8811 	msr	BASEPRI, r3
 80034e0:	f3bf 8f6f 	isb	sy
 80034e4:	f3bf 8f4f 	dsb	sy
 80034e8:	61fb      	str	r3, [r7, #28]
}
 80034ea:	bf00      	nop
 80034ec:	e7fe      	b.n	80034ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80034ee:	f7ff fd79 	bl	8002fe4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80034f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d302      	bcc.n	8003504 <xQueueGenericSend+0xd4>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b02      	cmp	r3, #2
 8003502:	d129      	bne.n	8003558 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	68b9      	ldr	r1, [r7, #8]
 8003508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800350a:	f000 fa0b 	bl	8003924 <prvCopyDataToQueue>
 800350e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	2b00      	cmp	r3, #0
 8003516:	d010      	beq.n	800353a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351a:	3324      	adds	r3, #36	; 0x24
 800351c:	4618      	mov	r0, r3
 800351e:	f000 ffcf 	bl	80044c0 <xTaskRemoveFromEventList>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d013      	beq.n	8003550 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003528:	4b3f      	ldr	r3, [pc, #252]	; (8003628 <xQueueGenericSend+0x1f8>)
 800352a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	f3bf 8f4f 	dsb	sy
 8003534:	f3bf 8f6f 	isb	sy
 8003538:	e00a      	b.n	8003550 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800353a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800353c:	2b00      	cmp	r3, #0
 800353e:	d007      	beq.n	8003550 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003540:	4b39      	ldr	r3, [pc, #228]	; (8003628 <xQueueGenericSend+0x1f8>)
 8003542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	f3bf 8f4f 	dsb	sy
 800354c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003550:	f7ff fd78 	bl	8003044 <vPortExitCritical>
				return pdPASS;
 8003554:	2301      	movs	r3, #1
 8003556:	e063      	b.n	8003620 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d103      	bne.n	8003566 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800355e:	f7ff fd71 	bl	8003044 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003562:	2300      	movs	r3, #0
 8003564:	e05c      	b.n	8003620 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003568:	2b00      	cmp	r3, #0
 800356a:	d106      	bne.n	800357a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800356c:	f107 0314 	add.w	r3, r7, #20
 8003570:	4618      	mov	r0, r3
 8003572:	f001 f809 	bl	8004588 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003576:	2301      	movs	r3, #1
 8003578:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800357a:	f7ff fd63 	bl	8003044 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800357e:	f000 fd7b 	bl	8004078 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003582:	f7ff fd2f 	bl	8002fe4 <vPortEnterCritical>
 8003586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003588:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800358c:	b25b      	sxtb	r3, r3
 800358e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003592:	d103      	bne.n	800359c <xQueueGenericSend+0x16c>
 8003594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003596:	2200      	movs	r2, #0
 8003598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800359c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035a2:	b25b      	sxtb	r3, r3
 80035a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a8:	d103      	bne.n	80035b2 <xQueueGenericSend+0x182>
 80035aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035b2:	f7ff fd47 	bl	8003044 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035b6:	1d3a      	adds	r2, r7, #4
 80035b8:	f107 0314 	add.w	r3, r7, #20
 80035bc:	4611      	mov	r1, r2
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 fff8 	bl	80045b4 <xTaskCheckForTimeOut>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d124      	bne.n	8003614 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80035ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035cc:	f000 faa2 	bl	8003b14 <prvIsQueueFull>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d018      	beq.n	8003608 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80035d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d8:	3310      	adds	r3, #16
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	4611      	mov	r1, r2
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 ff1e 	bl	8004420 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80035e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035e6:	f000 fa2d 	bl	8003a44 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80035ea:	f000 fd53 	bl	8004094 <xTaskResumeAll>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f47f af7c 	bne.w	80034ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80035f6:	4b0c      	ldr	r3, [pc, #48]	; (8003628 <xQueueGenericSend+0x1f8>)
 80035f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	f3bf 8f4f 	dsb	sy
 8003602:	f3bf 8f6f 	isb	sy
 8003606:	e772      	b.n	80034ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003608:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800360a:	f000 fa1b 	bl	8003a44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800360e:	f000 fd41 	bl	8004094 <xTaskResumeAll>
 8003612:	e76c      	b.n	80034ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003614:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003616:	f000 fa15 	bl	8003a44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800361a:	f000 fd3b 	bl	8004094 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800361e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003620:	4618      	mov	r0, r3
 8003622:	3738      	adds	r7, #56	; 0x38
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	e000ed04 	.word	0xe000ed04

0800362c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b090      	sub	sp, #64	; 0x40
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
 8003638:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800363e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10a      	bne.n	800365a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003648:	f383 8811 	msr	BASEPRI, r3
 800364c:	f3bf 8f6f 	isb	sy
 8003650:	f3bf 8f4f 	dsb	sy
 8003654:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003656:	bf00      	nop
 8003658:	e7fe      	b.n	8003658 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d103      	bne.n	8003668 <xQueueGenericSendFromISR+0x3c>
 8003660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <xQueueGenericSendFromISR+0x40>
 8003668:	2301      	movs	r3, #1
 800366a:	e000      	b.n	800366e <xQueueGenericSendFromISR+0x42>
 800366c:	2300      	movs	r3, #0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10a      	bne.n	8003688 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003676:	f383 8811 	msr	BASEPRI, r3
 800367a:	f3bf 8f6f 	isb	sy
 800367e:	f3bf 8f4f 	dsb	sy
 8003682:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003684:	bf00      	nop
 8003686:	e7fe      	b.n	8003686 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	2b02      	cmp	r3, #2
 800368c:	d103      	bne.n	8003696 <xQueueGenericSendFromISR+0x6a>
 800368e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003692:	2b01      	cmp	r3, #1
 8003694:	d101      	bne.n	800369a <xQueueGenericSendFromISR+0x6e>
 8003696:	2301      	movs	r3, #1
 8003698:	e000      	b.n	800369c <xQueueGenericSendFromISR+0x70>
 800369a:	2300      	movs	r3, #0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10a      	bne.n	80036b6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80036a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a4:	f383 8811 	msr	BASEPRI, r3
 80036a8:	f3bf 8f6f 	isb	sy
 80036ac:	f3bf 8f4f 	dsb	sy
 80036b0:	623b      	str	r3, [r7, #32]
}
 80036b2:	bf00      	nop
 80036b4:	e7fe      	b.n	80036b4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036b6:	f7ff fd77 	bl	80031a8 <vPortValidateInterruptPriority>
	__asm volatile
 80036ba:	f3ef 8211 	mrs	r2, BASEPRI
 80036be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c2:	f383 8811 	msr	BASEPRI, r3
 80036c6:	f3bf 8f6f 	isb	sy
 80036ca:	f3bf 8f4f 	dsb	sy
 80036ce:	61fa      	str	r2, [r7, #28]
 80036d0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80036d2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80036d4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036de:	429a      	cmp	r2, r3
 80036e0:	d302      	bcc.n	80036e8 <xQueueGenericSendFromISR+0xbc>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d12f      	bne.n	8003748 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80036e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	68b9      	ldr	r1, [r7, #8]
 80036fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80036fe:	f000 f911 	bl	8003924 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003702:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370a:	d112      	bne.n	8003732 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800370c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	2b00      	cmp	r3, #0
 8003712:	d016      	beq.n	8003742 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003716:	3324      	adds	r3, #36	; 0x24
 8003718:	4618      	mov	r0, r3
 800371a:	f000 fed1 	bl	80044c0 <xTaskRemoveFromEventList>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00e      	beq.n	8003742 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00b      	beq.n	8003742 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	e007      	b.n	8003742 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003732:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003736:	3301      	adds	r3, #1
 8003738:	b2db      	uxtb	r3, r3
 800373a:	b25a      	sxtb	r2, r3
 800373c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800373e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003742:	2301      	movs	r3, #1
 8003744:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003746:	e001      	b.n	800374c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003748:	2300      	movs	r3, #0
 800374a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800374c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800374e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	f383 8811 	msr	BASEPRI, r3
}
 8003756:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800375a:	4618      	mov	r0, r3
 800375c:	3740      	adds	r7, #64	; 0x40
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
	...

08003764 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b08c      	sub	sp, #48	; 0x30
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003770:	2300      	movs	r3, #0
 8003772:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10a      	bne.n	8003794 <xQueueReceive+0x30>
	__asm volatile
 800377e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003782:	f383 8811 	msr	BASEPRI, r3
 8003786:	f3bf 8f6f 	isb	sy
 800378a:	f3bf 8f4f 	dsb	sy
 800378e:	623b      	str	r3, [r7, #32]
}
 8003790:	bf00      	nop
 8003792:	e7fe      	b.n	8003792 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d103      	bne.n	80037a2 <xQueueReceive+0x3e>
 800379a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <xQueueReceive+0x42>
 80037a2:	2301      	movs	r3, #1
 80037a4:	e000      	b.n	80037a8 <xQueueReceive+0x44>
 80037a6:	2300      	movs	r3, #0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10a      	bne.n	80037c2 <xQueueReceive+0x5e>
	__asm volatile
 80037ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b0:	f383 8811 	msr	BASEPRI, r3
 80037b4:	f3bf 8f6f 	isb	sy
 80037b8:	f3bf 8f4f 	dsb	sy
 80037bc:	61fb      	str	r3, [r7, #28]
}
 80037be:	bf00      	nop
 80037c0:	e7fe      	b.n	80037c0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037c2:	f001 f83b 	bl	800483c <xTaskGetSchedulerState>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d102      	bne.n	80037d2 <xQueueReceive+0x6e>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <xQueueReceive+0x72>
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <xQueueReceive+0x74>
 80037d6:	2300      	movs	r3, #0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10a      	bne.n	80037f2 <xQueueReceive+0x8e>
	__asm volatile
 80037dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e0:	f383 8811 	msr	BASEPRI, r3
 80037e4:	f3bf 8f6f 	isb	sy
 80037e8:	f3bf 8f4f 	dsb	sy
 80037ec:	61bb      	str	r3, [r7, #24]
}
 80037ee:	bf00      	nop
 80037f0:	e7fe      	b.n	80037f0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80037f2:	f7ff fbf7 	bl	8002fe4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d01f      	beq.n	8003842 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003802:	68b9      	ldr	r1, [r7, #8]
 8003804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003806:	f000 f8f7 	bl	80039f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	1e5a      	subs	r2, r3, #1
 800380e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003810:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00f      	beq.n	800383a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800381a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381c:	3310      	adds	r3, #16
 800381e:	4618      	mov	r0, r3
 8003820:	f000 fe4e 	bl	80044c0 <xTaskRemoveFromEventList>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d007      	beq.n	800383a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800382a:	4b3d      	ldr	r3, [pc, #244]	; (8003920 <xQueueReceive+0x1bc>)
 800382c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	f3bf 8f4f 	dsb	sy
 8003836:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800383a:	f7ff fc03 	bl	8003044 <vPortExitCritical>
				return pdPASS;
 800383e:	2301      	movs	r3, #1
 8003840:	e069      	b.n	8003916 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d103      	bne.n	8003850 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003848:	f7ff fbfc 	bl	8003044 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800384c:	2300      	movs	r3, #0
 800384e:	e062      	b.n	8003916 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003852:	2b00      	cmp	r3, #0
 8003854:	d106      	bne.n	8003864 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003856:	f107 0310 	add.w	r3, r7, #16
 800385a:	4618      	mov	r0, r3
 800385c:	f000 fe94 	bl	8004588 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003860:	2301      	movs	r3, #1
 8003862:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003864:	f7ff fbee 	bl	8003044 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003868:	f000 fc06 	bl	8004078 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800386c:	f7ff fbba 	bl	8002fe4 <vPortEnterCritical>
 8003870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003872:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003876:	b25b      	sxtb	r3, r3
 8003878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800387c:	d103      	bne.n	8003886 <xQueueReceive+0x122>
 800387e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003888:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800388c:	b25b      	sxtb	r3, r3
 800388e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003892:	d103      	bne.n	800389c <xQueueReceive+0x138>
 8003894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800389c:	f7ff fbd2 	bl	8003044 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038a0:	1d3a      	adds	r2, r7, #4
 80038a2:	f107 0310 	add.w	r3, r7, #16
 80038a6:	4611      	mov	r1, r2
 80038a8:	4618      	mov	r0, r3
 80038aa:	f000 fe83 	bl	80045b4 <xTaskCheckForTimeOut>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d123      	bne.n	80038fc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038b6:	f000 f917 	bl	8003ae8 <prvIsQueueEmpty>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d017      	beq.n	80038f0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80038c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c2:	3324      	adds	r3, #36	; 0x24
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	4611      	mov	r1, r2
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 fda9 	bl	8004420 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80038ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038d0:	f000 f8b8 	bl	8003a44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80038d4:	f000 fbde 	bl	8004094 <xTaskResumeAll>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d189      	bne.n	80037f2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80038de:	4b10      	ldr	r3, [pc, #64]	; (8003920 <xQueueReceive+0x1bc>)
 80038e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	f3bf 8f4f 	dsb	sy
 80038ea:	f3bf 8f6f 	isb	sy
 80038ee:	e780      	b.n	80037f2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80038f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038f2:	f000 f8a7 	bl	8003a44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038f6:	f000 fbcd 	bl	8004094 <xTaskResumeAll>
 80038fa:	e77a      	b.n	80037f2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80038fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038fe:	f000 f8a1 	bl	8003a44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003902:	f000 fbc7 	bl	8004094 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003906:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003908:	f000 f8ee 	bl	8003ae8 <prvIsQueueEmpty>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	f43f af6f 	beq.w	80037f2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003914:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003916:	4618      	mov	r0, r3
 8003918:	3730      	adds	r7, #48	; 0x30
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	e000ed04 	.word	0xe000ed04

08003924 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003930:	2300      	movs	r3, #0
 8003932:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003938:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10d      	bne.n	800395e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d14d      	bne.n	80039e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	4618      	mov	r0, r3
 8003950:	f000 ff92 	bl	8004878 <xTaskPriorityDisinherit>
 8003954:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	609a      	str	r2, [r3, #8]
 800395c:	e043      	b.n	80039e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d119      	bne.n	8003998 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6858      	ldr	r0, [r3, #4]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396c:	461a      	mov	r2, r3
 800396e:	68b9      	ldr	r1, [r7, #8]
 8003970:	f001 fbb6 	bl	80050e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397c:	441a      	add	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	429a      	cmp	r2, r3
 800398c:	d32b      	bcc.n	80039e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	605a      	str	r2, [r3, #4]
 8003996:	e026      	b.n	80039e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	68d8      	ldr	r0, [r3, #12]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a0:	461a      	mov	r2, r3
 80039a2:	68b9      	ldr	r1, [r7, #8]
 80039a4:	f001 fb9c 	bl	80050e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	68da      	ldr	r2, [r3, #12]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b0:	425b      	negs	r3, r3
 80039b2:	441a      	add	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	68da      	ldr	r2, [r3, #12]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d207      	bcs.n	80039d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039cc:	425b      	negs	r3, r3
 80039ce:	441a      	add	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d105      	bne.n	80039e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d002      	beq.n	80039e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	3b01      	subs	r3, #1
 80039e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1c5a      	adds	r2, r3, #1
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80039ee:	697b      	ldr	r3, [r7, #20]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3718      	adds	r7, #24
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d018      	beq.n	8003a3c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68da      	ldr	r2, [r3, #12]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	441a      	add	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d303      	bcc.n	8003a2c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68d9      	ldr	r1, [r3, #12]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a34:	461a      	mov	r2, r3
 8003a36:	6838      	ldr	r0, [r7, #0]
 8003a38:	f001 fb52 	bl	80050e0 <memcpy>
	}
}
 8003a3c:	bf00      	nop
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003a4c:	f7ff faca 	bl	8002fe4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a56:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a58:	e011      	b.n	8003a7e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d012      	beq.n	8003a88 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	3324      	adds	r3, #36	; 0x24
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 fd2a 	bl	80044c0 <xTaskRemoveFromEventList>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003a72:	f000 fe01 	bl	8004678 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003a76:	7bfb      	ldrb	r3, [r7, #15]
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	dce9      	bgt.n	8003a5a <prvUnlockQueue+0x16>
 8003a86:	e000      	b.n	8003a8a <prvUnlockQueue+0x46>
					break;
 8003a88:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	22ff      	movs	r2, #255	; 0xff
 8003a8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003a92:	f7ff fad7 	bl	8003044 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003a96:	f7ff faa5 	bl	8002fe4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003aa0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003aa2:	e011      	b.n	8003ac8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d012      	beq.n	8003ad2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	3310      	adds	r3, #16
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 fd05 	bl	80044c0 <xTaskRemoveFromEventList>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003abc:	f000 fddc 	bl	8004678 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003ac0:	7bbb      	ldrb	r3, [r7, #14]
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ac8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	dce9      	bgt.n	8003aa4 <prvUnlockQueue+0x60>
 8003ad0:	e000      	b.n	8003ad4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003ad2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	22ff      	movs	r2, #255	; 0xff
 8003ad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003adc:	f7ff fab2 	bl	8003044 <vPortExitCritical>
}
 8003ae0:	bf00      	nop
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003af0:	f7ff fa78 	bl	8002fe4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d102      	bne.n	8003b02 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003afc:	2301      	movs	r3, #1
 8003afe:	60fb      	str	r3, [r7, #12]
 8003b00:	e001      	b.n	8003b06 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003b02:	2300      	movs	r3, #0
 8003b04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b06:	f7ff fa9d 	bl	8003044 <vPortExitCritical>

	return xReturn;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b1c:	f7ff fa62 	bl	8002fe4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d102      	bne.n	8003b32 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	e001      	b.n	8003b36 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003b32:	2300      	movs	r3, #0
 8003b34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b36:	f7ff fa85 	bl	8003044 <vPortExitCritical>

	return xReturn;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	e014      	b.n	8003b7e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003b54:	4a0f      	ldr	r2, [pc, #60]	; (8003b94 <vQueueAddToRegistry+0x50>)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10b      	bne.n	8003b78 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003b60:	490c      	ldr	r1, [pc, #48]	; (8003b94 <vQueueAddToRegistry+0x50>)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003b6a:	4a0a      	ldr	r2, [pc, #40]	; (8003b94 <vQueueAddToRegistry+0x50>)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	4413      	add	r3, r2
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003b76:	e006      	b.n	8003b86 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	60fb      	str	r3, [r7, #12]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2b07      	cmp	r3, #7
 8003b82:	d9e7      	bls.n	8003b54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003b84:	bf00      	nop
 8003b86:	bf00      	nop
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	2400436c 	.word	0x2400436c

08003b98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003ba8:	f7ff fa1c 	bl	8002fe4 <vPortEnterCritical>
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bb2:	b25b      	sxtb	r3, r3
 8003bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb8:	d103      	bne.n	8003bc2 <vQueueWaitForMessageRestricted+0x2a>
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bc8:	b25b      	sxtb	r3, r3
 8003bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bce:	d103      	bne.n	8003bd8 <vQueueWaitForMessageRestricted+0x40>
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bd8:	f7ff fa34 	bl	8003044 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d106      	bne.n	8003bf2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	3324      	adds	r3, #36	; 0x24
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	68b9      	ldr	r1, [r7, #8]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 fc3b 	bl	8004468 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003bf2:	6978      	ldr	r0, [r7, #20]
 8003bf4:	f7ff ff26 	bl	8003a44 <prvUnlockQueue>
	}
 8003bf8:	bf00      	nop
 8003bfa:	3718      	adds	r7, #24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b08e      	sub	sp, #56	; 0x38
 8003c04:	af04      	add	r7, sp, #16
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
 8003c0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10a      	bne.n	8003c2a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c18:	f383 8811 	msr	BASEPRI, r3
 8003c1c:	f3bf 8f6f 	isb	sy
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	623b      	str	r3, [r7, #32]
}
 8003c26:	bf00      	nop
 8003c28:	e7fe      	b.n	8003c28 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10a      	bne.n	8003c46 <xTaskCreateStatic+0x46>
	__asm volatile
 8003c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c34:	f383 8811 	msr	BASEPRI, r3
 8003c38:	f3bf 8f6f 	isb	sy
 8003c3c:	f3bf 8f4f 	dsb	sy
 8003c40:	61fb      	str	r3, [r7, #28]
}
 8003c42:	bf00      	nop
 8003c44:	e7fe      	b.n	8003c44 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003c46:	235c      	movs	r3, #92	; 0x5c
 8003c48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	2b5c      	cmp	r3, #92	; 0x5c
 8003c4e:	d00a      	beq.n	8003c66 <xTaskCreateStatic+0x66>
	__asm volatile
 8003c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c54:	f383 8811 	msr	BASEPRI, r3
 8003c58:	f3bf 8f6f 	isb	sy
 8003c5c:	f3bf 8f4f 	dsb	sy
 8003c60:	61bb      	str	r3, [r7, #24]
}
 8003c62:	bf00      	nop
 8003c64:	e7fe      	b.n	8003c64 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003c66:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d01e      	beq.n	8003cac <xTaskCreateStatic+0xac>
 8003c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d01b      	beq.n	8003cac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c76:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c7c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	2202      	movs	r2, #2
 8003c82:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003c86:	2300      	movs	r3, #0
 8003c88:	9303      	str	r3, [sp, #12]
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	9302      	str	r3, [sp, #8]
 8003c8e:	f107 0314 	add.w	r3, r7, #20
 8003c92:	9301      	str	r3, [sp, #4]
 8003c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	68b9      	ldr	r1, [r7, #8]
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f000 f850 	bl	8003d44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ca4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ca6:	f000 f8dd 	bl	8003e64 <prvAddNewTaskToReadyList>
 8003caa:	e001      	b.n	8003cb0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003cac:	2300      	movs	r3, #0
 8003cae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003cb0:	697b      	ldr	r3, [r7, #20]
	}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3728      	adds	r7, #40	; 0x28
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b08c      	sub	sp, #48	; 0x30
 8003cbe:	af04      	add	r7, sp, #16
 8003cc0:	60f8      	str	r0, [r7, #12]
 8003cc2:	60b9      	str	r1, [r7, #8]
 8003cc4:	603b      	str	r3, [r7, #0]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003cca:	88fb      	ldrh	r3, [r7, #6]
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fe fdba 	bl	8002848 <pvPortMalloc>
 8003cd4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00e      	beq.n	8003cfa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003cdc:	205c      	movs	r0, #92	; 0x5c
 8003cde:	f7fe fdb3 	bl	8002848 <pvPortMalloc>
 8003ce2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	631a      	str	r2, [r3, #48]	; 0x30
 8003cf0:	e005      	b.n	8003cfe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003cf2:	6978      	ldr	r0, [r7, #20]
 8003cf4:	f7fe fe74 	bl	80029e0 <vPortFree>
 8003cf8:	e001      	b.n	8003cfe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d017      	beq.n	8003d34 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d0c:	88fa      	ldrh	r2, [r7, #6]
 8003d0e:	2300      	movs	r3, #0
 8003d10:	9303      	str	r3, [sp, #12]
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	9302      	str	r3, [sp, #8]
 8003d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d18:	9301      	str	r3, [sp, #4]
 8003d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	68b9      	ldr	r1, [r7, #8]
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f000 f80e 	bl	8003d44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d28:	69f8      	ldr	r0, [r7, #28]
 8003d2a:	f000 f89b 	bl	8003e64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	61bb      	str	r3, [r7, #24]
 8003d32:	e002      	b.n	8003d3a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d34:	f04f 33ff 	mov.w	r3, #4294967295
 8003d38:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003d3a:	69bb      	ldr	r3, [r7, #24]
	}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3720      	adds	r7, #32
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b088      	sub	sp, #32
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
 8003d50:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d54:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	21a5      	movs	r1, #165	; 0xa5
 8003d5e:	f001 f9cd 	bl	80050fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003d6c:	440b      	add	r3, r1
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	f023 0307 	bic.w	r3, r3, #7
 8003d7a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	f003 0307 	and.w	r3, r3, #7
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00a      	beq.n	8003d9c <prvInitialiseNewTask+0x58>
	__asm volatile
 8003d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8a:	f383 8811 	msr	BASEPRI, r3
 8003d8e:	f3bf 8f6f 	isb	sy
 8003d92:	f3bf 8f4f 	dsb	sy
 8003d96:	617b      	str	r3, [r7, #20]
}
 8003d98:	bf00      	nop
 8003d9a:	e7fe      	b.n	8003d9a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d01f      	beq.n	8003de2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003da2:	2300      	movs	r3, #0
 8003da4:	61fb      	str	r3, [r7, #28]
 8003da6:	e012      	b.n	8003dce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003da8:	68ba      	ldr	r2, [r7, #8]
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	4413      	add	r3, r2
 8003dae:	7819      	ldrb	r1, [r3, #0]
 8003db0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	4413      	add	r3, r2
 8003db6:	3334      	adds	r3, #52	; 0x34
 8003db8:	460a      	mov	r2, r1
 8003dba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d006      	beq.n	8003dd6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	61fb      	str	r3, [r7, #28]
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	2b0f      	cmp	r3, #15
 8003dd2:	d9e9      	bls.n	8003da8 <prvInitialiseNewTask+0x64>
 8003dd4:	e000      	b.n	8003dd8 <prvInitialiseNewTask+0x94>
			{
				break;
 8003dd6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003de0:	e003      	b.n	8003dea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dec:	2b37      	cmp	r3, #55	; 0x37
 8003dee:	d901      	bls.n	8003df4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003df0:	2337      	movs	r3, #55	; 0x37
 8003df2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003df8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dfe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e02:	2200      	movs	r2, #0
 8003e04:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e08:	3304      	adds	r3, #4
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7fe ff26 	bl	8002c5c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e12:	3318      	adds	r3, #24
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fe ff21 	bl	8002c5c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e1e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e22:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e28:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e2e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e32:	2200      	movs	r2, #0
 8003e34:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	68f9      	ldr	r1, [r7, #12]
 8003e42:	69b8      	ldr	r0, [r7, #24]
 8003e44:	f7fe ff9e 	bl	8002d84 <pxPortInitialiseStack>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d002      	beq.n	8003e5a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e5a:	bf00      	nop
 8003e5c:	3720      	adds	r7, #32
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003e6c:	f7ff f8ba 	bl	8002fe4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003e70:	4b2d      	ldr	r3, [pc, #180]	; (8003f28 <prvAddNewTaskToReadyList+0xc4>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	3301      	adds	r3, #1
 8003e76:	4a2c      	ldr	r2, [pc, #176]	; (8003f28 <prvAddNewTaskToReadyList+0xc4>)
 8003e78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003e7a:	4b2c      	ldr	r3, [pc, #176]	; (8003f2c <prvAddNewTaskToReadyList+0xc8>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d109      	bne.n	8003e96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003e82:	4a2a      	ldr	r2, [pc, #168]	; (8003f2c <prvAddNewTaskToReadyList+0xc8>)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003e88:	4b27      	ldr	r3, [pc, #156]	; (8003f28 <prvAddNewTaskToReadyList+0xc4>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d110      	bne.n	8003eb2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003e90:	f000 fc16 	bl	80046c0 <prvInitialiseTaskLists>
 8003e94:	e00d      	b.n	8003eb2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003e96:	4b26      	ldr	r3, [pc, #152]	; (8003f30 <prvAddNewTaskToReadyList+0xcc>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d109      	bne.n	8003eb2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e9e:	4b23      	ldr	r3, [pc, #140]	; (8003f2c <prvAddNewTaskToReadyList+0xc8>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d802      	bhi.n	8003eb2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003eac:	4a1f      	ldr	r2, [pc, #124]	; (8003f2c <prvAddNewTaskToReadyList+0xc8>)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003eb2:	4b20      	ldr	r3, [pc, #128]	; (8003f34 <prvAddNewTaskToReadyList+0xd0>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	4a1e      	ldr	r2, [pc, #120]	; (8003f34 <prvAddNewTaskToReadyList+0xd0>)
 8003eba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003ebc:	4b1d      	ldr	r3, [pc, #116]	; (8003f34 <prvAddNewTaskToReadyList+0xd0>)
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec8:	4b1b      	ldr	r3, [pc, #108]	; (8003f38 <prvAddNewTaskToReadyList+0xd4>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d903      	bls.n	8003ed8 <prvAddNewTaskToReadyList+0x74>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed4:	4a18      	ldr	r2, [pc, #96]	; (8003f38 <prvAddNewTaskToReadyList+0xd4>)
 8003ed6:	6013      	str	r3, [r2, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4a15      	ldr	r2, [pc, #84]	; (8003f3c <prvAddNewTaskToReadyList+0xd8>)
 8003ee6:	441a      	add	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3304      	adds	r3, #4
 8003eec:	4619      	mov	r1, r3
 8003eee:	4610      	mov	r0, r2
 8003ef0:	f7fe fec1 	bl	8002c76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003ef4:	f7ff f8a6 	bl	8003044 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003ef8:	4b0d      	ldr	r3, [pc, #52]	; (8003f30 <prvAddNewTaskToReadyList+0xcc>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00e      	beq.n	8003f1e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f00:	4b0a      	ldr	r3, [pc, #40]	; (8003f2c <prvAddNewTaskToReadyList+0xc8>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d207      	bcs.n	8003f1e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003f0e:	4b0c      	ldr	r3, [pc, #48]	; (8003f40 <prvAddNewTaskToReadyList+0xdc>)
 8003f10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	f3bf 8f4f 	dsb	sy
 8003f1a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f1e:	bf00      	nop
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	24004880 	.word	0x24004880
 8003f2c:	240043ac 	.word	0x240043ac
 8003f30:	2400488c 	.word	0x2400488c
 8003f34:	2400489c 	.word	0x2400489c
 8003f38:	24004888 	.word	0x24004888
 8003f3c:	240043b0 	.word	0x240043b0
 8003f40:	e000ed04 	.word	0xe000ed04

08003f44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d017      	beq.n	8003f86 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003f56:	4b13      	ldr	r3, [pc, #76]	; (8003fa4 <vTaskDelay+0x60>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00a      	beq.n	8003f74 <vTaskDelay+0x30>
	__asm volatile
 8003f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f62:	f383 8811 	msr	BASEPRI, r3
 8003f66:	f3bf 8f6f 	isb	sy
 8003f6a:	f3bf 8f4f 	dsb	sy
 8003f6e:	60bb      	str	r3, [r7, #8]
}
 8003f70:	bf00      	nop
 8003f72:	e7fe      	b.n	8003f72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003f74:	f000 f880 	bl	8004078 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003f78:	2100      	movs	r1, #0
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 fcea 	bl	8004954 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003f80:	f000 f888 	bl	8004094 <xTaskResumeAll>
 8003f84:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d107      	bne.n	8003f9c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003f8c:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <vTaskDelay+0x64>)
 8003f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f9c:	bf00      	nop
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	240048a8 	.word	0x240048a8
 8003fa8:	e000ed04 	.word	0xe000ed04

08003fac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b08a      	sub	sp, #40	; 0x28
 8003fb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003fba:	463a      	mov	r2, r7
 8003fbc:	1d39      	adds	r1, r7, #4
 8003fbe:	f107 0308 	add.w	r3, r7, #8
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fe fc0c 	bl	80027e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003fc8:	6839      	ldr	r1, [r7, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	9202      	str	r2, [sp, #8]
 8003fd0:	9301      	str	r3, [sp, #4]
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	460a      	mov	r2, r1
 8003fda:	4921      	ldr	r1, [pc, #132]	; (8004060 <vTaskStartScheduler+0xb4>)
 8003fdc:	4821      	ldr	r0, [pc, #132]	; (8004064 <vTaskStartScheduler+0xb8>)
 8003fde:	f7ff fe0f 	bl	8003c00 <xTaskCreateStatic>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	4a20      	ldr	r2, [pc, #128]	; (8004068 <vTaskStartScheduler+0xbc>)
 8003fe6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003fe8:	4b1f      	ldr	r3, [pc, #124]	; (8004068 <vTaskStartScheduler+0xbc>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d002      	beq.n	8003ff6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	617b      	str	r3, [r7, #20]
 8003ff4:	e001      	b.n	8003ffa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d102      	bne.n	8004006 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004000:	f000 fcfc 	bl	80049fc <xTimerCreateTimerTask>
 8004004:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d116      	bne.n	800403a <vTaskStartScheduler+0x8e>
	__asm volatile
 800400c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004010:	f383 8811 	msr	BASEPRI, r3
 8004014:	f3bf 8f6f 	isb	sy
 8004018:	f3bf 8f4f 	dsb	sy
 800401c:	613b      	str	r3, [r7, #16]
}
 800401e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004020:	4b12      	ldr	r3, [pc, #72]	; (800406c <vTaskStartScheduler+0xc0>)
 8004022:	f04f 32ff 	mov.w	r2, #4294967295
 8004026:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004028:	4b11      	ldr	r3, [pc, #68]	; (8004070 <vTaskStartScheduler+0xc4>)
 800402a:	2201      	movs	r2, #1
 800402c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800402e:	4b11      	ldr	r3, [pc, #68]	; (8004074 <vTaskStartScheduler+0xc8>)
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004034:	f7fe ff34 	bl	8002ea0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004038:	e00e      	b.n	8004058 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004040:	d10a      	bne.n	8004058 <vTaskStartScheduler+0xac>
	__asm volatile
 8004042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004046:	f383 8811 	msr	BASEPRI, r3
 800404a:	f3bf 8f6f 	isb	sy
 800404e:	f3bf 8f4f 	dsb	sy
 8004052:	60fb      	str	r3, [r7, #12]
}
 8004054:	bf00      	nop
 8004056:	e7fe      	b.n	8004056 <vTaskStartScheduler+0xaa>
}
 8004058:	bf00      	nop
 800405a:	3718      	adds	r7, #24
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	0800513c 	.word	0x0800513c
 8004064:	08004691 	.word	0x08004691
 8004068:	240048a4 	.word	0x240048a4
 800406c:	240048a0 	.word	0x240048a0
 8004070:	2400488c 	.word	0x2400488c
 8004074:	24004884 	.word	0x24004884

08004078 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004078:	b480      	push	{r7}
 800407a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800407c:	4b04      	ldr	r3, [pc, #16]	; (8004090 <vTaskSuspendAll+0x18>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	3301      	adds	r3, #1
 8004082:	4a03      	ldr	r2, [pc, #12]	; (8004090 <vTaskSuspendAll+0x18>)
 8004084:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004086:	bf00      	nop
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	240048a8 	.word	0x240048a8

08004094 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800409a:	2300      	movs	r3, #0
 800409c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800409e:	2300      	movs	r3, #0
 80040a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80040a2:	4b42      	ldr	r3, [pc, #264]	; (80041ac <xTaskResumeAll+0x118>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10a      	bne.n	80040c0 <xTaskResumeAll+0x2c>
	__asm volatile
 80040aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ae:	f383 8811 	msr	BASEPRI, r3
 80040b2:	f3bf 8f6f 	isb	sy
 80040b6:	f3bf 8f4f 	dsb	sy
 80040ba:	603b      	str	r3, [r7, #0]
}
 80040bc:	bf00      	nop
 80040be:	e7fe      	b.n	80040be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80040c0:	f7fe ff90 	bl	8002fe4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80040c4:	4b39      	ldr	r3, [pc, #228]	; (80041ac <xTaskResumeAll+0x118>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	3b01      	subs	r3, #1
 80040ca:	4a38      	ldr	r2, [pc, #224]	; (80041ac <xTaskResumeAll+0x118>)
 80040cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040ce:	4b37      	ldr	r3, [pc, #220]	; (80041ac <xTaskResumeAll+0x118>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d162      	bne.n	800419c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80040d6:	4b36      	ldr	r3, [pc, #216]	; (80041b0 <xTaskResumeAll+0x11c>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d05e      	beq.n	800419c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040de:	e02f      	b.n	8004140 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040e0:	4b34      	ldr	r3, [pc, #208]	; (80041b4 <xTaskResumeAll+0x120>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	3318      	adds	r3, #24
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7fe fe1f 	bl	8002d30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	3304      	adds	r3, #4
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fe fe1a 	bl	8002d30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004100:	4b2d      	ldr	r3, [pc, #180]	; (80041b8 <xTaskResumeAll+0x124>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	429a      	cmp	r2, r3
 8004106:	d903      	bls.n	8004110 <xTaskResumeAll+0x7c>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410c:	4a2a      	ldr	r2, [pc, #168]	; (80041b8 <xTaskResumeAll+0x124>)
 800410e:	6013      	str	r3, [r2, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004114:	4613      	mov	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4a27      	ldr	r2, [pc, #156]	; (80041bc <xTaskResumeAll+0x128>)
 800411e:	441a      	add	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	3304      	adds	r3, #4
 8004124:	4619      	mov	r1, r3
 8004126:	4610      	mov	r0, r2
 8004128:	f7fe fda5 	bl	8002c76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004130:	4b23      	ldr	r3, [pc, #140]	; (80041c0 <xTaskResumeAll+0x12c>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004136:	429a      	cmp	r2, r3
 8004138:	d302      	bcc.n	8004140 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800413a:	4b22      	ldr	r3, [pc, #136]	; (80041c4 <xTaskResumeAll+0x130>)
 800413c:	2201      	movs	r2, #1
 800413e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004140:	4b1c      	ldr	r3, [pc, #112]	; (80041b4 <xTaskResumeAll+0x120>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1cb      	bne.n	80040e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800414e:	f000 fb55 	bl	80047fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004152:	4b1d      	ldr	r3, [pc, #116]	; (80041c8 <xTaskResumeAll+0x134>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d010      	beq.n	8004180 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800415e:	f000 f847 	bl	80041f0 <xTaskIncrementTick>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d002      	beq.n	800416e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004168:	4b16      	ldr	r3, [pc, #88]	; (80041c4 <xTaskResumeAll+0x130>)
 800416a:	2201      	movs	r2, #1
 800416c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	3b01      	subs	r3, #1
 8004172:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1f1      	bne.n	800415e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800417a:	4b13      	ldr	r3, [pc, #76]	; (80041c8 <xTaskResumeAll+0x134>)
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004180:	4b10      	ldr	r3, [pc, #64]	; (80041c4 <xTaskResumeAll+0x130>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d009      	beq.n	800419c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004188:	2301      	movs	r3, #1
 800418a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800418c:	4b0f      	ldr	r3, [pc, #60]	; (80041cc <xTaskResumeAll+0x138>)
 800418e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	f3bf 8f4f 	dsb	sy
 8004198:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800419c:	f7fe ff52 	bl	8003044 <vPortExitCritical>

	return xAlreadyYielded;
 80041a0:	68bb      	ldr	r3, [r7, #8]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	240048a8 	.word	0x240048a8
 80041b0:	24004880 	.word	0x24004880
 80041b4:	24004840 	.word	0x24004840
 80041b8:	24004888 	.word	0x24004888
 80041bc:	240043b0 	.word	0x240043b0
 80041c0:	240043ac 	.word	0x240043ac
 80041c4:	24004894 	.word	0x24004894
 80041c8:	24004890 	.word	0x24004890
 80041cc:	e000ed04 	.word	0xe000ed04

080041d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80041d6:	4b05      	ldr	r3, [pc, #20]	; (80041ec <xTaskGetTickCount+0x1c>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80041dc:	687b      	ldr	r3, [r7, #4]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	24004884 	.word	0x24004884

080041f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80041f6:	2300      	movs	r3, #0
 80041f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041fa:	4b4f      	ldr	r3, [pc, #316]	; (8004338 <xTaskIncrementTick+0x148>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f040 808f 	bne.w	8004322 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004204:	4b4d      	ldr	r3, [pc, #308]	; (800433c <xTaskIncrementTick+0x14c>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	3301      	adds	r3, #1
 800420a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800420c:	4a4b      	ldr	r2, [pc, #300]	; (800433c <xTaskIncrementTick+0x14c>)
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d120      	bne.n	800425a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004218:	4b49      	ldr	r3, [pc, #292]	; (8004340 <xTaskIncrementTick+0x150>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00a      	beq.n	8004238 <xTaskIncrementTick+0x48>
	__asm volatile
 8004222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004226:	f383 8811 	msr	BASEPRI, r3
 800422a:	f3bf 8f6f 	isb	sy
 800422e:	f3bf 8f4f 	dsb	sy
 8004232:	603b      	str	r3, [r7, #0]
}
 8004234:	bf00      	nop
 8004236:	e7fe      	b.n	8004236 <xTaskIncrementTick+0x46>
 8004238:	4b41      	ldr	r3, [pc, #260]	; (8004340 <xTaskIncrementTick+0x150>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	4b41      	ldr	r3, [pc, #260]	; (8004344 <xTaskIncrementTick+0x154>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a3f      	ldr	r2, [pc, #252]	; (8004340 <xTaskIncrementTick+0x150>)
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	4a3f      	ldr	r2, [pc, #252]	; (8004344 <xTaskIncrementTick+0x154>)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6013      	str	r3, [r2, #0]
 800424c:	4b3e      	ldr	r3, [pc, #248]	; (8004348 <xTaskIncrementTick+0x158>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	3301      	adds	r3, #1
 8004252:	4a3d      	ldr	r2, [pc, #244]	; (8004348 <xTaskIncrementTick+0x158>)
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	f000 fad1 	bl	80047fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800425a:	4b3c      	ldr	r3, [pc, #240]	; (800434c <xTaskIncrementTick+0x15c>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	429a      	cmp	r2, r3
 8004262:	d349      	bcc.n	80042f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004264:	4b36      	ldr	r3, [pc, #216]	; (8004340 <xTaskIncrementTick+0x150>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d104      	bne.n	8004278 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800426e:	4b37      	ldr	r3, [pc, #220]	; (800434c <xTaskIncrementTick+0x15c>)
 8004270:	f04f 32ff 	mov.w	r2, #4294967295
 8004274:	601a      	str	r2, [r3, #0]
					break;
 8004276:	e03f      	b.n	80042f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004278:	4b31      	ldr	r3, [pc, #196]	; (8004340 <xTaskIncrementTick+0x150>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	429a      	cmp	r2, r3
 800428e:	d203      	bcs.n	8004298 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004290:	4a2e      	ldr	r2, [pc, #184]	; (800434c <xTaskIncrementTick+0x15c>)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004296:	e02f      	b.n	80042f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	3304      	adds	r3, #4
 800429c:	4618      	mov	r0, r3
 800429e:	f7fe fd47 	bl	8002d30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d004      	beq.n	80042b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	3318      	adds	r3, #24
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7fe fd3e 	bl	8002d30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b8:	4b25      	ldr	r3, [pc, #148]	; (8004350 <xTaskIncrementTick+0x160>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d903      	bls.n	80042c8 <xTaskIncrementTick+0xd8>
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c4:	4a22      	ldr	r2, [pc, #136]	; (8004350 <xTaskIncrementTick+0x160>)
 80042c6:	6013      	str	r3, [r2, #0]
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042cc:	4613      	mov	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4a1f      	ldr	r2, [pc, #124]	; (8004354 <xTaskIncrementTick+0x164>)
 80042d6:	441a      	add	r2, r3
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	3304      	adds	r3, #4
 80042dc:	4619      	mov	r1, r3
 80042de:	4610      	mov	r0, r2
 80042e0:	f7fe fcc9 	bl	8002c76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e8:	4b1b      	ldr	r3, [pc, #108]	; (8004358 <xTaskIncrementTick+0x168>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d3b8      	bcc.n	8004264 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80042f2:	2301      	movs	r3, #1
 80042f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042f6:	e7b5      	b.n	8004264 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80042f8:	4b17      	ldr	r3, [pc, #92]	; (8004358 <xTaskIncrementTick+0x168>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042fe:	4915      	ldr	r1, [pc, #84]	; (8004354 <xTaskIncrementTick+0x164>)
 8004300:	4613      	mov	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	440b      	add	r3, r1
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d901      	bls.n	8004314 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004310:	2301      	movs	r3, #1
 8004312:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004314:	4b11      	ldr	r3, [pc, #68]	; (800435c <xTaskIncrementTick+0x16c>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d007      	beq.n	800432c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800431c:	2301      	movs	r3, #1
 800431e:	617b      	str	r3, [r7, #20]
 8004320:	e004      	b.n	800432c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004322:	4b0f      	ldr	r3, [pc, #60]	; (8004360 <xTaskIncrementTick+0x170>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	3301      	adds	r3, #1
 8004328:	4a0d      	ldr	r2, [pc, #52]	; (8004360 <xTaskIncrementTick+0x170>)
 800432a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800432c:	697b      	ldr	r3, [r7, #20]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3718      	adds	r7, #24
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	240048a8 	.word	0x240048a8
 800433c:	24004884 	.word	0x24004884
 8004340:	24004838 	.word	0x24004838
 8004344:	2400483c 	.word	0x2400483c
 8004348:	24004898 	.word	0x24004898
 800434c:	240048a0 	.word	0x240048a0
 8004350:	24004888 	.word	0x24004888
 8004354:	240043b0 	.word	0x240043b0
 8004358:	240043ac 	.word	0x240043ac
 800435c:	24004894 	.word	0x24004894
 8004360:	24004890 	.word	0x24004890

08004364 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800436a:	4b28      	ldr	r3, [pc, #160]	; (800440c <vTaskSwitchContext+0xa8>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004372:	4b27      	ldr	r3, [pc, #156]	; (8004410 <vTaskSwitchContext+0xac>)
 8004374:	2201      	movs	r2, #1
 8004376:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004378:	e041      	b.n	80043fe <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800437a:	4b25      	ldr	r3, [pc, #148]	; (8004410 <vTaskSwitchContext+0xac>)
 800437c:	2200      	movs	r2, #0
 800437e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004380:	4b24      	ldr	r3, [pc, #144]	; (8004414 <vTaskSwitchContext+0xb0>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	60fb      	str	r3, [r7, #12]
 8004386:	e010      	b.n	80043aa <vTaskSwitchContext+0x46>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10a      	bne.n	80043a4 <vTaskSwitchContext+0x40>
	__asm volatile
 800438e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004392:	f383 8811 	msr	BASEPRI, r3
 8004396:	f3bf 8f6f 	isb	sy
 800439a:	f3bf 8f4f 	dsb	sy
 800439e:	607b      	str	r3, [r7, #4]
}
 80043a0:	bf00      	nop
 80043a2:	e7fe      	b.n	80043a2 <vTaskSwitchContext+0x3e>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	3b01      	subs	r3, #1
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	491b      	ldr	r1, [pc, #108]	; (8004418 <vTaskSwitchContext+0xb4>)
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	4613      	mov	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4413      	add	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	440b      	add	r3, r1
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0e4      	beq.n	8004388 <vTaskSwitchContext+0x24>
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4613      	mov	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4413      	add	r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4a13      	ldr	r2, [pc, #76]	; (8004418 <vTaskSwitchContext+0xb4>)
 80043ca:	4413      	add	r3, r2
 80043cc:	60bb      	str	r3, [r7, #8]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	605a      	str	r2, [r3, #4]
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	3308      	adds	r3, #8
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d104      	bne.n	80043ee <vTaskSwitchContext+0x8a>
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	605a      	str	r2, [r3, #4]
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	4a09      	ldr	r2, [pc, #36]	; (800441c <vTaskSwitchContext+0xb8>)
 80043f6:	6013      	str	r3, [r2, #0]
 80043f8:	4a06      	ldr	r2, [pc, #24]	; (8004414 <vTaskSwitchContext+0xb0>)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6013      	str	r3, [r2, #0]
}
 80043fe:	bf00      	nop
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	240048a8 	.word	0x240048a8
 8004410:	24004894 	.word	0x24004894
 8004414:	24004888 	.word	0x24004888
 8004418:	240043b0 	.word	0x240043b0
 800441c:	240043ac 	.word	0x240043ac

08004420 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10a      	bne.n	8004446 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004434:	f383 8811 	msr	BASEPRI, r3
 8004438:	f3bf 8f6f 	isb	sy
 800443c:	f3bf 8f4f 	dsb	sy
 8004440:	60fb      	str	r3, [r7, #12]
}
 8004442:	bf00      	nop
 8004444:	e7fe      	b.n	8004444 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004446:	4b07      	ldr	r3, [pc, #28]	; (8004464 <vTaskPlaceOnEventList+0x44>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	3318      	adds	r3, #24
 800444c:	4619      	mov	r1, r3
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7fe fc35 	bl	8002cbe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004454:	2101      	movs	r1, #1
 8004456:	6838      	ldr	r0, [r7, #0]
 8004458:	f000 fa7c 	bl	8004954 <prvAddCurrentTaskToDelayedList>
}
 800445c:	bf00      	nop
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	240043ac 	.word	0x240043ac

08004468 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10a      	bne.n	8004490 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800447a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447e:	f383 8811 	msr	BASEPRI, r3
 8004482:	f3bf 8f6f 	isb	sy
 8004486:	f3bf 8f4f 	dsb	sy
 800448a:	617b      	str	r3, [r7, #20]
}
 800448c:	bf00      	nop
 800448e:	e7fe      	b.n	800448e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004490:	4b0a      	ldr	r3, [pc, #40]	; (80044bc <vTaskPlaceOnEventListRestricted+0x54>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3318      	adds	r3, #24
 8004496:	4619      	mov	r1, r3
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f7fe fbec 	bl	8002c76 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d002      	beq.n	80044aa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80044a4:	f04f 33ff 	mov.w	r3, #4294967295
 80044a8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80044aa:	6879      	ldr	r1, [r7, #4]
 80044ac:	68b8      	ldr	r0, [r7, #8]
 80044ae:	f000 fa51 	bl	8004954 <prvAddCurrentTaskToDelayedList>
	}
 80044b2:	bf00      	nop
 80044b4:	3718      	adds	r7, #24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	240043ac 	.word	0x240043ac

080044c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10a      	bne.n	80044ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80044d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044da:	f383 8811 	msr	BASEPRI, r3
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	f3bf 8f4f 	dsb	sy
 80044e6:	60fb      	str	r3, [r7, #12]
}
 80044e8:	bf00      	nop
 80044ea:	e7fe      	b.n	80044ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	3318      	adds	r3, #24
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7fe fc1d 	bl	8002d30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044f6:	4b1e      	ldr	r3, [pc, #120]	; (8004570 <xTaskRemoveFromEventList+0xb0>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d11d      	bne.n	800453a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	3304      	adds	r3, #4
 8004502:	4618      	mov	r0, r3
 8004504:	f7fe fc14 	bl	8002d30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800450c:	4b19      	ldr	r3, [pc, #100]	; (8004574 <xTaskRemoveFromEventList+0xb4>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	429a      	cmp	r2, r3
 8004512:	d903      	bls.n	800451c <xTaskRemoveFromEventList+0x5c>
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004518:	4a16      	ldr	r2, [pc, #88]	; (8004574 <xTaskRemoveFromEventList+0xb4>)
 800451a:	6013      	str	r3, [r2, #0]
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004520:	4613      	mov	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	4413      	add	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4a13      	ldr	r2, [pc, #76]	; (8004578 <xTaskRemoveFromEventList+0xb8>)
 800452a:	441a      	add	r2, r3
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	3304      	adds	r3, #4
 8004530:	4619      	mov	r1, r3
 8004532:	4610      	mov	r0, r2
 8004534:	f7fe fb9f 	bl	8002c76 <vListInsertEnd>
 8004538:	e005      	b.n	8004546 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	3318      	adds	r3, #24
 800453e:	4619      	mov	r1, r3
 8004540:	480e      	ldr	r0, [pc, #56]	; (800457c <xTaskRemoveFromEventList+0xbc>)
 8004542:	f7fe fb98 	bl	8002c76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800454a:	4b0d      	ldr	r3, [pc, #52]	; (8004580 <xTaskRemoveFromEventList+0xc0>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004550:	429a      	cmp	r2, r3
 8004552:	d905      	bls.n	8004560 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004554:	2301      	movs	r3, #1
 8004556:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004558:	4b0a      	ldr	r3, [pc, #40]	; (8004584 <xTaskRemoveFromEventList+0xc4>)
 800455a:	2201      	movs	r2, #1
 800455c:	601a      	str	r2, [r3, #0]
 800455e:	e001      	b.n	8004564 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004560:	2300      	movs	r3, #0
 8004562:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004564:	697b      	ldr	r3, [r7, #20]
}
 8004566:	4618      	mov	r0, r3
 8004568:	3718      	adds	r7, #24
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	240048a8 	.word	0x240048a8
 8004574:	24004888 	.word	0x24004888
 8004578:	240043b0 	.word	0x240043b0
 800457c:	24004840 	.word	0x24004840
 8004580:	240043ac 	.word	0x240043ac
 8004584:	24004894 	.word	0x24004894

08004588 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004590:	4b06      	ldr	r3, [pc, #24]	; (80045ac <vTaskInternalSetTimeOutState+0x24>)
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004598:	4b05      	ldr	r3, [pc, #20]	; (80045b0 <vTaskInternalSetTimeOutState+0x28>)
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	605a      	str	r2, [r3, #4]
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	24004898 	.word	0x24004898
 80045b0:	24004884 	.word	0x24004884

080045b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b088      	sub	sp, #32
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10a      	bne.n	80045da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80045c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c8:	f383 8811 	msr	BASEPRI, r3
 80045cc:	f3bf 8f6f 	isb	sy
 80045d0:	f3bf 8f4f 	dsb	sy
 80045d4:	613b      	str	r3, [r7, #16]
}
 80045d6:	bf00      	nop
 80045d8:	e7fe      	b.n	80045d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10a      	bne.n	80045f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80045e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e4:	f383 8811 	msr	BASEPRI, r3
 80045e8:	f3bf 8f6f 	isb	sy
 80045ec:	f3bf 8f4f 	dsb	sy
 80045f0:	60fb      	str	r3, [r7, #12]
}
 80045f2:	bf00      	nop
 80045f4:	e7fe      	b.n	80045f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80045f6:	f7fe fcf5 	bl	8002fe4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80045fa:	4b1d      	ldr	r3, [pc, #116]	; (8004670 <xTaskCheckForTimeOut+0xbc>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004612:	d102      	bne.n	800461a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004614:	2300      	movs	r3, #0
 8004616:	61fb      	str	r3, [r7, #28]
 8004618:	e023      	b.n	8004662 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	4b15      	ldr	r3, [pc, #84]	; (8004674 <xTaskCheckForTimeOut+0xc0>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	429a      	cmp	r2, r3
 8004624:	d007      	beq.n	8004636 <xTaskCheckForTimeOut+0x82>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	429a      	cmp	r2, r3
 800462e:	d302      	bcc.n	8004636 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004630:	2301      	movs	r3, #1
 8004632:	61fb      	str	r3, [r7, #28]
 8004634:	e015      	b.n	8004662 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	429a      	cmp	r2, r3
 800463e:	d20b      	bcs.n	8004658 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	1ad2      	subs	r2, r2, r3
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f7ff ff9b 	bl	8004588 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004652:	2300      	movs	r3, #0
 8004654:	61fb      	str	r3, [r7, #28]
 8004656:	e004      	b.n	8004662 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	2200      	movs	r2, #0
 800465c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800465e:	2301      	movs	r3, #1
 8004660:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004662:	f7fe fcef 	bl	8003044 <vPortExitCritical>

	return xReturn;
 8004666:	69fb      	ldr	r3, [r7, #28]
}
 8004668:	4618      	mov	r0, r3
 800466a:	3720      	adds	r7, #32
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	24004884 	.word	0x24004884
 8004674:	24004898 	.word	0x24004898

08004678 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800467c:	4b03      	ldr	r3, [pc, #12]	; (800468c <vTaskMissedYield+0x14>)
 800467e:	2201      	movs	r2, #1
 8004680:	601a      	str	r2, [r3, #0]
}
 8004682:	bf00      	nop
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	24004894 	.word	0x24004894

08004690 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004698:	f000 f852 	bl	8004740 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800469c:	4b06      	ldr	r3, [pc, #24]	; (80046b8 <prvIdleTask+0x28>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d9f9      	bls.n	8004698 <prvIdleTask+0x8>
			{
				taskYIELD();
 80046a4:	4b05      	ldr	r3, [pc, #20]	; (80046bc <prvIdleTask+0x2c>)
 80046a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	f3bf 8f4f 	dsb	sy
 80046b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80046b4:	e7f0      	b.n	8004698 <prvIdleTask+0x8>
 80046b6:	bf00      	nop
 80046b8:	240043b0 	.word	0x240043b0
 80046bc:	e000ed04 	.word	0xe000ed04

080046c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046c6:	2300      	movs	r3, #0
 80046c8:	607b      	str	r3, [r7, #4]
 80046ca:	e00c      	b.n	80046e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	4613      	mov	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4413      	add	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4a12      	ldr	r2, [pc, #72]	; (8004720 <prvInitialiseTaskLists+0x60>)
 80046d8:	4413      	add	r3, r2
 80046da:	4618      	mov	r0, r3
 80046dc:	f7fe fa9e 	bl	8002c1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	3301      	adds	r3, #1
 80046e4:	607b      	str	r3, [r7, #4]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b37      	cmp	r3, #55	; 0x37
 80046ea:	d9ef      	bls.n	80046cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80046ec:	480d      	ldr	r0, [pc, #52]	; (8004724 <prvInitialiseTaskLists+0x64>)
 80046ee:	f7fe fa95 	bl	8002c1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80046f2:	480d      	ldr	r0, [pc, #52]	; (8004728 <prvInitialiseTaskLists+0x68>)
 80046f4:	f7fe fa92 	bl	8002c1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80046f8:	480c      	ldr	r0, [pc, #48]	; (800472c <prvInitialiseTaskLists+0x6c>)
 80046fa:	f7fe fa8f 	bl	8002c1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80046fe:	480c      	ldr	r0, [pc, #48]	; (8004730 <prvInitialiseTaskLists+0x70>)
 8004700:	f7fe fa8c 	bl	8002c1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004704:	480b      	ldr	r0, [pc, #44]	; (8004734 <prvInitialiseTaskLists+0x74>)
 8004706:	f7fe fa89 	bl	8002c1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800470a:	4b0b      	ldr	r3, [pc, #44]	; (8004738 <prvInitialiseTaskLists+0x78>)
 800470c:	4a05      	ldr	r2, [pc, #20]	; (8004724 <prvInitialiseTaskLists+0x64>)
 800470e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004710:	4b0a      	ldr	r3, [pc, #40]	; (800473c <prvInitialiseTaskLists+0x7c>)
 8004712:	4a05      	ldr	r2, [pc, #20]	; (8004728 <prvInitialiseTaskLists+0x68>)
 8004714:	601a      	str	r2, [r3, #0]
}
 8004716:	bf00      	nop
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	240043b0 	.word	0x240043b0
 8004724:	24004810 	.word	0x24004810
 8004728:	24004824 	.word	0x24004824
 800472c:	24004840 	.word	0x24004840
 8004730:	24004854 	.word	0x24004854
 8004734:	2400486c 	.word	0x2400486c
 8004738:	24004838 	.word	0x24004838
 800473c:	2400483c 	.word	0x2400483c

08004740 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004746:	e019      	b.n	800477c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004748:	f7fe fc4c 	bl	8002fe4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800474c:	4b10      	ldr	r3, [pc, #64]	; (8004790 <prvCheckTasksWaitingTermination+0x50>)
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	3304      	adds	r3, #4
 8004758:	4618      	mov	r0, r3
 800475a:	f7fe fae9 	bl	8002d30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800475e:	4b0d      	ldr	r3, [pc, #52]	; (8004794 <prvCheckTasksWaitingTermination+0x54>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3b01      	subs	r3, #1
 8004764:	4a0b      	ldr	r2, [pc, #44]	; (8004794 <prvCheckTasksWaitingTermination+0x54>)
 8004766:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004768:	4b0b      	ldr	r3, [pc, #44]	; (8004798 <prvCheckTasksWaitingTermination+0x58>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3b01      	subs	r3, #1
 800476e:	4a0a      	ldr	r2, [pc, #40]	; (8004798 <prvCheckTasksWaitingTermination+0x58>)
 8004770:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004772:	f7fe fc67 	bl	8003044 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f810 	bl	800479c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800477c:	4b06      	ldr	r3, [pc, #24]	; (8004798 <prvCheckTasksWaitingTermination+0x58>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1e1      	bne.n	8004748 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004784:	bf00      	nop
 8004786:	bf00      	nop
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	24004854 	.word	0x24004854
 8004794:	24004880 	.word	0x24004880
 8004798:	24004868 	.word	0x24004868

0800479c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d108      	bne.n	80047c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fe f914 	bl	80029e0 <vPortFree>
				vPortFree( pxTCB );
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7fe f911 	bl	80029e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80047be:	e018      	b.n	80047f2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d103      	bne.n	80047d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7fe f908 	bl	80029e0 <vPortFree>
	}
 80047d0:	e00f      	b.n	80047f2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d00a      	beq.n	80047f2 <prvDeleteTCB+0x56>
	__asm volatile
 80047dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e0:	f383 8811 	msr	BASEPRI, r3
 80047e4:	f3bf 8f6f 	isb	sy
 80047e8:	f3bf 8f4f 	dsb	sy
 80047ec:	60fb      	str	r3, [r7, #12]
}
 80047ee:	bf00      	nop
 80047f0:	e7fe      	b.n	80047f0 <prvDeleteTCB+0x54>
	}
 80047f2:	bf00      	nop
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
	...

080047fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004802:	4b0c      	ldr	r3, [pc, #48]	; (8004834 <prvResetNextTaskUnblockTime+0x38>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d104      	bne.n	8004816 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800480c:	4b0a      	ldr	r3, [pc, #40]	; (8004838 <prvResetNextTaskUnblockTime+0x3c>)
 800480e:	f04f 32ff 	mov.w	r2, #4294967295
 8004812:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004814:	e008      	b.n	8004828 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004816:	4b07      	ldr	r3, [pc, #28]	; (8004834 <prvResetNextTaskUnblockTime+0x38>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	4a04      	ldr	r2, [pc, #16]	; (8004838 <prvResetNextTaskUnblockTime+0x3c>)
 8004826:	6013      	str	r3, [r2, #0]
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	24004838 	.word	0x24004838
 8004838:	240048a0 	.word	0x240048a0

0800483c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004842:	4b0b      	ldr	r3, [pc, #44]	; (8004870 <xTaskGetSchedulerState+0x34>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d102      	bne.n	8004850 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800484a:	2301      	movs	r3, #1
 800484c:	607b      	str	r3, [r7, #4]
 800484e:	e008      	b.n	8004862 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004850:	4b08      	ldr	r3, [pc, #32]	; (8004874 <xTaskGetSchedulerState+0x38>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d102      	bne.n	800485e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004858:	2302      	movs	r3, #2
 800485a:	607b      	str	r3, [r7, #4]
 800485c:	e001      	b.n	8004862 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800485e:	2300      	movs	r3, #0
 8004860:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004862:	687b      	ldr	r3, [r7, #4]
	}
 8004864:	4618      	mov	r0, r3
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	2400488c 	.word	0x2400488c
 8004874:	240048a8 	.word	0x240048a8

08004878 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004884:	2300      	movs	r3, #0
 8004886:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d056      	beq.n	800493c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800488e:	4b2e      	ldr	r3, [pc, #184]	; (8004948 <xTaskPriorityDisinherit+0xd0>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	429a      	cmp	r2, r3
 8004896:	d00a      	beq.n	80048ae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489c:	f383 8811 	msr	BASEPRI, r3
 80048a0:	f3bf 8f6f 	isb	sy
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	60fb      	str	r3, [r7, #12]
}
 80048aa:	bf00      	nop
 80048ac:	e7fe      	b.n	80048ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10a      	bne.n	80048cc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80048b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ba:	f383 8811 	msr	BASEPRI, r3
 80048be:	f3bf 8f6f 	isb	sy
 80048c2:	f3bf 8f4f 	dsb	sy
 80048c6:	60bb      	str	r3, [r7, #8]
}
 80048c8:	bf00      	nop
 80048ca:	e7fe      	b.n	80048ca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d0:	1e5a      	subs	r2, r3, #1
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048de:	429a      	cmp	r2, r3
 80048e0:	d02c      	beq.n	800493c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d128      	bne.n	800493c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	3304      	adds	r3, #4
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7fe fa1e 	bl	8002d30 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004900:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800490c:	4b0f      	ldr	r3, [pc, #60]	; (800494c <xTaskPriorityDisinherit+0xd4>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	429a      	cmp	r2, r3
 8004912:	d903      	bls.n	800491c <xTaskPriorityDisinherit+0xa4>
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004918:	4a0c      	ldr	r2, [pc, #48]	; (800494c <xTaskPriorityDisinherit+0xd4>)
 800491a:	6013      	str	r3, [r2, #0]
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004920:	4613      	mov	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4413      	add	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4a09      	ldr	r2, [pc, #36]	; (8004950 <xTaskPriorityDisinherit+0xd8>)
 800492a:	441a      	add	r2, r3
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	3304      	adds	r3, #4
 8004930:	4619      	mov	r1, r3
 8004932:	4610      	mov	r0, r2
 8004934:	f7fe f99f 	bl	8002c76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004938:	2301      	movs	r3, #1
 800493a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800493c:	697b      	ldr	r3, [r7, #20]
	}
 800493e:	4618      	mov	r0, r3
 8004940:	3718      	adds	r7, #24
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	240043ac 	.word	0x240043ac
 800494c:	24004888 	.word	0x24004888
 8004950:	240043b0 	.word	0x240043b0

08004954 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800495e:	4b21      	ldr	r3, [pc, #132]	; (80049e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004964:	4b20      	ldr	r3, [pc, #128]	; (80049e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	3304      	adds	r3, #4
 800496a:	4618      	mov	r0, r3
 800496c:	f7fe f9e0 	bl	8002d30 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004976:	d10a      	bne.n	800498e <prvAddCurrentTaskToDelayedList+0x3a>
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d007      	beq.n	800498e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800497e:	4b1a      	ldr	r3, [pc, #104]	; (80049e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	3304      	adds	r3, #4
 8004984:	4619      	mov	r1, r3
 8004986:	4819      	ldr	r0, [pc, #100]	; (80049ec <prvAddCurrentTaskToDelayedList+0x98>)
 8004988:	f7fe f975 	bl	8002c76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800498c:	e026      	b.n	80049dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4413      	add	r3, r2
 8004994:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004996:	4b14      	ldr	r3, [pc, #80]	; (80049e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d209      	bcs.n	80049ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049a6:	4b12      	ldr	r3, [pc, #72]	; (80049f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	4b0f      	ldr	r3, [pc, #60]	; (80049e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	3304      	adds	r3, #4
 80049b0:	4619      	mov	r1, r3
 80049b2:	4610      	mov	r0, r2
 80049b4:	f7fe f983 	bl	8002cbe <vListInsert>
}
 80049b8:	e010      	b.n	80049dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049ba:	4b0e      	ldr	r3, [pc, #56]	; (80049f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	4b0a      	ldr	r3, [pc, #40]	; (80049e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	3304      	adds	r3, #4
 80049c4:	4619      	mov	r1, r3
 80049c6:	4610      	mov	r0, r2
 80049c8:	f7fe f979 	bl	8002cbe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80049cc:	4b0a      	ldr	r3, [pc, #40]	; (80049f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d202      	bcs.n	80049dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80049d6:	4a08      	ldr	r2, [pc, #32]	; (80049f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	6013      	str	r3, [r2, #0]
}
 80049dc:	bf00      	nop
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	24004884 	.word	0x24004884
 80049e8:	240043ac 	.word	0x240043ac
 80049ec:	2400486c 	.word	0x2400486c
 80049f0:	2400483c 	.word	0x2400483c
 80049f4:	24004838 	.word	0x24004838
 80049f8:	240048a0 	.word	0x240048a0

080049fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b08a      	sub	sp, #40	; 0x28
 8004a00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004a02:	2300      	movs	r3, #0
 8004a04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004a06:	f000 fb07 	bl	8005018 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004a0a:	4b1c      	ldr	r3, [pc, #112]	; (8004a7c <xTimerCreateTimerTask+0x80>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d021      	beq.n	8004a56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004a12:	2300      	movs	r3, #0
 8004a14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004a16:	2300      	movs	r3, #0
 8004a18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004a1a:	1d3a      	adds	r2, r7, #4
 8004a1c:	f107 0108 	add.w	r1, r7, #8
 8004a20:	f107 030c 	add.w	r3, r7, #12
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7fd fef5 	bl	8002814 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004a2a:	6879      	ldr	r1, [r7, #4]
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	9202      	str	r2, [sp, #8]
 8004a32:	9301      	str	r3, [sp, #4]
 8004a34:	2302      	movs	r3, #2
 8004a36:	9300      	str	r3, [sp, #0]
 8004a38:	2300      	movs	r3, #0
 8004a3a:	460a      	mov	r2, r1
 8004a3c:	4910      	ldr	r1, [pc, #64]	; (8004a80 <xTimerCreateTimerTask+0x84>)
 8004a3e:	4811      	ldr	r0, [pc, #68]	; (8004a84 <xTimerCreateTimerTask+0x88>)
 8004a40:	f7ff f8de 	bl	8003c00 <xTaskCreateStatic>
 8004a44:	4603      	mov	r3, r0
 8004a46:	4a10      	ldr	r2, [pc, #64]	; (8004a88 <xTimerCreateTimerTask+0x8c>)
 8004a48:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004a4a:	4b0f      	ldr	r3, [pc, #60]	; (8004a88 <xTimerCreateTimerTask+0x8c>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d001      	beq.n	8004a56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004a52:	2301      	movs	r3, #1
 8004a54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10a      	bne.n	8004a72 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	613b      	str	r3, [r7, #16]
}
 8004a6e:	bf00      	nop
 8004a70:	e7fe      	b.n	8004a70 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004a72:	697b      	ldr	r3, [r7, #20]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3718      	adds	r7, #24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	240048dc 	.word	0x240048dc
 8004a80:	08005144 	.word	0x08005144
 8004a84:	08004bc1 	.word	0x08004bc1
 8004a88:	240048e0 	.word	0x240048e0

08004a8c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b08a      	sub	sp, #40	; 0x28
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
 8004a98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10a      	bne.n	8004aba <xTimerGenericCommand+0x2e>
	__asm volatile
 8004aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa8:	f383 8811 	msr	BASEPRI, r3
 8004aac:	f3bf 8f6f 	isb	sy
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	623b      	str	r3, [r7, #32]
}
 8004ab6:	bf00      	nop
 8004ab8:	e7fe      	b.n	8004ab8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004aba:	4b1a      	ldr	r3, [pc, #104]	; (8004b24 <xTimerGenericCommand+0x98>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d02a      	beq.n	8004b18 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	2b05      	cmp	r3, #5
 8004ad2:	dc18      	bgt.n	8004b06 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004ad4:	f7ff feb2 	bl	800483c <xTaskGetSchedulerState>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d109      	bne.n	8004af2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004ade:	4b11      	ldr	r3, [pc, #68]	; (8004b24 <xTimerGenericCommand+0x98>)
 8004ae0:	6818      	ldr	r0, [r3, #0]
 8004ae2:	f107 0110 	add.w	r1, r7, #16
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aea:	f7fe fca1 	bl	8003430 <xQueueGenericSend>
 8004aee:	6278      	str	r0, [r7, #36]	; 0x24
 8004af0:	e012      	b.n	8004b18 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004af2:	4b0c      	ldr	r3, [pc, #48]	; (8004b24 <xTimerGenericCommand+0x98>)
 8004af4:	6818      	ldr	r0, [r3, #0]
 8004af6:	f107 0110 	add.w	r1, r7, #16
 8004afa:	2300      	movs	r3, #0
 8004afc:	2200      	movs	r2, #0
 8004afe:	f7fe fc97 	bl	8003430 <xQueueGenericSend>
 8004b02:	6278      	str	r0, [r7, #36]	; 0x24
 8004b04:	e008      	b.n	8004b18 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004b06:	4b07      	ldr	r3, [pc, #28]	; (8004b24 <xTimerGenericCommand+0x98>)
 8004b08:	6818      	ldr	r0, [r3, #0]
 8004b0a:	f107 0110 	add.w	r1, r7, #16
 8004b0e:	2300      	movs	r3, #0
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	f7fe fd8b 	bl	800362c <xQueueGenericSendFromISR>
 8004b16:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3728      	adds	r7, #40	; 0x28
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	240048dc 	.word	0x240048dc

08004b28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b088      	sub	sp, #32
 8004b2c:	af02      	add	r7, sp, #8
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b32:	4b22      	ldr	r3, [pc, #136]	; (8004bbc <prvProcessExpiredTimer+0x94>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	3304      	adds	r3, #4
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7fe f8f5 	bl	8002d30 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b4c:	f003 0304 	and.w	r3, r3, #4
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d022      	beq.n	8004b9a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	699a      	ldr	r2, [r3, #24]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	18d1      	adds	r1, r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	683a      	ldr	r2, [r7, #0]
 8004b60:	6978      	ldr	r0, [r7, #20]
 8004b62:	f000 f8d1 	bl	8004d08 <prvInsertTimerInActiveList>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d01f      	beq.n	8004bac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	2300      	movs	r3, #0
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	2100      	movs	r1, #0
 8004b76:	6978      	ldr	r0, [r7, #20]
 8004b78:	f7ff ff88 	bl	8004a8c <xTimerGenericCommand>
 8004b7c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d113      	bne.n	8004bac <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b88:	f383 8811 	msr	BASEPRI, r3
 8004b8c:	f3bf 8f6f 	isb	sy
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	60fb      	str	r3, [r7, #12]
}
 8004b96:	bf00      	nop
 8004b98:	e7fe      	b.n	8004b98 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ba0:	f023 0301 	bic.w	r3, r3, #1
 8004ba4:	b2da      	uxtb	r2, r3
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	6978      	ldr	r0, [r7, #20]
 8004bb2:	4798      	blx	r3
}
 8004bb4:	bf00      	nop
 8004bb6:	3718      	adds	r7, #24
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	240048d4 	.word	0x240048d4

08004bc0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004bc8:	f107 0308 	add.w	r3, r7, #8
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f000 f857 	bl	8004c80 <prvGetNextExpireTime>
 8004bd2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f000 f803 	bl	8004be4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004bde:	f000 f8d5 	bl	8004d8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004be2:	e7f1      	b.n	8004bc8 <prvTimerTask+0x8>

08004be4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004bee:	f7ff fa43 	bl	8004078 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004bf2:	f107 0308 	add.w	r3, r7, #8
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 f866 	bl	8004cc8 <prvSampleTimeNow>
 8004bfc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d130      	bne.n	8004c66 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10a      	bne.n	8004c20 <prvProcessTimerOrBlockTask+0x3c>
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d806      	bhi.n	8004c20 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004c12:	f7ff fa3f 	bl	8004094 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004c16:	68f9      	ldr	r1, [r7, #12]
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f7ff ff85 	bl	8004b28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004c1e:	e024      	b.n	8004c6a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d008      	beq.n	8004c38 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004c26:	4b13      	ldr	r3, [pc, #76]	; (8004c74 <prvProcessTimerOrBlockTask+0x90>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <prvProcessTimerOrBlockTask+0x50>
 8004c30:	2301      	movs	r3, #1
 8004c32:	e000      	b.n	8004c36 <prvProcessTimerOrBlockTask+0x52>
 8004c34:	2300      	movs	r3, #0
 8004c36:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004c38:	4b0f      	ldr	r3, [pc, #60]	; (8004c78 <prvProcessTimerOrBlockTask+0x94>)
 8004c3a:	6818      	ldr	r0, [r3, #0]
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	4619      	mov	r1, r3
 8004c46:	f7fe ffa7 	bl	8003b98 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004c4a:	f7ff fa23 	bl	8004094 <xTaskResumeAll>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10a      	bne.n	8004c6a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004c54:	4b09      	ldr	r3, [pc, #36]	; (8004c7c <prvProcessTimerOrBlockTask+0x98>)
 8004c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	f3bf 8f4f 	dsb	sy
 8004c60:	f3bf 8f6f 	isb	sy
}
 8004c64:	e001      	b.n	8004c6a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004c66:	f7ff fa15 	bl	8004094 <xTaskResumeAll>
}
 8004c6a:	bf00      	nop
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	240048d8 	.word	0x240048d8
 8004c78:	240048dc 	.word	0x240048dc
 8004c7c:	e000ed04 	.word	0xe000ed04

08004c80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004c88:	4b0e      	ldr	r3, [pc, #56]	; (8004cc4 <prvGetNextExpireTime+0x44>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <prvGetNextExpireTime+0x16>
 8004c92:	2201      	movs	r2, #1
 8004c94:	e000      	b.n	8004c98 <prvGetNextExpireTime+0x18>
 8004c96:	2200      	movs	r2, #0
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d105      	bne.n	8004cb0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ca4:	4b07      	ldr	r3, [pc, #28]	; (8004cc4 <prvGetNextExpireTime+0x44>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	60fb      	str	r3, [r7, #12]
 8004cae:	e001      	b.n	8004cb4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3714      	adds	r7, #20
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	240048d4 	.word	0x240048d4

08004cc8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004cd0:	f7ff fa7e 	bl	80041d0 <xTaskGetTickCount>
 8004cd4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004cd6:	4b0b      	ldr	r3, [pc, #44]	; (8004d04 <prvSampleTimeNow+0x3c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d205      	bcs.n	8004cec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004ce0:	f000 f936 	bl	8004f50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	e002      	b.n	8004cf2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004cf2:	4a04      	ldr	r2, [pc, #16]	; (8004d04 <prvSampleTimeNow+0x3c>)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	240048e4 	.word	0x240048e4

08004d08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
 8004d14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004d16:	2300      	movs	r3, #0
 8004d18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d812      	bhi.n	8004d54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	1ad2      	subs	r2, r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d302      	bcc.n	8004d42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	617b      	str	r3, [r7, #20]
 8004d40:	e01b      	b.n	8004d7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004d42:	4b10      	ldr	r3, [pc, #64]	; (8004d84 <prvInsertTimerInActiveList+0x7c>)
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	3304      	adds	r3, #4
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	4610      	mov	r0, r2
 8004d4e:	f7fd ffb6 	bl	8002cbe <vListInsert>
 8004d52:	e012      	b.n	8004d7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d206      	bcs.n	8004d6a <prvInsertTimerInActiveList+0x62>
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d302      	bcc.n	8004d6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004d64:	2301      	movs	r3, #1
 8004d66:	617b      	str	r3, [r7, #20]
 8004d68:	e007      	b.n	8004d7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d6a:	4b07      	ldr	r3, [pc, #28]	; (8004d88 <prvInsertTimerInActiveList+0x80>)
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	3304      	adds	r3, #4
 8004d72:	4619      	mov	r1, r3
 8004d74:	4610      	mov	r0, r2
 8004d76:	f7fd ffa2 	bl	8002cbe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004d7a:	697b      	ldr	r3, [r7, #20]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3718      	adds	r7, #24
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	240048d8 	.word	0x240048d8
 8004d88:	240048d4 	.word	0x240048d4

08004d8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b08e      	sub	sp, #56	; 0x38
 8004d90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d92:	e0ca      	b.n	8004f2a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	da18      	bge.n	8004dcc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004d9a:	1d3b      	adds	r3, r7, #4
 8004d9c:	3304      	adds	r3, #4
 8004d9e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10a      	bne.n	8004dbc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004daa:	f383 8811 	msr	BASEPRI, r3
 8004dae:	f3bf 8f6f 	isb	sy
 8004db2:	f3bf 8f4f 	dsb	sy
 8004db6:	61fb      	str	r3, [r7, #28]
}
 8004db8:	bf00      	nop
 8004dba:	e7fe      	b.n	8004dba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dc2:	6850      	ldr	r0, [r2, #4]
 8004dc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dc6:	6892      	ldr	r2, [r2, #8]
 8004dc8:	4611      	mov	r1, r2
 8004dca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f2c0 80aa 	blt.w	8004f28 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d004      	beq.n	8004dea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de2:	3304      	adds	r3, #4
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7fd ffa3 	bl	8002d30 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004dea:	463b      	mov	r3, r7
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7ff ff6b 	bl	8004cc8 <prvSampleTimeNow>
 8004df2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b09      	cmp	r3, #9
 8004df8:	f200 8097 	bhi.w	8004f2a <prvProcessReceivedCommands+0x19e>
 8004dfc:	a201      	add	r2, pc, #4	; (adr r2, 8004e04 <prvProcessReceivedCommands+0x78>)
 8004dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e02:	bf00      	nop
 8004e04:	08004e2d 	.word	0x08004e2d
 8004e08:	08004e2d 	.word	0x08004e2d
 8004e0c:	08004e2d 	.word	0x08004e2d
 8004e10:	08004ea1 	.word	0x08004ea1
 8004e14:	08004eb5 	.word	0x08004eb5
 8004e18:	08004eff 	.word	0x08004eff
 8004e1c:	08004e2d 	.word	0x08004e2d
 8004e20:	08004e2d 	.word	0x08004e2d
 8004e24:	08004ea1 	.word	0x08004ea1
 8004e28:	08004eb5 	.word	0x08004eb5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e32:	f043 0301 	orr.w	r3, r3, #1
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	18d1      	adds	r1, r2, r3
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e4c:	f7ff ff5c 	bl	8004d08 <prvInsertTimerInActiveList>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d069      	beq.n	8004f2a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e64:	f003 0304 	and.w	r3, r3, #4
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d05e      	beq.n	8004f2a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	441a      	add	r2, r3
 8004e74:	2300      	movs	r3, #0
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	2300      	movs	r3, #0
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e7e:	f7ff fe05 	bl	8004a8c <xTimerGenericCommand>
 8004e82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d14f      	bne.n	8004f2a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8e:	f383 8811 	msr	BASEPRI, r3
 8004e92:	f3bf 8f6f 	isb	sy
 8004e96:	f3bf 8f4f 	dsb	sy
 8004e9a:	61bb      	str	r3, [r7, #24]
}
 8004e9c:	bf00      	nop
 8004e9e:	e7fe      	b.n	8004e9e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ea6:	f023 0301 	bic.w	r3, r3, #1
 8004eaa:	b2da      	uxtb	r2, r3
 8004eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004eb2:	e03a      	b.n	8004f2a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004eba:	f043 0301 	orr.w	r3, r3, #1
 8004ebe:	b2da      	uxtb	r2, r3
 8004ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004ec6:	68ba      	ldr	r2, [r7, #8]
 8004ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d10a      	bne.n	8004eea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed8:	f383 8811 	msr	BASEPRI, r3
 8004edc:	f3bf 8f6f 	isb	sy
 8004ee0:	f3bf 8f4f 	dsb	sy
 8004ee4:	617b      	str	r3, [r7, #20]
}
 8004ee6:	bf00      	nop
 8004ee8:	e7fe      	b.n	8004ee8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eec:	699a      	ldr	r2, [r3, #24]
 8004eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef0:	18d1      	adds	r1, r2, r3
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ef8:	f7ff ff06 	bl	8004d08 <prvInsertTimerInActiveList>
					break;
 8004efc:	e015      	b.n	8004f2a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d103      	bne.n	8004f14 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004f0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f0e:	f7fd fd67 	bl	80029e0 <vPortFree>
 8004f12:	e00a      	b.n	8004f2a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f1a:	f023 0301 	bic.w	r3, r3, #1
 8004f1e:	b2da      	uxtb	r2, r3
 8004f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004f26:	e000      	b.n	8004f2a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004f28:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f2a:	4b08      	ldr	r3, [pc, #32]	; (8004f4c <prvProcessReceivedCommands+0x1c0>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	1d39      	adds	r1, r7, #4
 8004f30:	2200      	movs	r2, #0
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7fe fc16 	bl	8003764 <xQueueReceive>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f47f af2a 	bne.w	8004d94 <prvProcessReceivedCommands+0x8>
	}
}
 8004f40:	bf00      	nop
 8004f42:	bf00      	nop
 8004f44:	3730      	adds	r7, #48	; 0x30
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	240048dc 	.word	0x240048dc

08004f50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b088      	sub	sp, #32
 8004f54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f56:	e048      	b.n	8004fea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f58:	4b2d      	ldr	r3, [pc, #180]	; (8005010 <prvSwitchTimerLists+0xc0>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f62:	4b2b      	ldr	r3, [pc, #172]	; (8005010 <prvSwitchTimerLists+0xc0>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	3304      	adds	r3, #4
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7fd fedd 	bl	8002d30 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f84:	f003 0304 	and.w	r3, r3, #4
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d02e      	beq.n	8004fea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	4413      	add	r3, r2
 8004f94:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d90e      	bls.n	8004fbc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004faa:	4b19      	ldr	r3, [pc, #100]	; (8005010 <prvSwitchTimerLists+0xc0>)
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	3304      	adds	r3, #4
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	4610      	mov	r0, r2
 8004fb6:	f7fd fe82 	bl	8002cbe <vListInsert>
 8004fba:	e016      	b.n	8004fea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f7ff fd60 	bl	8004a8c <xTimerGenericCommand>
 8004fcc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d10a      	bne.n	8004fea <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd8:	f383 8811 	msr	BASEPRI, r3
 8004fdc:	f3bf 8f6f 	isb	sy
 8004fe0:	f3bf 8f4f 	dsb	sy
 8004fe4:	603b      	str	r3, [r7, #0]
}
 8004fe6:	bf00      	nop
 8004fe8:	e7fe      	b.n	8004fe8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004fea:	4b09      	ldr	r3, [pc, #36]	; (8005010 <prvSwitchTimerLists+0xc0>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1b1      	bne.n	8004f58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004ff4:	4b06      	ldr	r3, [pc, #24]	; (8005010 <prvSwitchTimerLists+0xc0>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004ffa:	4b06      	ldr	r3, [pc, #24]	; (8005014 <prvSwitchTimerLists+0xc4>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a04      	ldr	r2, [pc, #16]	; (8005010 <prvSwitchTimerLists+0xc0>)
 8005000:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005002:	4a04      	ldr	r2, [pc, #16]	; (8005014 <prvSwitchTimerLists+0xc4>)
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	6013      	str	r3, [r2, #0]
}
 8005008:	bf00      	nop
 800500a:	3718      	adds	r7, #24
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	240048d4 	.word	0x240048d4
 8005014:	240048d8 	.word	0x240048d8

08005018 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800501e:	f7fd ffe1 	bl	8002fe4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005022:	4b15      	ldr	r3, [pc, #84]	; (8005078 <prvCheckForValidListAndQueue+0x60>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d120      	bne.n	800506c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800502a:	4814      	ldr	r0, [pc, #80]	; (800507c <prvCheckForValidListAndQueue+0x64>)
 800502c:	f7fd fdf6 	bl	8002c1c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005030:	4813      	ldr	r0, [pc, #76]	; (8005080 <prvCheckForValidListAndQueue+0x68>)
 8005032:	f7fd fdf3 	bl	8002c1c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005036:	4b13      	ldr	r3, [pc, #76]	; (8005084 <prvCheckForValidListAndQueue+0x6c>)
 8005038:	4a10      	ldr	r2, [pc, #64]	; (800507c <prvCheckForValidListAndQueue+0x64>)
 800503a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800503c:	4b12      	ldr	r3, [pc, #72]	; (8005088 <prvCheckForValidListAndQueue+0x70>)
 800503e:	4a10      	ldr	r2, [pc, #64]	; (8005080 <prvCheckForValidListAndQueue+0x68>)
 8005040:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005042:	2300      	movs	r3, #0
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	4b11      	ldr	r3, [pc, #68]	; (800508c <prvCheckForValidListAndQueue+0x74>)
 8005048:	4a11      	ldr	r2, [pc, #68]	; (8005090 <prvCheckForValidListAndQueue+0x78>)
 800504a:	2110      	movs	r1, #16
 800504c:	200a      	movs	r0, #10
 800504e:	f7fe f953 	bl	80032f8 <xQueueGenericCreateStatic>
 8005052:	4603      	mov	r3, r0
 8005054:	4a08      	ldr	r2, [pc, #32]	; (8005078 <prvCheckForValidListAndQueue+0x60>)
 8005056:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005058:	4b07      	ldr	r3, [pc, #28]	; (8005078 <prvCheckForValidListAndQueue+0x60>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d005      	beq.n	800506c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005060:	4b05      	ldr	r3, [pc, #20]	; (8005078 <prvCheckForValidListAndQueue+0x60>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	490b      	ldr	r1, [pc, #44]	; (8005094 <prvCheckForValidListAndQueue+0x7c>)
 8005066:	4618      	mov	r0, r3
 8005068:	f7fe fd6c 	bl	8003b44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800506c:	f7fd ffea 	bl	8003044 <vPortExitCritical>
}
 8005070:	bf00      	nop
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	240048dc 	.word	0x240048dc
 800507c:	240048ac 	.word	0x240048ac
 8005080:	240048c0 	.word	0x240048c0
 8005084:	240048d4 	.word	0x240048d4
 8005088:	240048d8 	.word	0x240048d8
 800508c:	24004988 	.word	0x24004988
 8005090:	240048e8 	.word	0x240048e8
 8005094:	0800514c 	.word	0x0800514c

08005098 <__libc_init_array>:
 8005098:	b570      	push	{r4, r5, r6, lr}
 800509a:	4d0d      	ldr	r5, [pc, #52]	; (80050d0 <__libc_init_array+0x38>)
 800509c:	4c0d      	ldr	r4, [pc, #52]	; (80050d4 <__libc_init_array+0x3c>)
 800509e:	1b64      	subs	r4, r4, r5
 80050a0:	10a4      	asrs	r4, r4, #2
 80050a2:	2600      	movs	r6, #0
 80050a4:	42a6      	cmp	r6, r4
 80050a6:	d109      	bne.n	80050bc <__libc_init_array+0x24>
 80050a8:	4d0b      	ldr	r5, [pc, #44]	; (80050d8 <__libc_init_array+0x40>)
 80050aa:	4c0c      	ldr	r4, [pc, #48]	; (80050dc <__libc_init_array+0x44>)
 80050ac:	f000 f82e 	bl	800510c <_init>
 80050b0:	1b64      	subs	r4, r4, r5
 80050b2:	10a4      	asrs	r4, r4, #2
 80050b4:	2600      	movs	r6, #0
 80050b6:	42a6      	cmp	r6, r4
 80050b8:	d105      	bne.n	80050c6 <__libc_init_array+0x2e>
 80050ba:	bd70      	pop	{r4, r5, r6, pc}
 80050bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80050c0:	4798      	blx	r3
 80050c2:	3601      	adds	r6, #1
 80050c4:	e7ee      	b.n	80050a4 <__libc_init_array+0xc>
 80050c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ca:	4798      	blx	r3
 80050cc:	3601      	adds	r6, #1
 80050ce:	e7f2      	b.n	80050b6 <__libc_init_array+0x1e>
 80050d0:	080051ac 	.word	0x080051ac
 80050d4:	080051ac 	.word	0x080051ac
 80050d8:	080051ac 	.word	0x080051ac
 80050dc:	080051b0 	.word	0x080051b0

080050e0 <memcpy>:
 80050e0:	440a      	add	r2, r1
 80050e2:	4291      	cmp	r1, r2
 80050e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80050e8:	d100      	bne.n	80050ec <memcpy+0xc>
 80050ea:	4770      	bx	lr
 80050ec:	b510      	push	{r4, lr}
 80050ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050f6:	4291      	cmp	r1, r2
 80050f8:	d1f9      	bne.n	80050ee <memcpy+0xe>
 80050fa:	bd10      	pop	{r4, pc}

080050fc <memset>:
 80050fc:	4402      	add	r2, r0
 80050fe:	4603      	mov	r3, r0
 8005100:	4293      	cmp	r3, r2
 8005102:	d100      	bne.n	8005106 <memset+0xa>
 8005104:	4770      	bx	lr
 8005106:	f803 1b01 	strb.w	r1, [r3], #1
 800510a:	e7f9      	b.n	8005100 <memset+0x4>

0800510c <_init>:
 800510c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800510e:	bf00      	nop
 8005110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005112:	bc08      	pop	{r3}
 8005114:	469e      	mov	lr, r3
 8005116:	4770      	bx	lr

08005118 <_fini>:
 8005118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800511a:	bf00      	nop
 800511c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800511e:	bc08      	pop	{r3}
 8005120:	469e      	mov	lr, r3
 8005122:	4770      	bx	lr
